<?php
// $Id$
/**
 * @file
 * MoneyScripts Core
 * Licensed under the GNU GPLv2 License
 */
// Include the classes
require_once('ms_core.classes.php');
// Include the sub include files
require_once('ms_core.recurring.inc');

/**
* Display help and module information
*/
function ms_core_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_core":
      $output .= '<p>'.  t("MoneyScripts Core Module. This contains a number of API functions that are
      required by all MoneyScripts modules. It also provides storage and classes for Orders, Payments,
      Recurring Schedules, Products and Carts. In addition, a number of helper functions are provided
      which are used by payment gateways and other MoneyScripts modules.") .'</p>';
      break;
    case "admin/moneyscripts/orders":
      $output .= '<p>'.  t("This page provides a listing of all MoneyScripts orders, and allows you
      to filter the listing. There are also links to View, Edit and Delete Orders. Be careful when
      deleting orders, as this action cannot be undone and will delete all related order data.") .'</p>';
      break;
    case "admin/moneyscripts/payments":
      $output .= '<p>'.  t("This page provides an overview of all payments that were processed. You can
      export the reports as CSV files, as well as apply filters.") .'</p>';
      break;
    case "admin/moneyscripts/orders/add":
      $output .= '<p>'.  t("Use the form on this page to add an order manually. This can be useful
      when you want to add a product to a user's account without requiring them to go through checkout
      and make a payment. Once you create the order, you will probably also want to Add one or more
      Products to the order as well as Add a Payment so that the modules can act on the payment and
      grant the product to the user.") .'</p>';
      break;
    case "admin/moneyscripts/orders/view/%":
      $output .= '<p>'.  t("This page shows all of the details relating to a specific order. You can also
      perform various actions, depending on the order type, such as Cancel Recurring Payments.") .'</p>';
      break;
    case "admin/moneyscripts/orders/edit/%":
      $output .= '<p>'.  t("Only advanced users should attempt to edit an order. Most of the time there
      should be no need to edit an order. From this page you can also Add or Remove Products from an
      order, as well as Add, Remove or Resubmit Payments.") .'</p>';
      break;
    case "admin/moneyscripts/gateways":
      $output .= '<p>'.  t("Here you can view all of the Payment Gateways which you have currently
      enabled. Most payment gateways require that you configure them before they will work properly.") .'</p>';
      break;
    case "admin/moneyscripts/reports":
      $output .= '<p>'.  t("Using the reports pages listed below, you can quickly view the sales and other
      statistics of your MoneyScripts modules.") .'</p>';
      break;
    case "admin/moneyscripts/ms_core":
      $output .= '<p>'.  t("Some of the basic settings which are used by many MoneyScripts modules are
      listed here. For tutorials, <a href='@url'>click here</a>",
        array('@url' => url('https://www.moneyscripts.net/tutorials'))) .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function ms_core_perm() {
  return array('administer moneyscripts settings', 'edit own payment info', 'access checkout page', 'view own moneyscripts orders', 'view moneyscripts reports', 'administer moneyscripts orders', 'access moneyscripts cart');
}

/**
 * Implementation of hook_cron().
 */
function ms_core_cron() {
  // Clear the cache for license and updates
  cache_clear_all('ms_updates', 'cache');
  cache_clear_all('ms_requirements', 'cache');
  cache_clear_all('ms_licenses', 'cache');

  // Empty anonymous carts.
  $time = strtotime(variable_get('ms_cart_anon_duration', '4') .' '. variable_get('ms_cart_anon_unit', 'hours') .' ago');
  $result = db_query("SELECT DISTINCT cart_id FROM {ms_cart_products} WHERE changed <= %d AND CHAR_LENGTH(cart_id) > 8", $time);
  while ($row = db_fetch_object($result)) {
    ms_core_empty_cart($row->cart_id);
  }

  // Delete old orders that were abandoned by anonymous users.
  $result = db_query("SELECT * FROM {ms_orders} WHERE status = '%s' AND uid = %d AND modified <= %d",
    array('checkout', 0, $time));
  while ($row = db_fetch_object($result)) {
    ms_core_order_delete($row->oid);
  }

  // Empty authenticated carts.
  $time = strtotime(variable_get('ms_cart_auth_duration', '1') .' '. variable_get('ms_cart_auth_unit', 'years') .' ago');
  $result = db_query("SELECT DISTINCT cart_id FROM {ms_cart_products} WHERE changed <= %d AND CHAR_LENGTH(cart_id) <= 8", $time);
  while ($row = db_fetch_object($result)) {
    ms_core_empty_cart($row->cart_id);
  }

  // Send the emails notifying users of upcoming payments
  $result = db_query("SELECT * FROM {ms_recurring_schedules} WHERE status = '%s' AND next_payment != 0 AND notified = %d",
      'active', 0);

  while ($recurring_schedule = db_fetch_object($result)) {
    // Load some variables
    $order_data = ms_core_order_load_data($recurring_schedule->oid);

    if ($days = ms_core_variable_get('ms_core_payment_reminder_days', 0, $order_data) AND $recurring_schedule->next_payment < strtotime("+ ". $days ." days")) {
      $order = ms_core_order_load($recurring_schedule->oid);
      $account = user_load($order->uid);

      ms_core_log('ms_core', 'Upcoming payment reminder sent to user @userid at @email.', array('@userid' => $account->uid, '@email' => $account->mail));

      // Send the email
      drupal_mail('ms_core', 'upcoming_payment', $account->mail, user_preferred_language($account), array('order' => $order));

      // Mark as notified
      db_query("UPDATE {ms_recurring_schedules} SET notified = %d WHERE id = %d", 1, $recurring_schedule->id);
    }
  }
}

/**
 * Let everyone view the MS Core essential pages
 */
function ms_core_view_page_access_test() {
  return TRUE;
}

/**
 * See if the user should be able to see the Billing Info page in the User Account
 *
 * @param $user
 */
function ms_core_billing_info_access_test($account) {
  global $user;

  $html = array();
  drupal_alter('ms_core_billing_info', $html, $user);
  if (empty($html)) {
    return FALSE;
  }

  return ($user->uid == $account->uid AND user_access('edit own payment info', $account));
}

/**
 * Make sure that only users who have permission can view the order history
 */
function ms_core_view_history_access_test($account) {
  global $user;
  return (user_access('administer moneyscripts orders') OR (user_access('view own moneyscripts orders') && ($account->uid == $user->uid)));
}

/**
 * Make sure that only users who have permission can view the order details
 */
function ms_core_view_order_access_test($account, $order_key) {
  // First, check if this is pdf crowd and the setting is on
  if (ip_address() == '69.164.218.62' AND variable_get('ms_core_pdfcrowd_support', FALSE)) {
    return TRUE;
  }
  global $user;
  $order = ms_core_order_load_by_key($order_key);
  return (user_access('administer moneyscripts orders') OR (user_access('view own moneyscripts orders') && ($order->uid == $account->uid)));
}

/**
 * Provide a permission for checkout page
 */
function ms_core_checkout_access_test() {
  return user_access('access checkout page');
}

/**
 * Provide a permission for checkout page
 */
function ms_core_delete_order_access_test($order_key) {
  $order = ms_core_order_load_by_key($order_key);
  global $user;
  return (user_access('administer moneyscripts orders') OR ($user->uid AND $order->uid == $user->uid));
}

/**
 * Implementation of hook_menu
 */
function ms_core_menu() {
  $items = array();
  $items['user/%user/order-history/view/%'] = array(
    'title' => 'Details',
    'page callback' => 'ms_core_view_order_details',
    'page arguments' => array(4),
    'access callback' => 'ms_core_view_order_access_test',
    'access arguments' => array(1, 4),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/order-history/view/%/details'] = array(
    'title' => 'Details',
    'page callback' => 'ms_core_view_order_details',
    'page arguments' => array(4),
    'access callback' => 'ms_core_view_order_access_test',
    'access arguments' => array(1, 4),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['user/%user/order-history/view/%/invoice'] = array(
    'title' => 'Invoice',
    'page callback' => 'ms_core_view_order_invoice',
    'page arguments' => array(4),
    'access callback' => 'ms_core_view_order_access_test',
    'access arguments' => array(1, 4),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/order-history/view/%/print'] = array(
    'title' => 'Print',
    'page callback' => 'ms_core_view_order_print',
    'page arguments' => array(4),
    'access callback' => 'ms_core_view_order_access_test',
    'access arguments' => array(1, 4),
    'type' => MENU_LOCAL_TASK,
  );
  $items['user/%user/order-history/delete/%'] = array(
    'title' => 'Delete Order',
    'description' => 'Delete an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_delete_checkout_order_confirm', 4),
    'access callback' => 'ms_core_delete_order_access_test',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
  );
  $items['user/%user/billing-info'] = array(
    'title' => 'Billing Information',
    'page callback' => 'ms_core_user_billing_info_page',
    'page arguments' => array(1),
    'access callback' => 'ms_core_billing_info_access_test',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['ms/checkout'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_core_checkout_page',
    'access callback' => 'ms_core_checkout_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms/resume-checkout/%'] = array(
    'title' => 'Resume Checkout',
    'page callback' => 'ms_core_resume_checkout_page',
    'page arguments' => array(2),
    'access callback' => 'ms_core_checkout_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['ms/cancel/%'] = array(
    'title' => 'Cancel Payments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_cancel_confirm', 2),
    'access callback' => 'ms_core_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ms/modify/%/%'] = array(
    'title' => 'Modify Payments',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_modify_confirm', 2, 3),
    'access callback' => 'ms_core_modify_test',
    'access arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
  );
  $items['ms/cart'] = array(
    'title' => 'Cart',
    'page callback' => 'ms_core_cart_page',
    'access arguments' => array('access moneyscripts cart'),
    'type' => MENU_CALLBACK,
  );
  $items['ms/cart/remove/%'] = array(
    'title' => 'Cart',
    'page callback' => 'ms_core_cart_remove_page',
    'page arguments' => array(3),
    'access arguments' => array('access moneyscripts cart'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/orders'] = array(
    'title' => 'Orders',
    'description' => 'View all of the Orders',
    'page callback' => 'ms_core_view_orders_page',
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneyscripts/orders/list'] = array(
    'title' => 'View Orders',
    'description' => 'View all of the Orders',
    'page callback' => 'ms_core_view_orders_page',
    'access callback' => 'ms_core_view_orders_access_test',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/moneyscripts/orders/add'] = array(
    'title' => 'Add Order',
    'description' => 'Add an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_order_form', 'add'),
    'access callback' => 'ms_core_view_orders_access_test',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/moneyscripts/orders/view/%'] = array(
    'title' => 'View Order Details',
    'description' => 'View Order',
    'page callback' => 'ms_core_view_order_details',
    'page arguments' => array(4),
    'access callback' => 'ms_core_edit_access_test',
    'access arguments' => array(4),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/moneyscripts/orders/edit/%'] = array(
    'title' => 'Edit Order',
    'description' => 'Edit an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_order_form', 'edit', 4),
    'access callback' => 'ms_core_edit_access_test',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/moneyscripts/orders/delete/%'] = array(
    'title' => 'Delete Order',
    'description' => 'Delete an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_delete_order_confirm', 4),
    'access callback' => 'ms_core_edit_access_test',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  );
  $items['admin/moneyscripts/orders/rebuild'] = array(
    'title' => 'Rebuild Orders',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_rebuild_orders_confirm'),
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/moneyscripts/products/add/%'] = array(
    'title' => 'Add Product',
    'description' => 'Add a Product to an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_add_product_form', 4),
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_CALLBACK,
    'weight' => 2,
  );
  $items['admin/moneyscripts/products/remove/%'] = array(
    'title' => 'Remove Product',
    'description' => 'Remove a Product from an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_remove_product_confirm', 4),
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/payments'] = array(
    'title' => 'Payments',
    'description' => 'View all of the Payments',
    'page callback' => 'ms_core_view_payments_page',
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneyscripts/payments/list'] = array(
    'title' => 'View Payments',
    'description' => 'View all of the Payments',
    'page callback' => 'ms_core_view_payments_page',
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/moneyscripts/ms_core/export_csv/%'] = array(
    'title' => 'Export CSV',
    'description' => 'Export this report to CSV',
    'page callback' => 'ms_core_csv_page',
    'page arguments' => array(4),
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/payments/add'] = array(
    'title' => 'Add Payment',
    'description' => 'Add a Payment to an Order',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_edit_payment_form', 'add'),
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/moneyscripts/payments/edit/%'] = array(
    'title' => 'Edit Payment',
    'description' => 'Edit a Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_edit_payment_form', 'edit', 4),
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/payments/delete/%'] = array(
    'title' => 'Delete Payment',
    'description' => 'Delete a Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_delete_payment_confirm', 4),
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/payments/resubmit/%'] = array(
    'title' => 'Resubmit Payment',
    'description' => 'Resubmit a Payment',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_resubmit_payment_confirm', 4),
    'access arguments' => array('administer moneyscripts orders'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts'] = array(
    'title' => 'MoneyScripts',
    'description' => 'MoneyScripts Modules',
    'page callback' => 'ms_core_main_page',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneyscripts/gateways'] = array(
    'title' => 'Gateways',
    'description' => 'MoneyScripts Gateways',
    'page callback' => 'ms_core_gateways_page',
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneyscripts/reports'] = array(
    'title' => 'Reports',
    'description' => 'View various MoneyScripts Reports, Charts and Statistics',
    'page callback' => 'ms_core_reports_page',
    'access arguments' => array('view moneyscripts reports'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneyscripts/ms_core'] = array(
    'title' => 'Core Settings',
    'description' => 'Set the various Core Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_core_admin'),
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/order-history'] = array(
    'title' => 'Order History',
    'page callback' => 'ms_core_history',
    'page arguments' => array(1),
    'access callback' => 'ms_core_view_history_access_test',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['ms/thankyou'] = array(
    'title' => 'Thank You!',
    'page callback' => 'ms_core_thankyou_page',
    'access callback' => 'ms_core_view_page_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/ms_core/autocomplete'] = array(
    'title' => 'Autocomplete',
    'page callback' => 'ms_core_autocomplete_user',
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_CALLBACK,
  );
  $items['ms_core/autocomplete/user'] = array(
    'page callback' => 'ms_core_autocomplete_user',
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_CALLBACK,
  );
  $items['ms_core/autocomplete/node'] = array(
    'page callback' => 'ms_core_autocomplete_node',
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_CALLBACK,
  );
  $items['ms_core/autocomplete/product'] = array(
    'title' => 'Autocomplete',
    'page callback' => 'ms_core_autocomplete_product',
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function ms_core_view_orders_access_test() {
  if (arg(4)) {
    return FALSE;
  }
  if (user_access('administer moneyscripts orders')) {
    return TRUE;
  }
  return FALSE;
}

function ms_core_edit_access_test($order_key) {
  if ($order_key AND user_access('administer moneyscripts orders')) {
    return TRUE;
  }
  return FALSE;
}

// ======================================
// Update Checker
// ======================================

/**
 * Implements hook_ms_license().
 */
function ms_core_ms_license() {
  return array(
    'ms_core' => array(
      'title' => t('MS Core'),
      'link' => 'http://www.moneyscripts.net/ms_core',
    ),
  );
}

/**
 * Implements hook_requirements().
 */
function ms_core_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    if ($req_cache = cache_get('ms_requirements')) {
      $requirements = $req_cache->data;
    }
    else {
      $modules = module_invoke_all('ms_license');

      if ($licenses = ms_core_check_licenses($modules)) {
        foreach ($modules as $module => $info) {
          $req = array('title' => $info['title']);
          if ($licenses[$module]) {
            $req['value'] = 'This Software is properly licensed.';
            $req['severity'] = REQUIREMENT_OK;
          }
          else {
            $req['value'] = t("This Software is not properly licensed.
              You cannot receive any updates or support.
              Please renew or purchase a new license here: !link",
              array('!link' => l($info['title'], $info['link'], array('absolute' => TRUE))));
            $req['severity'] = REQUIREMENT_ERROR;
          }

          $requirements[$module] = $req;
        }
      }
      else {
        $req['title'] = t('MS Core');
        $req['value'] = t("You have not yet entered your license keys.
          Your license keys are found on the !my_software section of your account.
          Please copy and paste these keys here: !link",
          array('!my_software' => l(t('My Software'), 'http://www.moneyscripts.net/user', array('absolute' => TRUE)),
            '!link' => l('License Keys', 'admin/moneyscripts/ms_core')));
        $req['severity'] = REQUIREMENT_ERROR;

        $requirements['ms_core'] = $req;
      }
      cache_set('ms_requirements', $requirements, 'cache');
    }

    return $requirements;
  }
}

/**
 * Helper function to check the licenses for the software, used for fetching updates
 */
function ms_core_check_licenses($modules = array(), $rebuild = FALSE) {
  if (!$rebuild AND $licenses_cache = cache_get('ms_licenses')) {
    return $licenses_cache->data;
  }
  $rec_data = xmlrpc('http://www.moneyscripts.net/xmlrpc.php', 'moneyscripts.check_licenses',
      variable_get('ms_core_public_key', ''),
      $_SERVER['HTTP_HOST'],
      $modules
  );

  if ($error = xmlrpc_error_msg()) {
    ms_core_log_error('ms_core', 'Error using XMLRPC. Error: @error', array('@error' => $error));
  }

  if (isset($rec_data['keys_valid']) AND $rec_data['keys_valid']) {
    cache_set('ms_licenses', $rec_data['licenses']);
    return $rec_data['licenses'];
  }

  return FALSE;
}

/**
 * Implements hook_update_status_alter().
 */
function ms_core_update_status_alter(&$projects) {
  if ($updates_cache = cache_get('ms_updates')) {
    $updates = $updates_cache->data;
  }
  else {
    $updates = array();
    $modules = module_invoke_all('ms_license');

    if ($licenses = ms_core_check_licenses($modules)) {
      foreach ($modules as $module => $info) {
        $req = array('title' => $info['title']);
        if (isset($licenses[$module]) AND isset($projects[$module])) {
          $updates[$module] = xmlrpc('http://www.moneyscripts.net/xmlrpc.php',
            'moneyscripts.check_module_updates', variable_get('ms_core_public_key', ''),
              $_SERVER['HTTP_HOST'], 6, $module, $projects[$module]);
        }
      }
    }

    cache_set('ms_updates', $updates, 'cache');
  }
  if (is_array($updates)) {
    foreach ($updates as $module => $data) {
      $projects[$module] = $data;
    }
  }
}

// ======================================
// Administration Page:
// ======================================

/**
 * Implements hook_ms_core_overrides().
 */
function ms_core_ms_core_overrides() {
  return array(
    'ms_core' => array(
      'title' => t('MS Core'),
      'form' => 'ms_core_admin',
    ),
  );
}

/**
 * Admin Settings Form
 */
function ms_core_admin() {
  if (!variable_get('ms_core_public_key', '')) {
    $form['license'] = array(
      '#type' => 'fieldset',
      '#title' => t('License Keys'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['license']['ms_core_public_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Public Key'),
      '#description' => t("Enter the Public Key for this software as found in your 'My Software' area of your account on MoneyScripts.net"),
      '#required' => TRUE,
      '#default_value' => variable_get('ms_core_public_key', ''),
    );
    $form['license']['ms_core_private_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Private Key'),
      '#description' => t("Enter the Private Key for this software as found in your 'My Software' area of your account on MoneyScripts.net"),
      '#required' => TRUE,
      '#default_value' => variable_get('ms_core_private_key', ''),
    );

    return system_settings_form($form);
  }
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    );
  $form['main']['ms_core_debug_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log Module Messages in Database?'),
    '#default_value' => variable_get('ms_core_debug_mode', FALSE),
    '#description' => t('Module Messages will be found in the Logs/Reports section of your site, and are useful for debugging. The messages will not be shown to users. This mode is safe to use on a Live Site.'),
    '#required' => FALSE,
  );
  $form['main']['ms_core_default_currency'] = array(
    '#type' => 'select',
    '#title' => t('Default Currency'),
    '#options' => ms_core_get_currencies(),
    '#default_value' => variable_get('ms_core_default_currency', 'USD'),
    '#description' => t("Which currency to use for this site?"),
    '#required' => TRUE,
    '#ms_override' => TRUE,
  );

  $form['main']['ms_core_format_money_template'] = array(
    '#type' => 'textfield',
    '#title' => t('Format Money Template'),
    '#default_value' => variable_get('ms_core_format_money_template', '[sign][number].[decimal]'),
    '#description' => t("Customize the template used for formatting money strings.
      You can use the following tokens: [sign], [number], [decimal]"),
    '#required' => TRUE,
  );
  $form['main']['ms_core_auto_login'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically Login New Users?'),
    '#default_value' => variable_get('ms_core_auto_login', FALSE),
    '#description' => t('Automatically Log Users In once they have paid?'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_core_thankyou_page_template'] = array(
    '#type' => 'textarea',
    '#title' => t('Thank-You Page Template'),
    '#default_value' => variable_get('ms_core_thankyou_page_template',
"<p>Thank you for your purchase, [user]! Your payment has been received and your order details are below:</p>
<br />
<p>Order # [orderId]</p>
<p>Order Status: [orderStatus]</p>
<p>Payment: [paymentAmount] - [paymentDate]</p>
<p>Payment Method: [gatewayName]</p>
<br />
<p>Please print a copy of this page for your records.</p>
"),
    '#description' => t('Customize the text shown on the Thank-You page.
    You may use the Order, User and Payment tokens listed below.'),
    '#required' => FALSE,
  );
  $form['main']['ms_core_thankyou_page_template_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['main']['ms_core_thankyou_page_template_token_help']['help'] = array(
    '#value' => theme('token_help', array('ms_core_order', 'ms_core_payment', 'user')),
  );
  $form['main']['ms_core_thankyou_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Thank-You Page URI'),
    '#default_value' => variable_get('ms_core_thankyou_path', ''),
    '#description' => t('If you would rather redirect the user to a custom Thank-You page,
    then enter the relative path of the page here.
    Leave blank to use the default Thank-You page and template above.'),
    '#required' => FALSE,
    '#ms_override' => TRUE,
  );
  $form['main']['ms_core_order_number_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Order Number Display'),
    '#options' => array('sequential' => t('Sequential'), 'random' => t('Random')),
    '#default_value' => variable_get('ms_core_order_number_mode', 'sequential'),
    '#description' => t('Choose whether you want to show the sequential order number or the random (6 digit alphanumeric) order key.'),
    '#required' => FALSE,
  );

  $form['user'] = array(
    '#type' => 'fieldset',
    '#title' => t('User settings'),
  );
  $form['user']['ms_core_send_registration_mail'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send the default drupal account creation email?'),
    '#default_value' => variable_get('ms_core_send_registration_mail', TRUE),
  );

  $form['cart'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cart settings'),
  );
  $form['cart']['ms_cart_add_item_msg'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display an update message when an item is added to the cart through an add to cart form.'),
    '#default_value' => variable_get('ms_cart_add_item_msg', TRUE),
  );
  $form['cart']['ms_core_continue_shopping_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Continue Shopping Path'),
    '#description' => t('Specify the drupal path to take the user when they click the Continue Shopping button.'),
    '#default_value' => variable_get('ms_core_continue_shopping_path', ''),
    '#size' => 16,
  );
  $form['cart']['ms_minimum_subtotal'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum order subtotal'),
    '#description' => t('Optionally specify a minimum allowed subtotal for a cart to proceed to checkout.'),
    '#default_value' => variable_get('ms_minimum_subtotal', 0),
    '#size' => 16,
  );

  $form['cart']['anonymous'] = array(
    '#type' => 'fieldset',
    '#title' => t('Anonymous cart duration'),
    '#description' => t('Set the length of time products remain in the cart for customers who <strong>have not</strong> logged in.'),
  );
  $form['cart']['anonymous']['ms_cart_anon_duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#options' => drupal_map_assoc(range(1, 60)),
    '#default_value' => variable_get('ms_cart_anon_duration', '4'),
    '#prefix' => '<div style="float: left; margin-right: 1em;">',
    '#suffix' => '</div>',
  );
  $form['cart']['anonymous']['ms_cart_anon_unit'] = array(
    '#type' => 'select',
    '#title' => t('Unit of time'),
    '#options' => array(
      'minutes' => t('Minute(s)'),
      'hours' => t('Hour(s)'),
      'days' => t('Day(s)'),
      'weeks' => t('Week(s)'),
      'years' => t('Year(s)'),
    ),
    '#default_value' => variable_get('ms_cart_anon_unit', 'hours'),
    '#prefix' => '<div style="float: left; margin-right: 1em;">',
    '#suffix' => '</div>',
  );

  $form['cart']['authenticated'] = array(
    '#type' => 'fieldset',
    '#title' => t('Authenticated cart duration'),
    '#description' => t('Set the length of time products remain in the cart for customers who <strong>have</strong> logged in.'),
  );
  $form['cart']['authenticated']['ms_cart_auth_duration'] = array(
    '#type' => 'select',
    '#title' => t('Duration'),
    '#options' => drupal_map_assoc(range(1, 24)),
    '#default_value' => variable_get('ms_cart_auth_duration', '1'),
    '#prefix' => '<div style="float: left; margin-right: 1em;">',
    '#suffix' => '</div>',
  );
  $form['cart']['authenticated']['ms_cart_auth_unit'] = array(
    '#type' => 'select',
    '#title' => t('Unit of time'),
    '#options' => array(
      'hours' => t('Hour(s)'),
      'days' => t('Day(s)'),
      'weeks' => t('Week(s)'),
      'years' => t('Year(s)'),
    ),
    '#default_value' => variable_get('ms_cart_auth_unit', 'years'),
    '#prefix' => '<div style="float: left; margin-right: 1em;">',
    '#suffix' => '</div>',
  );

  $form['checkout'] = array(
    '#type' => 'fieldset',
    '#title' => t('Checkout Settings'),
  );
  $form['checkout']['ms_core_skip_checkout'] = array(
    '#type' => 'checkbox',
    '#title' => t('Skip Checkout Page?'),
    '#default_value' => variable_get('ms_core_skip_checkout', FALSE),
    '#description' => t('This will bypass the checkout page if only one Payment Gateway is active. If you are using modules which place items on the Checkout Page (like Coupons), they will override this setting.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_terms_service_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Terms of Service Node'),
    '#default_value' => variable_get('ms_core_terms_service_nid', ''),
    '#description' => t('Enter the node id of your terms of service page if you would like to show an "Agree" checkbox on the Checkout page.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_terms_service_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Terms of Service Agree Text'),
    '#default_value' => variable_get('ms_core_terms_service_text', t('I agree to the Terms of Service')),
    '#description' => t('Enter the agree text that you would like to use on the Checkout Form.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_terms_service_hide_for_authenticated'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide the Terms of Service checkbox for authenticated users?'),
    '#default_value' => variable_get('ms_core_terms_service_hide_for_authenticated', FALSE),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_terms_service_collapsed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Collapse Terms of Service?'),
    '#default_value' => variable_get('ms_core_terms_service_collapsed', FALSE),
    '#description' => t('This will cause the terms of service to be collapsed by default.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_show_profile_fields'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Profile Fields on Checkout Form?'),
    '#default_value' => variable_get('ms_core_show_profile_fields', FALSE),
    '#description' => t('This will show the Profile fields on the Checkout form for anonymous users who are making a purchase.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_order_title_recurring'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add Recurring Payment Terms to Order Titles?'),
    '#default_value' => variable_get('ms_core_order_title_recurring', FALSE),
    '#description' => t('This will add the recurring payment terms to the end of recurring product orders titles.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_checkout_email_verify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add Email Verification Field?'),
    '#default_value' => variable_get('ms_core_checkout_email_verify', FALSE),
    '#description' => t('This will add an email verification field under the email field.'),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_checkout_require_account_info'] = array(
    '#type' => 'select',
    '#title' => t('Additional Account Info'),
    '#options' => array(
      'optional' => t("Optional"),
      'hidden' => t("Hidden"),
      'required' => t("Required")
    ),
    '#default_value' => variable_get('ms_core_checkout_require_account_info', 'optional'),
    '#description' => t("Required means the username and password fields are
      required on the Checkout page if the user is anonymous. Optional means
      the user is only required to enter their email address, and they can then
      optionally enter a username or password in a collapsed fieldset. If they opt
      not to enter these, they will be gererated for them later on. Hidden simply
      hides the fields altogether."),
    '#required' => FALSE,
  );
  $form['checkout']['ms_core_mimic_register_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Mimic Register Form?'),
    '#default_value' => variable_get('ms_core_mimic_register_form', FALSE),
    '#description' => t('This will call hook_form_alter on the Checkout form for the user_register form ID for anonymous users who are making a purchase.'),
    '#required' => FALSE,
  );

  $form['checkout']['form_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Checkout Form Fields'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
  );

  // Show the Checkout Form Fields Admin UI
  if (module_exists('profile')) {
    $profile_fields = array(0 => 'N/A', 'account_mail' => t('Account Email'));
    $result = db_query('SELECT * FROM {profile_fields} ORDER BY weight');
    while ($row = db_fetch_object($result)) {
      $profile_fields[$row->name] = $row->title;
    }

    $form['checkout']['form_fields']['ms_core_profile_sync_back'] = array(
      '#type' => 'checkbox',
      '#title' => t('Populate User Profile Fields with Checkout Fields?'),
      '#default_value' => variable_get('ms_core_profile_sync_back', FALSE),
      '#description' => t('This will populate empty user profile fields with the
        data they entered in the checkout field, according to the links defined below.'),
      '#required' => FALSE,
    );
  }

  $fields = ms_core_get_checkout_form_fields();

  foreach ($fields as $field => $data) {
    $form['checkout']['form_fields'][$field] = array(
       '#type' => 'fieldset',
       '#title' => $data['name'],
       '#collapsed' => FALSE,
       '#collapsible' => FALSE,
      );
    $form['checkout']['form_fields'][$field]['ms_checkout_form_'. $field .'_title'] = array(
      '#title' => t('Title'),
      '#type' => 'textfield',
      '#default_value' => variable_get('ms_checkout_form_'. $field .'_title', $data['name']),
      '#size' => 32,
    );
    $form['checkout']['form_fields'][$field]['ms_checkout_form_'. $field .'_description'] = array(
      '#title' => t('Description'),
      '#type' => 'textfield',
      '#default_value' => variable_get('ms_checkout_form_'. $field .'_description', $data['description']),
      '#size' => 80,
    );
    $form['checkout']['form_fields'][$field]['ms_checkout_form_'. $field .'_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enabled?'),
      '#default_value' => variable_get('ms_checkout_form_'. $field .'_enabled', TRUE),
    );
    $form['checkout']['form_fields'][$field]['ms_checkout_form_'. $field .'_required'] = array(
      '#title' => t('Required?'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('ms_checkout_form_'. $field .'_required', $data['required']),
    );

    if (module_exists('profile')) {
      $form['checkout']['form_fields'][$field]['profile'] = array(
        '#type' => 'fieldset',
        '#title' => t('Profile Integration Settings'),
        '#description' => t('Select which Profile Fields will be used as the default values for this Checkout Form field.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['checkout']['form_fields'][$field]['profile']['ms_core_profile_'. $field] = array(
        '#type' => 'select',
        '#title' => t('Link Profile Field'),
        '#options' => $profile_fields,
        '#default_value' => variable_get('ms_core_profile_'. $field, $data['profile']),
      );
    }
  }

  $form['checkout']['form_fields']['ms_core_billing_show_month_numbers'] = array(
    '#title' => t('Show CC Month Numbers instead of full month names?'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('ms_core_billing_show_month_numbers', FALSE),
  );

  // Show an option for default country
  $form['checkout']['form_fields']['billing_country']['ms_core_default_country'] = array(
    '#type' => 'select',
    '#title' => t('Default Country'),
    '#options' => ms_core_get_countries('iso'),
    '#default_value' => variable_get('ms_core_default_country', 'US'),
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    );
  $form['advanced']['ms_core_charge_back_payments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Charge all Back Payments?'),
    '#default_value' => variable_get('ms_core_charge_back_payments', FALSE),
    '#description' => t('If this setting is checked, MS Core will attempt to charge all back payments if a customer updates their billing information and there are multiple missed payments. Otherwise, it will only attempt to charge 1 back-payment, and continue from there.'),
    '#required' => FALSE,
  );

  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Email Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_core_payment_reminder_days'] = array(
    '#type' => 'textfield',
    '#title' => t('Upcoming Payment Reminder Days'),
    '#description' => t('How many days before a payment should the user be notified? Set to 0 to disable the email reminder.'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_payment_reminder_days', '0'),
  );
  $form['email']['ms_core_upcoming_payment_mail_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Upcoming Payment Reminder Mail Subject'),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_upcoming_payment_mail_subject', t("Upcoming Payment")),
  );
  $form['email']['ms_core_upcoming_payment_mail_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Upcoming Payment Reminder Mail Body'),
    '#description' => t("Leave blank to not send an email."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_upcoming_payment_mail_body', t("This email is a reminder that you have a payment scheduled for [nextPaymentDate] for [nextPaymentAmount].

Sincerely,
Site Admin")),
  );
  $form['email']['ms_core_upcoming_payment_mail_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['email']['ms_core_upcoming_payment_mail_token_help']['help'] = array(
    '#value' => theme('token_help', array('global', 'ms_core_order', 'user')),
  );

  $form['invoice'] = array(
    '#type' => 'fieldset',
    '#title' => t('Invoice Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['invoice']['ms_core_pdfcrowd_support'] = array(
    '#type' => 'checkbox',
    '#title' => t("Save as PDF support by PDF Crowd"),
    '#default_value' => variable_get('ms_core_pdfcrowd_support', FALSE),
    '#description' => t("This will add a link in the Print view of an Invoice that
      will let the user save the invoice as a PDF through PDF Crowd."),
  );
  $form['invoice']['ms_core_invoice_header'] = array(
    '#type' => 'textarea',
    '#title' => t('Invoice Header'),
    '#description' => t("Enter the text that you wish to show on the invoice header.
      Suggestions include your business name, address, and contact info."),
    '#required' => FALSE,
    '#default_value' => variable_get('ms_core_invoice_header', "<h2>[site-name]</h2><h4>[site-slogan]</h4>"),
  );
  $form['invoice']['ms_core_invoice_header_token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['invoice']['ms_core_invoice_header_token_help']['help'] = array(
    '#value' => theme('token_help', array('global', 'ms_core_order', 'user')),
  );

  $form['license'] = array(
    '#type' => 'fieldset',
    '#title' => t('License Keys'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['license']['ms_core_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public Key'),
    '#description' => t("Enter the Public Key for this software as found in your 'My Software' area of your account on MoneyScripts.net"),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_core_public_key', ''),
  );
  $form['license']['ms_core_private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Key'),
    '#description' => t("Enter the Private Key for this software as found in your 'My Software' area of your account on MoneyScripts.net"),
    '#required' => TRUE,
    '#default_value' => variable_get('ms_core_private_key', ''),
  );

  return system_settings_form($form);
}

/**
 * Validate the admin settings form, rebuild cache if the keys were changed
 */
function ms_core_admin_validate($form, &$form_state) {
  if ($form_state['values']['ms_core_public_key'] != variable_get('ms_core_public_key', '')) {
    // Clear the cache for license and updates
    cache_clear_all('ms_updates', 'cache');
    cache_clear_all('ms_requirements', 'cache');
    cache_clear_all('ms_licenses', 'cache');

    // Check if the licens is valid
    variable_set('ms_core_public_key', $form_state['values']['ms_core_public_key']);
    variable_set('ms_core_private_key', $form_state['values']['ms_core_private_key']);
    $modules = module_invoke_all('ms_license');
    if (!ms_core_check_licenses($modules, TRUE)) {
      variable_del('ms_core_public_key');
      variable_del('ms_core_private_key');
      form_set_error('ms_core_public_key', t('The license key you entered is incorrect.'));
    }
  }
}

// ======================================
// Blocks:
// ======================================

/**
 * Implementation of hook_block()
 */
function ms_core_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();

      $blocks[0] = array(
        'info' => t('MS Shopping Cart'),
        'cache' => BLOCK_NO_CACHE,
      );

      return $blocks;
    case 'configure':
      $form = array();
      if ($delta == 0) {
        $form['ms_core_cart_block_help_text'] = array(
          '#type' => 'textfield',
          '#title' => t('Help Text'),
          '#size' => 60,
          '#description' => t('Specify some help text that will appear at the bottom of the Cart Block.'),
          '#default_value' => variable_get('ms_core_cart_block_help_text',  ''),
        );
        $form['ms_core_cart_block_empty_hide'] = array(
          '#type' => 'checkbox',
          '#title' => t('Hide block if cart is empty.'),
          '#default_value' => variable_get('ms_core_cart_block_empty_hide', FALSE),
        );
      }
      return $form;
    case 'save':
      if ($delta == 0) {
        variable_set('ms_core_cart_block_help_text', $edit['ms_core_cart_block_help_text']);
        variable_set('ms_core_cart_block_empty_hide', $edit['ms_core_cart_block_empty_hide']);
      }
      return;
    case 'view': default:
      switch ($delta) {
        case 0:
          $block['subject'] = t('Shopping Cart');
          $cart_contents = ms_core_get_cart_block_html(variable_get('ms_core_cart_block_empty_hide', FALSE), variable_get('ms_core_cart_block_help_text', ''));
          $block['content'] = $cart_contents;
          break;
      }
      return $block;
  }
}

// ======================================
// Pages:
// ======================================

/**
 * Show a list of the MoneyScripts pages
 */
function ms_core_main_page() {
  $menu = menu_get_item('admin/moneyscripts');
  $content = system_admin_menu_block($menu);

  $message = t('Various MoneyScripts modules can be found here. Click the links below to view and change the settings.');
  $output = $message . theme('admin_block_content', $content);

  return $output;
}

/**
 * Show the Billing Information for a user
 *
 * @param $user
 */
function ms_core_user_billing_info_page($account) {
  $html = array();

  drupal_alter('ms_core_billing_info', $html, $account);

  if (empty($html)) {
    return t('No Billing Information is Available.');
  }

  return drupal_render($html);
}

/**
 * Show a list of the installed Gateways
 */
function ms_core_gateways_page() {
  $menu = menu_get_item('admin/moneyscripts/gateways');
  $content = system_admin_menu_block($menu);

  $message = t('Various MoneyScripts Payment Gateway modules can be found here. Click the links below to view and change the settings. To enable more MoneyScripts Payment Gateways, go to the <a href="!url">module administration page</a>', array('!url' => url('admin/build/modules')));
  $output = $message . theme('admin_block_content', $content);

  return $output;
}

/**
 * Show a list of the Reports available
 */
function ms_core_reports_page() {
  $menu = menu_get_item('admin/moneyscripts/reports');
  $content = system_admin_menu_block($menu);

  $message = module_exists('ms_reports_2') ? t('Various reports generated by MoneyScripts modules can be found here. Click the links below to view the reports.') : t('Various reports generated by MoneyScripts modules can be found here. Click the links below to view the reports. To view core MoneyScripts statistics enable the <strong>MS Reports 2.0</strong> module on the <a href="!url">module administration page</a>', array('!url' => url('admin/build/modules')));
  $output = $message . theme('admin_block_content', $content);

  return $output;
}

/**
 * Set the Order ID in the SESSION
 */
function ms_core_set_order_session($order) {
  $_SESSION['ms_oid'] = $order->oid;
}

/**
 * Show the default thankyou page
 */
function ms_core_thankyou_page() {
  // Load some variables
  global $user;

  if (!$order = ms_core_order_load($_SESSION['ms_oid'])) {
    return t('There was an error loading the order. Please contact a site administrator.');
  }
  $account = user_load($order->uid);

  // Log this
  ms_core_log('ms_core', 'New Thank You Page has been received. Here are the details for it: Order: !data User: !vars',
    array('!data' => ms_core_print_r($order), '!vars' => ms_core_print_r($user)));

  // Log the User In?
  if (!$user->uid) {
    if (variable_get('ms_core_auto_login', FALSE)) {
      if ($order->uid) {
        // Make sure the user isn't blocked or pending admin approval
        if ($account->status == 1) {
          $user = $account;
        }
        else {
          ms_core_log_error('ms_core', 'The user @user could not be automatically logged in because their account is not yet active.
            You will need to change the !user_settings so that admin approval is not required.',
            array('@user' => $account->name, '!user_settings' => l('User Settings', 'admin/config/people/accounts')));
        }
      }
    }
  }

  // Set the messages in the order
  ms_core_show_order_messages($order);

  // Invoke the thankyou page hook
  module_invoke_all('ms_thankyou', $order);

  // Redirect to the order specific thank-you page if set
  foreach ($order->products as $product) {
    if (!empty($product->data['thankyou_path'])) {
      drupal_goto($product->data['thankyou_path']);
    }
  }

  // Redirect to the Thankyou Page if set
  if ($path = ms_core_variable_get('ms_core_thankyou_path', '', $order)) {
    // Redirect to the thank-you page specified in the settings for MS Core
    drupal_goto($path);
  }

  // Otherwise, print the default thank-you page content
  $content = variable_get('ms_core_thankyou_page_template',
"<p>Thank you for your purchase, [user]! Your payment has been received and your order details are below:</p>
<br />
<p>Order # [orderId]</p>
<p>Order Status: [orderStatus]</p>
<p>Payment: [paymentAmount] - [paymentDate]</p>
<p>Payment Method: [gatewayName]</p>
<br />
<p>Please print a copy of this page for your records.</p>
");
  $payment = ms_core_get_last_payment($order);

  // Replace the Tokens
  $content = token_replace($content, 'ms_core_order', $order);
  $content = token_replace($content, 'user', $account);
  $content = token_replace($content, 'ms_core_payment', $payment);

  return $content;
}

/**
 * Displays the messages associated with this order
 */
function ms_core_show_order_messages($order) {
  foreach ($order->products as $product) {
    if (isset($product->data['messages']) AND is_array($product->data['messages'])) {
      foreach ($product->data['messages'] as $message) {
        drupal_set_message($message);
      }
    }
  }
}

/**
 * List the Order Details
 */
function ms_core_view_order_details($order_key) {
  global $user;
  if ($order = ms_core_order_load_by_key($order_key)) {
    // Add the CSS
    drupal_add_css(drupal_get_path('module', 'ms_core') .'/ms_core.css');
    $account = user_load(array('uid' => $order->uid));
    $headers = array();
    $attr = array('id' => 'ms-core-order-details-table');
    $actions = array();
    if ($cancel_url = ms_core_get_cancel_url($order)) {
      $actions[] = l(t('Cancel Recurring Payments'), $cancel_url,
        array('attributes' => array('target' => '_blank'), 'query' => drupal_get_destination()));
    }
    if ($billing_url = ms_core_get_billing_url($order)) {
      $actions[] = l(t('Change Billing'), $billing_url,
        array('query' => drupal_get_destination()));
    }
    if ($order->status == 'checkout' AND $user->uid == $order->uid) {
      $actions[] = l(t('Checkout'), 'ms/resume-checkout/'. $order->order_key);
      $actions[] = l(t('Delete'), 'user/'. $user->uid .'/order-history/delete/'. $order->order_key);
    }
    $rows = array(
      array('data' => array(t('Order') .' #', $order->order_number), 'class' => 'ms_order_oid'),
      array('data' => array(t('User'), l($account->name, 'user/'. $account->uid)), 'class' => 'ms_order_user'),
      array('data' => array(t('Created'), format_date($order->created)), 'class' => 'ms_order_created'),
      array('data' => array(t('Total'), ms_core_format_money($order->total, $order->currency)), 'class' => 'ms_order_total'),
      array('data' => array(t('Next Payment'), ms_core_get_next_payment_string($order)), 'class' => 'ms_order_created'),
      array('data' => array(t('Status'), ms_core_get_order_status($order->status)), 'class' => 'ms_order_status'),
      array('data' => array(t('Actions'), implode($actions, ' | ')), 'class' => 'ms_order_actions'),
      array('data' => array(array('data' => ms_core_get_order_details_table($order), 'colspan' => 2)), 'class' => 'ms_order_details'),
      array('data' => array(t('Order Type'), ms_core_get_order_type($order)), 'class' => 'ms_order_type'),
      array('data' => array(array('data' => ms_core_get_order_payments_table($order), 'colspan' => 2)), 'class' => 'ms_order_payments_row'),
      array('data' => array(array('data' => ms_core_get_order_customer_information_table($order), 'colspan' => 2)), 'class' => 'ms_order_address_row'),
      array('data' => array(array('data' => ms_core_get_order_history_table($order), 'colspan' => 2)), 'class' => 'ms_order_history_row'),
    );

    // Output the table
    $output .= theme('table', $headers, $rows, $attr);
    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Show the order history in the user account
 */
function ms_core_history($account) {
  global $user;
  $output = t("View your Order History Here") ."<br />";
  $headers = array(
    array('data' => t('Order #'), 'class' => 'ms_user_history_oid_header'),
    array('data' => t('Created'), 'class' => 'ms_user_history_created_header'),
    array('data' => t('Products'), 'class' => 'ms_user_history_products_header'),
    array('data' => t('Status'), 'class' => 'ms_user_history_status_header'),
    array('data' => t('Total'), 'class' => 'ms_user_history_total_header'),
    array('data' => t('Actions'), 'class' => 'ms_user_history_actions_header'),
    );
  $attr = array();
  $rows = array();
  $orders = ms_core_get_orders($account->uid);
  foreach ($orders as $order) {
    $actions = array();
    $actions[] = l(t('View Details'), 'user/'. $account->uid .'/order-history/view/'. $order->order_key);
    if ($order->status == 'checkout' AND $user->uid == $order->uid) {
      $actions[] = l(t('Checkout'), 'ms/resume-checkout/'. $order->order_key);
      $actions[] = l(t('Delete'), 'user/'. $user->uid .'/order-history/delete/'. $order->order_key);
    }
    $rows[] = array(
        array('data' => $order->order_number,  'class' => 'ms_user_history_oid'),
        array('data' => format_date($order->created), 'class' => 'ms_user_history_created'),
        array('data' => ms_core_list_products($order), 'class' => 'ms_user_history_products'),
        array('data' => ms_core_get_order_status($order->status), 'class' => 'ms_user_history_status'),
        array('data' => ms_core_format_money($order->total, $order->currency), 'class' => 'ms_user_history_total'),
        array('data' => implode($actions, ' | '), 'class' => 'ms_user_history_actions'),
      );
  }

  // Output the table
  $output .= theme('table', $headers, $rows, $attr);
  return $output;
}

// ======================================
// Checkout:
// ======================================

/**
 * Begin the checkout
 */
function ms_core_checkout() {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  drupal_goto('ms/checkout');
}

/**
 * Allow for resuming orders in checkout
 */
function ms_core_resume_checkout_page($order_key) {
  global $user;
  $order = ms_core_order_load_by_key($order_key);
  if ($user->uid AND $user->uid == $order->uid) {
    return ms_core_checkout_page($order->order_key);
  }
  else {
    drupal_access_denied();
  }
}

/*
 * Show the Choose Gateway Page
 */
function ms_core_checkout_page($order_key = '') {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  $is_cart = TRUE;
  if ($order = ms_core_order_load_by_key($order_key)) {
    $cart = $order;
    $is_cart = FALSE;
  }
  else {
    $cart = ms_core_get_cart();
  }

  // Trigger the rule
  if (module_exists('rules')) {
    rules_invoke_event('ms_core_event_cart_checkout', $cart);
  }

  // Set some defaults:
  if (!isset($cart->data['skip_registration'])) {
    $cart->data['skip_registration'] = FALSE;
  }
  if (!isset($cart->data['blocked_gateways'])) {
    $cart->data['blocked_gateways'] = array();
  }

  if (count($cart->products) > 0) {
    // Give other modules a chance to add steps to the checkout form
    // Invoke hook_ms_checkout_steps to get the steps
    $steps = module_invoke_all('ms_checkout_steps', $cart);

    if (!is_array($steps)) {
      $steps = array();
    }

    // Perform each step until they have all been done
    foreach ($steps as $step) {
      // Perform the step
      return drupal_get_form($step['form_id'], $cart);
    }

    $gateways = ms_core_get_payment_gateways($cart->order_type, $cart->data['blocked_gateways']);

    // Allow other modules to alter the gateways
    drupal_alter('ms_payment_gateway', $gateways, $cart);

    $fields = ms_core_get_checkout_fields($cart);

    // Bypass the Checkout Form?
    global $user;
    if (!count($fields) AND count($gateways) == 1 AND ($user->uid OR $cart->data['skip_registration']) AND variable_get('ms_core_skip_checkout', FALSE)) {
      // Save the order
      ms_core_cart_to_order();
      foreach ($gateways as $gateway) {
        drupal_goto($gateway['path']);
        break;
      }
    }

    // Add the Order Info Field
    $fields[] = array(
      'id' => 'ms_core_order_info',
      'type' => 'plain',
      'title' => t('Order items'),
      'html' => ms_core_get_order_details_table($cart, $is_cart),
      'weight' => 0,
    );
    $html = '';

    // Order the fields by weight
    usort($fields, "ms_core_sort_fields");
    $build_fields = array();

    foreach ($fields as $field) {
      $build_fields[$field['id']] = array(
        '#type' => 'fieldset',
        '#title' => $field['title'],
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      if ($field['type'] == 'form') {
        $build_fields[$field['id']][$field['id'] .'_html'] = array(
          '#value' => drupal_get_form($field['html']),
        );
      }
      else {
        $build_fields[$field['id']][$field['id'] .'_html'] = array(
          '#value' => $field['html'],
        );
      }
    }
    $html .= drupal_render($build_fields);
    $html .= drupal_get_form('ms_checkout_form', $cart);
    return $html;
  }
  else {
    return t('There are no products in your cart. Please add one or more products before checking out.');
  }
}

/*
 * The Checkout Form
 */
function ms_checkout_form($form_state, $order) {
  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  global $user;

  // Set a default setting if not set
  if (!isset($order->data['skip_registration'])) {
    $order->data['skip_registration'] = FALSE;
  }

  // Add the User Registration form
  if (!$user->uid AND !$order->data['skip_registration']) {
    ms_core_create_account_form($form);
    // Show the Profile Fields and other fields
    if (variable_get('ms_core_show_profile_fields', FALSE)) {
      $null = NULL;
      $extra = _user_forms($null, NULL, NULL, 'register');
      if ($extra) {
        $form = array_merge($form, $extra);
      }
    }
    if (variable_get('ms_core_mimic_register_form', FALSE)) {
      $form_state = NULL;
      drupal_prepare_form('user_register', $form, $form_state);
    }
  }
  if (!(variable_get('ms_core_terms_service_hide_for_authenticated', FALSE) AND $user->uid)
    AND variable_get('ms_core_terms_service_nid', '') AND $node = node_load(variable_get('ms_core_terms_service_nid', ''))) {
    $form['terms_of_service'] = array(
      '#type' => 'fieldset',
    );
    $node_view = node_view($node);
    $form['terms_of_service']['terms'] = array(
      '#type' => 'fieldset',
      '#collapsible' => variable_get('ms_core_terms_service_collapsed', FALSE),
      '#collapsed' => variable_get('ms_core_terms_service_collapsed', FALSE),
      '#title' => variable_get('ms_core_terms_service_collapsed', FALSE) ? $node->title : '',
    );
    $form['terms_of_service']['terms']['terms_of_service_text'] = array(
      '#type' => 'item',
      '#value' => $node_view,
    );
    $form['terms_of_service']['terms_of_service_agree'] = array(
      '#type' => 'checkbox',
      '#title' => variable_get('ms_core_terms_service_text', ''),
      '#return_value' => 1,
      '#required' => TRUE,
    );
  }
  if ($order->amount == 0 AND !$order->recurring_schedule['has_trial']) {
    // Put the Free Button here
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Complete Order'),
      '#validate' => array('ms_core_checkout_form_validate'),
      '#submit' => array('ms_core_checkout_form_free_submit'),
      '#weight' => 999,
    );
  }
  else {
    // Get the Payment Gateways
    $gateways = ms_core_get_payment_gateways($order->order_type, $order->data['blocked_gateways']);

    if ($gateways) {
      // Show a form to let the user select which gateway
      ms_core_choose_gateway_form($form, $gateways);
    }
    else {
      // There are no gateways installed
      $form['gateways'] = array(
        '#type' => 'fieldset',
        '#title' => t('Choose Payment Method'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $form['gateways']['gateways_html'] = array(
        '#value' => t('There are no payment gateways enabled.'),
      );
    }

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Continue'),
      '#validate' => array('ms_core_checkout_form_validate'),
      '#submit' => array('ms_core_checkout_form_submit'),
      '#weight' => 999,
    );
  }

  if (isset($order->oid)) {
    $form['oid'] = array(
      '#type' => 'value',
      '#value' => $order->oid,
    );
  }

  return $form;
}

/*
 * The Choose Gateway Form
 */
function ms_core_choose_gateway_form(&$form, $gateways) {
  foreach ($gateways as $gateway) {
    $gateway_options[$gateway['module']] = $gateway['description'];
  }

  if (is_array($gateway_options)) {
    if (count($gateway_options) > 1) {
      $form['gateways'] = array(
        '#type' => 'fieldset',
        '#title' => t('Choose Payment Method'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $form['gateways']['gateway'] = array(
        '#type' => 'radios',
        '#title' => t('Payment Method'),
        '#options' => $gateway_options,
        '#description' => t("Choose your Payment Method."),
        '#default_value' => key($gateway_options),
        '#required' => TRUE,
      );
    }
    else {
      $form['gateway'] = array(
        '#type' => 'value',
        '#value' => key($gateway_options),
        '#required' => TRUE,
      );
    }
  }
  else {
    $form['gateway'] = array(
      '#type' => 'html',
      '#value' => t('No Payment Gateways are enabled which are compatible with this order. Please check your settings.'),
      '#required' => TRUE,
    );
  }
}

/**
 * Form to List the files
 */
function ms_core_create_account_form(&$form) {
  $required = variable_get('ms_core_checkout_require_account_info', 'optional') == 'required';
  $form['information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Customer Information'),
    '#description' => t('Enter a valid email address for this order or !click to login with an existing account and return to checkout.',
      array('!click' => l(t('click here'), 'user/login', array('query' => drupal_get_destination())))),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  if (variable_get('ms_core_checkout_require_account_info', 'optional') != 'hidden') {
    $form['information']['info'] = array(
      '#type' => 'fieldset',
      '#title' => t('New Account Details'),
      '#description' => $required ? '' : t('<em>Optional</em>. New customers may supply custom account details.
    We will create these for you if no values are entered.'),
        '#weight' => 99,
        '#collapsible' => !$required,
        '#collapsed' => !$required,
    );
    $form['information']['email1'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail Address'),
      '#size' => 32,
      '#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'),
      '#required' => TRUE,
    );
    if (variable_get('ms_core_checkout_email_verify', TRUE)) {
      $form['information']['email2'] = array(
        '#type' => 'textfield',
        '#title' => t('Confirm E-mail Address'),
        '#size' => 32,
        '#description' => t('Please re-enter your e-mail address.'),
        '#required' => TRUE,
      );
    }
    $form['information']['info']['username'] = array(
      '#type' => 'textfield',
      '#title' => t('Username'),
      '#size' => 32,
      '#required' => $required,
    );
    $form['information']['info']['password1'] = array(
      '#type' => 'password',
      '#title' => t('Password'),
      '#size' => 32,
      '#required' => $required,
    );
    $form['information']['info']['password2'] = array(
      '#type' => 'password',
      '#title' => t('Confirm Password'),
      '#size' => 32,
      '#description' => t('Passwords must match to proceed'),
      '#required' => $required,
    );
  }

  return $form;
}

/**
 * Validate Function for the Choose Gateway Form
 */
function ms_core_checkout_form_validate($form, &$form_state) {
  $v = $form_state['values'];

  if ($v['email1']) {
    // Verify Email Address is real
    if (!valid_email_address($v['email1'])) {
      form_set_error('email1', t('Please enter a valid email address'));
    }
    if (variable_get('ms_core_checkout_email_verify', FALSE)) {
      // Verify Email Addresses Match
      if ($v['email1'] != $v['email2']) {
        form_set_error('email2', t('The email addresses do not match'));
      }
    }
    // Verify Email Address is not being used
    $email_account = user_load(array('mail' => $v['email1']));
    if ($email_account->uid) {
      form_set_error('email1', t('The email address you entered is already being used by an account on this site.
      Please !login to the account associated with this email address before proceeding.',
      array('!login' => l('log in', 'user/login', array('query' => drupal_get_destination())))
      ));
    }
    if (variable_get('ms_core_checkout_require_account_info', 'optional') != 'hidden') {
      // Verify Username is not being used
      $name_account = user_load(array('name' => $v['username']));
      if ($v['username'] AND $name_account->uid) {
        form_set_error('username', t('The username you specified is already in use. Please choose a different username before proceeding.'));
      }
      // Verify Passwords Match
      if ($v['password1'] != $v['password2']) {
        form_set_error('password2', t('The passwords do not match'));
      }
    }
  }
}

/**
 * Submit Function for the Choose Gateway Form
 */
function ms_core_checkout_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  global $user;

  $data = array(
    'register_form' => $v,
  );

  $_SESSION['ms_gateway'] = $v['gateway'];

  if (module_exists('rules')) {
    rules_invoke_event('ms_core_event_gateway_checkout');
  }

  if ($v['oid']) {
    $order = ms_core_order_load($v['oid']);
    $_SESSION['ms_oid'] = $order->oid;
  }
  else {
    // Save the order
    $order = ms_core_cart_to_order($data);
  }

  $gateway = ms_core_get_gateway($v['gateway']);

  // Redirect to the Gateway Payment Page
  drupal_goto($gateway['path']);
}

/**
 * Submit Function for the Free Checkout Form
 */
function ms_core_checkout_form_free_submit($form, &$form_state) {
  $v = $form_state['values'];
  global $user;

  $data = array(
    'register_form' => $v,
  );

  // Save the order
  $order = ms_core_cart_to_order($data);

  // Change recurring orders to non-recurring
  $order->order_type = 'cart';

  ms_core_order_save($order);

  $payment = ms_core_new_payment($order->oid, 'ms_core', 'cart');
  // Generate a Unique Transaction ID
  $payment->transaction = ms_core_new_transaction($order);
  $payment->currency = $order->currency;

  // Enter a payment for 0
  ms_core_enter_payment($payment, FALSE);

  // Redirect to the Gateway Payment Page
  drupal_goto('ms/thankyou');
}

/**
 * Generates a random transaction id
 * @param $object
 *   Some variables to use for seeding the id
 * @return
 *   A random transaction id
 */
function ms_core_new_transaction($object) {
  return drupal_get_token(serialize($object));
}

/**
 * Helper function to get the checkout field defaults
 */
function ms_core_get_checkout_form_fields($type = 'all') {
  if ($type == 'all' || $type == 'cc') {
    $fields['cc_first_name'] = array('name' => t('First name'), 'required' => TRUE, 'profile' => '',
      'type' => 'textfield', 'size' => 32, 'description' => t('Enter your first name as it appears on the card'));
    $fields['cc_last_name'] = array('name' => t('Last name'), 'required' => TRUE, 'profile' => '',
      'type' => 'textfield', 'size' => 32, 'description' => t('Enter your last name as it appears on the card'));
  }
  if ($type == 'all' || $type == 'billing') {
    $fields['billing_address1'] = array('name' => t('Street address 1'), 'required' => TRUE, 'profile' => '',
      'type' => 'textfield', 'size' => 80, 'description' => '');
    $fields['billing_address2'] = array('name' => t('Street address 2'), 'required' => FALSE, 'profile' => '',
      'type' => 'textfield', 'size' => 80, 'description' => '');
    $fields['billing_city'] = array('name' => t('City'), 'required' => TRUE, 'profile' => '',
      'type' => 'textfield', 'size' => 32, 'description' => '');
    $fields['billing_state'] = array('name' => t('State'), 'required' => FALSE, 'profile' => '',
      'type' => 'textfield', 'size' => 32, 'description' => t('Enter the two letter state code'));
    $fields['billing_country'] = array('name' => t('Country'), 'required' => TRUE, 'profile' => '',
      'type' => 'select', 'size' => 1, 'description' => '');
    $fields['billing_zip'] = array('name' => t('Zip code'), 'required' => TRUE, 'profile' => '',
      'type' => 'textfield', 'size' => 32, 'description' => '');
    $fields['billing_phone'] = array('name' => t('Phone number'), 'required' => FALSE, 'profile' => '',
      'type' => 'textfield', 'size' => 32, 'description' => '');
    $fields['billing_email'] = array('name' => t('Email address'), 'required' => TRUE, 'profile' => 'account_mail',
      'type' => 'textfield', 'size' => 32, 'description' => '');
  }

  return $fields;
}

/**
 * Implementation of hook_ms_order_assign_user
 */
function ms_core_ms_order_assign_user($type, $product, $order, $payment) {
  if ($order->data['register_form']['email1']) {
    // Check if an account should be created
    switch ($type) {
      case 'cart':
      case 'rec_signup':
        ms_core_log('ms_core', 'Assigning a user to an Order: <br />Order: !order <br />Payment: !payment',
            array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($payment)));

        // Register the User once they have paid
        // Create the user account
        $pass = ($order->data['register_form']['password1']) ? $order->data['register_form']['password1'] : user_password();
        $name = ($order->data['register_form']['username']) ? $order->data['register_form']['username'] : ms_core_create_username($order->data['register_form']['email1']);
        $roles = array();

        $account = user_save('', array_merge($order->data['register_form'], array(
          'name' => $name,
          'mail' => $order->data['register_form']['email1'],
          'init' => $order->data['register_form']['email1'],
          'pass' => $pass,
          'roles' => $roles,
          'status' => 1
          )));

        $account->password = $pass;
        //Send the Default Email
        if (variable_get('ms_core_send_registration_mail', TRUE)) {
          _user_mail_notify('register_no_approval_required', $account);
        }

        $order->uid = $account->uid;
        ms_core_order_save($order);
      break;

      case 'rec_payment':
        ms_core_log('ms_core', 'Waiting for Signup notification: Payment Type: !type<br />Product: !product <br />Payment: !payment',
            array(
              '!type' => $type,
              '!product' => ms_core_print_r($product),
              '!payment' => ms_core_print_r($payment)));
        for ($counter = 1; $counter <= 10; $counter += 1) {
          $order = ms_core_order_load($order->oid);
          if ($order->uid) {
            break;
          }
          sleep(5);
        }
      break;
    }
  }
}

/**
 * Create a Username from an email address
 */
function ms_core_create_username($mail) {
  preg_match("/^(.+)@.+\..+/", $mail, $matches);
  $name = $matches[1];
  $temp_name = $name;
  $count = 0;
  while (1) {
    $count += 1;
    $name_account = user_load(array('name' => $temp_name));
    if ($name_account->uid) {
      $temp_name = $name . $count;
    }
    else {
      break;
    }
  }

  return $temp_name;
}

// ======================================
// Functions:
// ======================================

/**
 * Helper function to log an error in the database
 *
 * @param $type
 *   The type of message
 * @param $message
 *   The message to log
 * @param $args
 *   Args for use in t()
 * @param $severity
 *   (Optional) Defaults to WATCHDOG_ERROR
 */
function ms_core_log_error($type, $message, $args = array(), $severity = WATCHDOG_ERROR, $link = NULL) {
  $trace = debug_backtrace();
  $file = isset($trace[1]['file']) ? $trace[1]['file'] : $trace[0]['file'];
  $line = isset($trace[1]['line']) ? $trace[1]['line'] : $trace[0]['line'];

  $location = "Logged at $file line $line";

  watchdog($type, $message . '<br />' . $location, $args, $severity, $link);
}

/**
 * Helper function to log a message in the database
 *
 * @param $type
 *   The type of message
 * @param $message
 *   The message to log
 * @param $args
 *   Args for use in t()
 * @param $always_log
 *   Optional, defaults to FALSE
 */
function ms_core_log($type, $message, $args = array(), $always_log = FALSE, $severity = WATCHDOG_NOTICE, $link = NULL) {
  $trace = debug_backtrace();
  $file = isset($trace[1]['file']) ? $trace[1]['file'] : $trace[0]['file'];
  $line = isset($trace[1]['line']) ? $trace[1]['line'] : $trace[0]['line'];

  $location = "Logged at $file line $line";

  if ($always_log OR variable_get('ms_core_debug_mode', FALSE)) {
    watchdog($type, $message . '<br />' . $location, $args, $severity, $link);
  }
}

/**
 * Helper function to view a var for debug purposes
 *
 * @param $var
 *   The variable to view
 */
function ms_core_debug($var, $set_message = TRUE) {
  if (variable_get('ms_core_debug_mode', FALSE)) {
    $trace = debug_backtrace();
    $file = isset($trace[1]['file']) ? $trace[1]['file'] : $trace[0]['file'];
    $line = isset($trace[1]['line']) ? $trace[1]['line'] : $trace[0]['line'];

    $message = ms_core_print_r($var) .'<br /> '. "Logged at $file line $line";

    if ($set_message) {
      if (function_exists('dpm')) {
        dpm($var);
      }
      else {
        drupal_set_message($message);
      }
    }

    watchdog('debug', $message, array(), WATCHDOG_DEBUG);
  }
}

/**
 * Helper function to print_r a variable
 *
 * @param $var
 *   The variable to print_r
 * @return string
 *   The print_r'd variable
 */
function ms_core_print_r($var) {
  return '<pre>'. print_r($var, TRUE) .'</pre>';
}

/**
 * Uses a web service to get an exchange rate between two currencies
 *
 * @param $from
 *   The currency to get the rate from, ex: USD
 * @param $to
 *   The currency to get the rate to, ex: EUR
 * @return float
 *   Returns the exchange rate as a float
 */
function ms_core_get_currency_exchange_rate($from, $to) {
  // Attempt to fetch from cache first
  if ($cache = cache_get('ms_core_currency_rate_'. $from .'_'. $to, 'cache')) {
    // Attempt to fetch new data if it is available and is more than 24 hours old
    if (strtotime("+24 hours", $cache->created) < time()) {
      $message = array(
        'FromCurrency' => $from,
        'ToCurrency' => $to,
      );
      $response = drupal_http_request('http://www.webservicex.net/CurrencyConvertor.asmx/ConversionRate?'. http_build_query($message, FALSE, '&'));

      if ($response->code == '200') {
        // Set the cache
        $rate = floatval(trim(strip_tags($response->data)));
        cache_set('ms_core_currency_rate_'. $from .'_'. $to, $rate, 'cache', CACHE_PERMANENT);
        return $rate;
      }
    }

    return $cache->data;
  }
  else {
    // Attempt to fetch new data for the first time
    $message = array(
      'FromCurrency' => $from,
      'ToCurrency' => $to,
    );
    $response = drupal_http_request('http://www.webservicex.net/CurrencyConvertor.asmx/ConversionRate?'. http_build_query($message, FALSE, '&'));

    if ($response->code == '200') {
      // Set the cache
      $rate = floatval(trim(strip_tags($response->data)));
      cache_set('ms_core_currency_rate_'. $from .'_'. $to, $rate, 'cache', CACHE_PERMANENT);
      return $rate;
    }
    else {
      ms_core_log_error('ms_core', 'There was an error getting the Exchange Rates. Details: !vars',
        array('!vars' => ms_core_print_r($response)));
      return FALSE;
    }
  }
}

/**
 * Helper function to convert from one currency to another
 *
 * @param $from
 *   The old currency
 * @param $to
 *   The new currency
 * @param $amount
 *   The amount in the old currency
 * @return float
 *   The amount in the new currency
 */
function ms_core_convert_currency($from, $to, $amount) {
  if ($rate = ms_core_get_currency_exchange_rate($from, $to)) {
    return round($amount * $rate, 2);
  }
  else {
    return FALSE;
  }
}

/**
 * Get the order details table
 *
 * @param object $order
 *    The Order to get the Details for
 *
 * @return
 *    A themed table displaying all of the details of an order
 */
function ms_core_get_order_details_table($order, $cart = FALSE) {
  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'ms_core') .'/ms_core.css');

  if (count($order->products)) {
    $headers = array(t('Item'), array('data' => t('Price'), 'class' => 'ms_price'));
    $rows = array();

    // Show the Order Items
    ms_core_get_order_items_html($rows, $order, $cart);

    // Show the Subtotal
    $rows[] = array(
      'data' => array(
        'item' => array(
          'data' => t('Subtotal') .': '. ms_core_get_order_subtotal_html($order),
          'colspan' => 2,
          ),
        ),
      'class' => 'ms_subtotal',
      );

    // Show the Adjustments
    ms_core_get_adjustments_html($rows, $order);

    // Show the Total
    $rows[] = array(
      'data' => array(
        'item' => array(
          'data' => t('Total') .': '. ms_core_get_order_total_html($order),
          'header' => TRUE,
          'colspan' => 2,
          ),
        ),
      'class' => 'ms_total',
      );

    return theme('table', $headers, $rows, array('class' => 'ms_order_items', 'id' => 'ms-core-order-items-table'));
  }

  else { // There are no products in the cart
    return t('There are currently no products in your shopping cart.');
  }
}

/**
 * Get the order payments table
 *
 * @param object $order
 *    The Order to get the Payments for
 *
 * @return
 *    A themed table displaying all of the payments of an order
 */
function ms_core_get_order_payments_table($order) {
  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'ms_core') .'/ms_core.css');

  if (count($order->payments)) {
    $headers = array(
      array('data' => t('Date'), 'class' => 'ms_payments_date'),
      array('data' => t('Type'), 'class' => 'ms_payments_type'),
      array('data' => t('Transaction ID'), 'class' => 'ms_payments_txn'),
      array('data' => t('Amount'), 'class' => 'ms_payments_amount'),
    );
    $rows = array();

    foreach ($order->payments as $payment) {
      $rows[] = array(
        format_date($payment->created),
        ms_core_get_payment_type($payment->type),
        $payment->transaction,
        ms_core_format_money($payment->amount, $payment->currency)
      );
    }

    // Show the next payment if it is recurring
    if ($order->order_type == 'recurring') {
      if ($order AND $recurring_schedule = ms_core_load_recurring_schedule($order->oid) AND $recurring_schedule->status == 'active' AND $recurring_schedule->next_payment > REQUEST_TIME) {
        $rows[] = array(
          format_date($recurring_schedule->next_payment),
          t('Next Payment'),
          '',
          ms_core_format_money($recurring_schedule->main_amount, $order->currency)
        );
      }
    }

    return theme('table', $headers, $rows, array('class' => 'ms_order_table', 'id' => 'ms-core-order-history-table'), t('Payments'));
  }

  else { // There are no products in the cart
    return t('There are currently no payments associated with this order.');
  }
}

/**
 * Gets the order customer information table
 * @param object $order
 *    The Order to get the customer information for
 *
 * @return
 *    A themed table displaying all of the customer information of an order
 */
function ms_core_get_order_customer_information_table($order) {
  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'ms_core') . '/ms_core.css');

  $headers = array();

  $rows = array(
    array('data' => array(t('Name'), $order->first_name .' '. $order->last_name), 'class' => 'ms_order_address_name'),
    array('data' => array(t('Street'), $order->billing_address['street']), 'class' => 'ms_order_address_street'),
    array('data' => array(t('City'), $order->billing_address['city']), 'class' => 'ms_order_address_city'),
    array('data' => array(t('State'), $order->billing_address['state']), 'class' => 'ms_order_address_state'),
    array('data' => array(t('Zip'), $order->billing_address['zip']), 'class' => 'ms_order_address_zip'),
    array('data' => array(t('Country'), $order->billing_address['country']), 'class' => 'ms_order_address_country'),
    array('data' => array(t('Phone'), $order->billing_address['phone']), 'class' => 'ms_order_address_phone'),
    array('data' => array(t('Email'), $order->email_address), 'class' => 'ms_order_email_address'),
  );

  return theme('table', $headers, $rows, array('class' => 'ms_order_table', 'id' => 'ms-core-order-history-table'), t('Customer Information'));
}

/**
 * Get the order history table
 *
 * @param object $order
 *    The Order to get the History for
 *
 * @return
 *    A themed table displaying all of the history of an order
 */
function ms_core_get_order_history_table($order) {
  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'ms_core') .'/ms_core.css');

  $admin = user_access('administer moneyscripts orders');

  if (count($order->history)) {
    $headers = array(
      array('data' => t('Date'), 'class' => 'ms_history_date'),
      array('data' => t('Message'), 'class' => 'ms_history_message'),
    );
    $rows = array();

    foreach ($order->history as $item) {
      if ($item->hidden AND $admin) {
        $rows[] = array(format_date($item->created), $item->message);
      }
      elseif (!$item->hidden) {
        $rows[] = array(format_date($item->created), $item->message);
      }
    }

    return theme('table', $headers, $rows, array('class' => 'ms_order_table', 'id' => 'ms-core-order-history-table'), t('History'));
  }

  else { // There are no products in the cart
    return t('There are currently no history items associated with this order.');
  }
}

/**
 * Implementation of hook_user
 * Used to move a cart from an anonymous session to a user's session if they login
 */
function ms_core_user($op, &$edit, &$user, $category = NULL) {
  switch ($op) {
    case 'load':
      // Fall through if this a new user load prior to checkout.
      if (request_uri() != '/user/register?destination=ms/checkout' || $user->uid == 0) {
        break;
      }
    case 'login':
      // Add items from an anonymous cart to a user's permanent cart on login.
      // Update the cart so the ID is switched from the session to user ID.
      if (isset($_SESSION['ms_cart_id'])) {
        db_query("UPDATE {ms_cart_products} SET cart_id = %d WHERE cart_id = '%s'", $user->uid, $_SESSION['ms_cart_id']);
        db_query("UPDATE {ms_cart_adjustments} SET cart_id = %d WHERE cart_id = '%s'", $user->uid, $_SESSION['ms_cart_id']);
      }
      break;
  }
}

/**
 * Return the HTMl to use for the Adjustments Field
 *
 * @param object $order
 *    The order to get the HTML of the Adjustments for
 *
 * @return
 *    An HTML String of the adjustments for an order
 */
function ms_core_get_adjustments_html(&$rows, $order) {
  $price = ms_core_get_order_products_total($order);
  foreach ($order->adjustments as $adjustment) {
    // Only show the adjustments that don't have product associations
    if (empty($adjustment->product_id)) {
      $value = ms_core_get_adjusted_price($adjustment, $price);

      $adjustment_value = ms_core_get_adjustment_text($order, $adjustment, $value);

      $price += $value;

      $rows[] = array(
        'item' => array(
          'data' => $adjustment->display,
          'class' => 'ms_adjustment_display',
        ),
        'price' => array(
          'data' => $adjustment_value,
          'class' => 'ms_adjustment_value',
        ),
      );
    }
  }
}

/**
 * Generates the adjustment text for an order
 */
function ms_core_get_adjustment_text($order, $adjustment, $value) {
  $main_price = ms_core_get_order_products_total($order, FALSE);
  if ($order->order_type == 'recurring') {
    $recurring_schedule = $order->recurring_schedule;
    $recurring = TRUE;
    // If it has a trial period, do something else
    if ($recurring_schedule['has_trial']) {
      $main_value = ms_core_get_adjusted_price($adjustment, $main_price);
      $recurring_schedule['trial_amount'] = $value;
      $recurring_schedule['main_amount'] = $main_value;
      if ($main_value <= 0) {
        $recurring_schedule['has_trial'] = FALSE;
        $recurring = FALSE;
      }
      $main_price += $main_value;
    }
    else {
      $recurring_schedule['main_amount'] = $value;
    }

    if ($recurring_schedule['main_amount'] == $recurring_schedule['trial_amount']
       AND $recurring_schedule['main_length'] == $recurring_schedule['trial_length']) {
      $adjustment_value = ms_core_format_money($recurring_schedule['main_amount'], $order->currency);
    }
    else {
      $adjustment_value = ms_core_get_recurring_string($recurring_schedule, $recurring);
    }
  }
  else {
    $adjustment_value = ms_core_format_money($value, $order->currency);
  }

  return $adjustment_value;
}

/**
 * Return the HTMl to use for the Order Items Field
 *
 * @param object $order
 *    The order object to get the HTML for the items of
 *
 * @return
 *    An HTML string listing the items for the order
 */
function ms_core_get_order_items_html(&$rows, $order, $cart = FALSE) {
  $price = ms_core_get_order_products_total($order);

  foreach ($order->products as $prod_num => $product) {
    $remove_button = '';
    if ($cart) {
      $remove_button = "<span class='ms_cart_item_remove ms_cart_left'>"
        ."<a href='". url('ms/cart/remove/'. $prod_num) ."'><img src='". base_path() . drupal_get_path('module', 'ms_core') .'/images/trash_can.png' ."' /></a>"
        ."</span>";
    }
    // Add the data to the schedule so that the currency can be overridden
    $product->recurring_schedule['data'] = $order->data;
    if ($order->order_type == 'recurring') {
      $price = ms_core_get_recurring_string($product->recurring_schedule, TRUE);
    }
    else {
      $price = ms_core_format_money(ms_core_get_product_display_price($product), $order->currency);
    }

    $item_name = $remove_button . $product->name;

    // Add the quantity widget if the product is quantifiable
    if ($cart AND isset($product->data['allow_multiple']) AND $product->data['allow_multiple']) {
      $item_name .= drupal_get_form('ms_cart_qty_widget_form', $order->cart_id, $product);

      drupal_add_js(drupal_get_path('module', 'ms_core') . '/js/qty_widget.js');
    }

    $rows[] = array(
      'item' => array('data' => $item_name),
      'price' => array(
        'data' => $price,
        'class' => 'ms_price',
      ),
    );

    // Add the product specific adjustments here
    $product_total = ms_core_get_product_display_price($product);
    foreach ($order->adjustments as $adjustment) {
      if (!empty($adjustment->product_id) AND (($cart AND $adjustment->product_id == $product->cart_product_id) OR (!$cart AND $adjustment->product_id == $product->order_product_id))) {
        $value = ms_core_get_adjusted_price($adjustment, $product_total);
        $product_total += $value;

        $adjustment_value = ms_core_get_adjustment_text($order, $adjustment, $value);

        $rows[] = array(
          'item' => array(
            'data' => $adjustment->display,
            'class' => 'ms_adjustment_display',
          ),
          'price' => array(
            'data' => $adjustment_value,
            'class' => 'ms_adjustment_value',
          ),
        );
      }
    }
  }
}

/**
 * Builds a form to show a quantity widget
 */
function ms_cart_qty_widget_form(&$form_state, $cid, $product) {
  $form['qty'] = array(
    '#title' => t("Quantity"),
    '#type' => 'textfield',
    '#default_value' => $product->qty,
    '#size' => '2',
  );
  $form['cid'] = array(
    '#type' => 'value',
    '#value' => $cid,
  );
  $form['qty_product_number'] = array(
    '#type' => 'value',
    '#value' => $product->cart_product_id,
  );
  $form['qty_dec'] = array(
    '#type' => 'button',
    '#value' => '-',
    '#attributes' => array(
      'class' => array('qty_dec'),
    ),
  );
  $form['qty_inc'] = array(
    '#type' => 'button',
    '#value' => '+',
    '#attributes' => array(
      'class' => array('qty_inc'),
    ),
  );
  $form['qty_update'] = array(
    '#type' => 'submit',
    '#value' => t("Update"),
  );
  return $form;
}

/**
 * Validates the product quantity
 */
function ms_cart_qty_widget_form_validate($form, &$form_state) {
  $qty = (int) $form_state['values']['qty'];
  if ($qty <=0) {
    form_set_error('qty', t("The quantity must be greater than 0."));
  }
}

/**
 * Saves the product quantity
 */
function ms_cart_qty_widget_form_submit($form, &$form_state) {
  // Save the quantity for the product
  $result = db_query("UPDATE {ms_cart_products} SET qty = %d WHERE cart_id = '%s' AND cart_product_id = %d",
    (int) $form_state['values']['qty'], $form_state['values']['cid'], $form_state['values']['qty_product_number']);
}

/**
 * Get the Display Price for an order
 *
 * @param object $product
 *    The Recurring Order to get the Modify URL for
 *
 * @return
 *    The price to show in the cart and other places
 */
function ms_core_get_product_display_price($product) {
  if (!empty($product->recurring_schedule['trial_length'])) {
      $price = $product->recurring_schedule['trial_amount'];
    }
    else {
      $price = $product->amount * $product->qty;
    }
  return $price;
}

/**
 * Return an Adjusted Price based on the adjustment
 *
 * @param object $adjustment
 *    The object to use to adjust the price
 * @param float $price
 *    The price before the adjustment
 *
 * @return
 *    True or False depending on which one is bigger
 */
function ms_core_get_adjusted_price($adjustment, $price) {
  switch ($adjustment->type) {
    case 'percentage': return round($price * ($adjustment->value/100), 2);
    case 'fixed': return $adjustment->value;
    default: return $adjustment->value;
  }
}

/**
 * Calculate the final price with adjustments
 *
 * @param order $object
 * @param $final
 *   (Optional) Price after taxes? Defaults to TRUE
 *
 * @return
 *    The final price with adjustments
 */
function ms_core_get_final_price($order, $final = TRUE) {
  $price = ms_core_get_order_products_total($order, TRUE, $final);

  if (is_array($order->adjustments)) {
    foreach ($order->adjustments as $adjustment) {
      if (empty($adjustment->product_id)) {
        if ($final OR $adjustment->weight < 1) {
          $value = ms_core_get_adjusted_price($adjustment, $price);
          $price += $value;
        }
      }
    }
  }

  // If the amount is negative, just set it to 0
  if ($price < 0) {
    $price = 0;
  }

  return round($price, 2);
}

/**
 * Calculate the final price with adjustments
 *
 * @param order $object
 *
 * @return
 *    The final price with adjustments
 */
function ms_core_get_product_adjusted_price($price, $adjustments, $scope = 'all', $count = 1) {
  if (is_array($adjustments)) {
    foreach ($adjustments as $adjustment) {
      if ($scope == 'all' OR $adjustment->scope == $scope) {
        // If the order has multiple products and has a fixed adjustment, the adjustment should be divided evenly among the products
        if ($adjustment->type == 'fixed') {
          $adjustment->value = $adjustment->value / $count;
        }

        $value = ms_core_get_adjusted_price($adjustment, $price);
        $price += $value;
      }
    }
  }
  return round($price, 2);
}

/**
 * Calculate the order total from payments
 *
 * @param order $object
 *
 * @return
 *    The order total
 */
function ms_core_get_order_total($order) {
  $price = 0;
  foreach ($order->payments as $payment) {
    // Only add the amount if the payment was successful
    switch ($payment->type) {
      case 'rec_payment':
      case 'rec_signup':
      case 'cart':
        $price += $payment->amount;
        break;
    }
  }

  return round($price, 2);
}

/**
 * Calculate the Total of the products for an order
 *
 * @param object $order
 *    The order object to get total for
 *
 * @return
 *    The total of all the products in that order
 */
function ms_core_get_order_products_total($order, $trial = TRUE, $final = TRUE) {
  switch ($order->order_type) {
    case 'recurring': // If Order is Recurring, return the amount for one period
      $price = 0;

      if (isset($order->products) AND is_array($order->products)) {
        foreach ($order->products as $product) {
          if ($trial AND $product->recurring_schedule['trial_length']) {
            $product_total = $product->recurring_schedule['trial_amount'];
            foreach ($order->adjustments as $adjustment) {
              if (!empty($adjustment->product_id) AND ((!empty($product->cart_product_id) AND $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) AND $adjustment->product_id == $product->order_product_id))) {
                if ($final OR $adjusment->weight < 1) {
                  $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
                }
              }
            }

            $price += $product_total;
          }
          else {
            $product_total = ($product->recurring_schedule['main_amount']) ? $product->recurring_schedule['main_amount'] : $product->amount;

            foreach ($order->adjustments as $adjustment) {
              if (!empty($adjustment->product_id) AND ((!empty($product->cart_product_id) AND $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) AND $adjustment->product_id == $product->order_product_id))) {
                if ($final OR $adjusment->weight < 1) {
                  $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
                }
              }
            }

            $price += $product_total;
          }
        }
      }

      return $price;
      break;

    case 'cart': // If Order is Cart, return a sum of all the amounts for the products
      $price = 0;

      if (isset($order->products) AND is_array($order->products)) {
        foreach ($order->products as $product) {
          $product_total = $product->amount * $product->qty;

          foreach ($order->adjustments as $adjustment) {
            if (!empty($adjustment->product_id) AND ((!empty($product->cart_product_id) AND $adjustment->product_id == $product->cart_product_id) OR (!empty($product->order_product_id) AND $adjustment->product_id == $product->order_product_id))) {
              if ($final OR $adjusment->weight < 1) {
                $product_total += ms_core_get_adjusted_price($adjustment, $product_total);
              }
            }
          }

          $price += $product_total;
        }
      }

      return $price;
      break;
  }
}

/**
 * Return the fields by calling hook_ms_checkout_fields
 *
 * @param object $order
 *    The order object to get the checkout fields for
 *
 * @return
 *    An associative array of fields to use on the checkout page
 */
function ms_core_get_checkout_fields($order) {
  $fields = array();

  // Invoke hook_ms_checkout_fields to get the fields
  $fields = module_invoke_all('ms_checkout_fields', $order);

  if (!is_array($fields)) {
    $fields = array();
  }

  return $fields;
}

/**
 * Return the fields by calling hook_ms_cart_fields
 *
 * @param object $order
 *    The order object to get the checkout fields for
 *
 * @return
 *    An associative array of fields to use on the cart page
 */
function ms_core_get_cart_fields($cart) {
  $fields = array();

  // Invoke hook_ms_checkout_fields to get the fields
  $fields = module_invoke_all('ms_cart_fields', $cart);

  // Order the fields by weight
  usort($fields, "ms_core_sort_fields");

  if (!is_array($fields)) {
    $fields = array();
  }

  return $fields;
}

/**
 * Helper Function to sort an associative array by weight
 *
 * @param array $a
 *    The first array
 * @param array $b
 *    The second array
 * @param string $key
 *    The key to sort by, defaults to 'weight'
 *
 * @return
 *    True or False depending on which one is bigger
 */
function ms_core_sort_fields($a, $b, $key = 'weight') {
    if ($a[$key] == $b[$key]) {
      return 0;
    }
    return ($a[$key] < $b[$key]) ? -1 : 1;
}

/**
 * Add or update an adjusment for an order
 *
 * @param object $adjustment
 *    The adjustment object
 * @param object $order
 *    The order object to add the adjustment for
 *
 */
function ms_core_add_order_adjustment($order, $adjustment, $single = FALSE) {
  if ($single) {
    $result = db_query("DELETE FROM {ms_order_adjustments} WHERE oid=%d AND id='%s'", $order->oid, $adjustment->id);
  }
  $result = db_query("INSERT INTO {ms_order_adjustments} (oid, id, product_id, type, scope, display, value, weight, data)
    VALUES (%d, '%s', %d, '%s', '%s', '%s', '%s', %d, '%s')", $order->oid, $adjustment->id,
      isset($adjustment->product_id) ? $adjustment->product_id : NULL, $adjustment->type,
      $adjustment->scope, $adjustment->display, $adjustment->value, $adjustment->weight, serialize($adjustment->data));
  return ms_core_order_load($order->oid);
}

/**
 * Add or update an adjusment for an cart
 *
 * @param object $adjustment
 *    The adjustment object
 */
function ms_core_add_cart_adjustment($adjustment, $single = FALSE) {
  $cart = ms_core_get_cart();
  if ($single) {
    $result = db_query("DELETE FROM {ms_cart_adjustments} WHERE cart_id='%s' AND id='%s'", $cart->cart_id, $adjustment->id);
  }
  $result = db_query("INSERT INTO {ms_cart_adjustments} (cart_id, id, product_id, type, scope, display, value, weight, data)
    VALUES ('%s', '%s', %d, '%s', '%s', '%s', '%s', %d, '%s')", $cart->cart_id, $adjustment->id,
      isset($adjustment->product_id) ? $adjustment->product_id : NULL, $adjustment->type,
      $adjustment->scope, $adjustment->display, $adjustment->value, $adjustment->weight, serialize($adjustment->data));
}

/**
 * Remove an Adjustment from an order
 *
 * @param object $adjustment
 *    The adjustment object
 * @param object $order
 *    The order object to remove the adjustment from
 *
 */
function ms_core_remove_order_adjustment($adjustment, $order) {
  $result = db_query("DELETE FROM {ms_order_adjustments} WHERE oid=%d AND id=%d", $order->oid, $adjustment->id);
}

/**
 * Remove all Adjustments from an order
 *
 * @param object $order
 *    The order object to remove the adjustment from
 *
 */
function ms_core_remove_order_adjustments($order) {
  $result = db_query("DELETE FROM {ms_order_adjustments} WHERE oid=%d", $order->oid);
}

/**
 * Return an array of payment gateways that can be used
 *
 * @param string $type
 *    The type of order, can be 'recurring' or 'cart'
 *
 * @return
 *    An associative array of gateways
 */
function ms_core_get_payment_gateways($type = 'all', $block_gateways = array()) {
  $type = strtolower($type);
  $gateways = array();
  $gateways_raw = array();

  $cart = ms_core_get_cart();
  $gateways_raw = module_invoke_all('ms_payment_gateway', $cart);

  foreach ($gateways_raw as $gateway) {
    if (!empty($block_gateways)) {
      // Don't add the gateway if it is specified as blocked
      if (in_array($gateway['module'], $block_gateways)) {
        continue;
      }
      if ($type == 'all') {
        $gateways[$gateway['module']] = $gateway;
      }
      elseif ($gateway[$type]) {
        $gateways[$gateway['module']] = $gateway;
      }
    }
    else {
      if ($type == 'all') {
        $gateways[$gateway['module']] = $gateway;
      }
      elseif ($gateway[$type] AND $gateway['active']) {
        $gateways[$gateway['module']] = $gateway;
      }
    }
  }

  return $gateways;
}

/**
 * Return an array of payment gateways that can be used in a select list
 *
 * @param string $type
 *    The type of order, can be 'recurring' or 'cart'
 *
 * @return
 *    An associative array of gateways
 */
function ms_core_get_payment_gateways_list($type = 'all', $requires = FALSE) {
  $type = strtolower($type);
  $gateways = array();
  $gateways_raw = ms_core_get_payment_gateways($type);
  foreach ($gateways_raw as $gateway) {
    $gateways[$gateway['module']] = $gateway['name'];
    if ($requires AND isset($gateway['requires'])) {
      $gateways[$gateway['module']] .= ' (' . $gateway['requires'] . ')';
    }
  }

  return $gateways;
}

/**
 * Get the Gateway Name
 *
 * @param $module
 *
 * @return
 *    Return the Name of the gateway
 */
function ms_core_get_gateway_name($module) {
  $gateway = ms_core_get_gateway($module);
  if ($gateway['name']) {
    return $gateway['name'];
  }
  else {
    return t('None');
  }
}

/**
 * Get the Cancel URL for a Recurring Order
 *
 * @param object $order
 *    The Recurring Order to get the Cancellation URL for
 *
 * @return
 *    Return the URL for Cancellation for the correct Gateway, or FALSE if it is not applicable
 */
function ms_core_get_cancel_url($order) {
  if ($order->order_type == 'recurring' AND $gateway = ms_core_get_gateway($order->gateway)) {
    switch($order->status) {
      case 'active':
        if ($gateway['cancel_url']) {
          $cancel_url = $gateway['cancel_url']($order);
          foreach (module_implements('ms_core_cancel_url_override') as $module) {
            $function = $module .'_ms_core_cancel_url_override';
            $function($cancel_url);
          }
          return $cancel_url;
        }
        else {
          return FALSE;
        }
      break;

      default:
        return FALSE;
      break;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Get the Billing URL for a Recurring Order
 *
 * @param object $order
 *    The Recurring Order to get the Cancellation URL for
 *
 * @return
 *    Return the URL for Billing Changes for the correct Gateway, or FALSE if it is not applicable
 */
function ms_core_get_billing_url($order) {
  if ($order->order_type == 'recurring' AND $gateway = ms_core_get_gateway($order->gateway)) {
    if ($gateway['billing_url']) {
      return $gateway['billing_url']($order);
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Get the Modify URL for a Recurring Order
 *
 * @param object $order
 *    The Recurring Order to get the Modify URL for
 * @param array $recurring_schedule
 *    The New Recurring Schedule for the Order
 * @param int $id
 *    The id of the new product
 *
 * @return
 *    Return the URL for Modify for the correct Gateway, or FALSE if it is not applicable
 */
function ms_core_get_modify_url($order, $id) {
  if ($gateway = ms_core_get_gateway($order->gateway)) {
    if ($gateway['modify_url']) {
      return $gateway['modify_url']($order, $id);
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Get a product based on a module and id
 *
 * @param string $module
 *    The module that the product belongs to
 * @param int $id
 *    The id of the product
 *
 * @return
 *    Return the product object
 */
function ms_core_load_module_product($module, $id = 0) {
  $products = module_invoke_all('ms_product_load', $module, $id);
  if (isset($products[0])) {
    return $products[0];
  }
  return ms_core_get_module_product($module . '-' . $id);
}

/**
 * Get the Gateway Object that an Order is using
 *
 * @param object $order
 *    The Order to get the Gateway for
 *
 * @return
 *    Return the gateway object associated with the order or FALSE
 */
function ms_core_get_gateway($gateway) {
  $gateways = ms_core_get_payment_gateways();
  if (is_array($gateways[$gateway])) {
    return $gateways[$gateway];
  }
  else {
    return FALSE;
  }
}

/**
 * Return a list of payments used for displaying in an order HTML table
 *
 * @param array $payments
 *    Array of all the payments to list something
 *
 * @return
 *    Return a listing of all the payments in HTML
 */
function ms_core_list_order_payments($payments) {
  $output = '';
  $count = 0;

  foreach ($payments as $payment) {
    if ($count) {
      $output .= '<br />';
    }
    $payment_info = array();
    $payment_info[] = t('Amount: !amount', array('!amount' => ms_core_format_money($payment->amount, $payment->currency)));
    $payment_info[] = t('Type: !type', array('!type' => ms_core_get_payment_type($payment->type)));
    $payment_info[] = t('Date: !date', array('!date' => format_date($payment->created)));
    if ($payment->transaction) {
      $payment_info[] = t('Transaction ID: !id', array('!id' => $payment->transaction));
    }

    $output .= implode($payment_info, ' | ');
    $count += 1;
  }

  return $output;
}

/**
 * Get all the orders for a specific user
 *
 * @param object $uid
 *    The user ID to get the orders for
 *
 * @return
 *    Return an array of all the orders for the specific user
 */
function ms_core_get_orders($uid) {
  $result = db_query("SELECT oid FROM {ms_orders} WHERE uid=%d", $uid);

  $orders = array();

  while ($row = db_fetch_object($result)) {
    $orders[] = ms_core_order_load($row->oid);
  }

  return $orders;
}

/**
 * Generate an order title to use with Payment Gateways
 *
 * @param object $order
 *    The order to get the title for
 * @param int $length
 *
 * @return
 *    A string title for the order
 */
function ms_core_get_order_title($order, $length = '255', $modify = FALSE) {
  if ($modify) {
    $title = variable_get('site_name', '') .' - '. $order->data['new_product']->name;
  }
  elseif (count($order->products) == 1) {
    $title = variable_get('site_name', '') .' - '. $order->products[0]->name;
  }
  else {
    $title = variable_get('site_name', '') .' - '. t('Order') .' #'. $order->order_number;
  }

  if (variable_get('ms_core_order_title_recurring', TRUE) AND $order->order_type == 'recurring') {
    $title .= ' - '. ms_core_get_recurring_string($order->recurring_schedule, TRUE);
  }

  return substr($title, 0, $length);
}

/**
 * Initializes and returns a new product object
 *
 * @param $name
 *   The name of the product
 * @param $module
 *   The module that the product is associated with
 * @param $id
 *   The id of the project within the module
 * @param $amount
 *   (Optional) The amount to charge for the product. Default is 0.
 * @param $type
 *   (Optional) The type of product, 'cart' or 'recurring'. Defaults to 'cart'
 * @return $product
 *   A product object
 */
function ms_core_new_product($name, $module, $id, $amount = 0, $type = 'cart') {
  // Create a new object
  $product = new MsProduct();

  // Set the default members
  $product->type = $type;
  $product->name = $name;
  $product->module = $module;
  $product->amount = $amount;
  $product->id = $id;

  return $product;
}

/**
 * Initializes and returns a new payment object
 *
 * @param $oid
 *   The order id to associate the payment with
 * @param $gateway
 *   The payment gateway
 * @param $type
 *   The type of payment
 * @param $amount
 *   (Optional) The amount of the payment. Defaults to 0.
 * @param $currency
 *   (Optional) The currency of the payment. Defaults to site default.
 * @return $payment
 *   A new payment object
 */
function ms_core_new_payment($oid, $gateway, $type, $amount = 0, $currency = '') {
  // Create a new object
  $payment = new MsPayment();

  // Set the default members
  $payment->oid = $oid;
  $payment->gateway = $gateway;
  $payment->type = $type;
  $payment->amount = $amount;
  $payment->currency = ($currency) ? $currency : variable_get('ms_core_default_currency', 'USD');

  return $payment;
}

/**
 * Add a product to an order
 *
 * @param object $order
 *    The order to add the product to
 * @param array $product
 *    Associative array of the product
 *      name - Product Name
 *      amount - The Amount of the Product
 *      module - Associated Module
 *      id - Id of the product within that module
 */
function ms_core_add_order_product($order, $product, $single = FALSE) {
  // Set some defaults
  if (!isset($product->data)) {
    $product->data = array();
  }
  if (!isset($product->recurring_schedule)) {
    $product->recurring_schedule = array();
  }
  if (!isset($product->qty)) {
    $product->qty = 1;
  }

  // Update the Order Data to use the product data
  if (!empty($product->data)) {
    ms_core_add_data($order, $product->data);
  }

  if ($single) {
    $result = db_query("DELETE FROM {ms_order_products} WHERE oid=%d AND module='%s' AND id=%d", $order->oid, $product->module, $product->id);
  }

  // Make sure that if a recurring product is being added, to clear out other products
  if ($product->type == 'recurring') {
    $order->order_type = 'recurring';
    ms_core_order_save($order);
    $result = db_query("DELETE FROM {ms_order_products} WHERE oid=%d", $order->oid);
  }

  $product->oid = $order->oid;
  $product->save();
  return ms_core_order_load($order->oid);
}

/**
 * Remove a product from an order
 *
 * @param object $product
 *    The product object
 * @param object $order
 *    The order to remove the product from
 */
function ms_core_remove_order_product($product, $order) {
  $result = db_query("DELETE FROM {ms_order_products} WHERE oid=%d AND order_product_id=%d", $order->oid, $product->order_product_id);

  // Remove any adjustments that were dependant on this product
  db_query("DELETE FROM {ms_order_adjustments} WHERE oid=%d AND product_id=%d", $order->oid, $product->order_product_id);
}

/**
 * Add a product to a cart
 *
 * @param array $product
 *
 * @return MsProduct $product
 */
function ms_core_add_cart_product($product, $single = FALSE) {
  $cart = ms_core_get_cart();

  // Give other modules a chance to act on the product being added to the cart
  module_invoke_all('ms_cart_add', $cart, $product);
  drupal_alter('ms_cart_added_product', $product, $cart);

  // Make sure that only one product of this type is entered if single is true
  if ($single) {
    $result = db_query("DELETE FROM {ms_cart_products} WHERE cart_id='%s' AND module='%s' AND id=%d", $cart->cart_id, $product->module, $product->id);
  }

  // Make sure that the order is either cart OR recurring
  if ($cart->order_type != $product->type) {
    $result = db_query("DELETE FROM {ms_cart_products} WHERE cart_id='%s'", $cart->cart_id);
  }

  // Make sure that if a recurring product is being added, to clear out other products
  if ($product->type == 'recurring') {
    $result = db_query("DELETE FROM {ms_cart_products} WHERE cart_id='%s'", $cart->cart_id);
  }

  $product->cart_id = $cart->cart_id;
  $product->name = substr($product->name, 0, 127);
  $product->changed = time();

  drupal_write_record('ms_cart_products', $product);

  if (variable_get('ms_cart_add_item_msg', TRUE)) {
    drupal_set_message(t('Added %title to your !cart. !checkout', array(
        '%title' => $product->name,
        '!cart' => l('Cart', 'ms/cart'),
        '!checkout' => l('Checkout', 'ms/checkout'),
        )));
  }

  // Trigger the rule
  if (module_exists('rules')) {
    rules_invoke_event('ms_core_event_product_add_to_cart', $product, $cart);
  }

  // Give other modules a chance to act on the product being added to the cart
  module_invoke_all('ms_cart_added', $cart, $product);

  return $product;
}

/**
 * Add data to an order
 *
 * @param object $order
 *    The order to add the data to
 * @param array $data
 *    Associative array of the data
 *
 * @return
 *    Return the modified order object
 */
function ms_core_add_data($order, $data) {
  if (is_array($data)) {
    $new_data = array_merge($order->data, $data);
    $order->data = $new_data;
    ms_core_order_save($order);
  }
  return $order;
}

/**
 * Get the module for an order
 */
function ms_core_get_order_module($order) {
  if (is_array($order->products)) {
    foreach ($order->products as $product) {
      return $product->module;
    }
  }

  return FALSE;
}

/**
 * Set the Recurring Schedule for an order
 *
 * @param object $order
 *    The order to add the product to
 * @param array $recurring_schedule
 *    Associative array of the recurring schedule
 *      total_occurrences - How many times the payment will recur
 *      main_amount - The main recurring amount
 *      main_length - The main recurring length
 *      main_unit - The main recurring unit (Days, Weeks, Months, Years)
 *      trial_amount - The first trial recurring amount
 *      trial_length - The first trial recurring length
 *      trial_unit - The first trial recurring unit (Days, Weeks, Months, Years)
 *
 * @return
 *    Return the modified order object
 */
function ms_core_set_recurring_schedule($order, $recurring_schedule) {
  $order->recurring_schedule = $recurring_schedule;

  // Update into Database
  $result = db_query("UPDATE {ms_orders} SET recurring_schedule = '%s' WHERE oid=%d",
    serialize($order->recurring_schedule), $order->oid);

  return $order;
}

/**
 * Get the actions for an order
 */
function ms_core_get_order_actions($oid) {
  $order = ms_core_order_load($oid);

  $actions = array();

  $actions = module_invoke_all('ms_recurring_schedule_actions', $order);

  return $actions;
}

/**
 * Get a string for a date
 */
function ms_core_get_string_time($trial_length, $trial_unit) {
  switch ($trial_unit) {
    case 'H':
      $unit = ($trial_length > 1) ? 'hours' : 'hour';
      break;
    case 'D':
      $unit = ($trial_length > 1) ? 'days' : 'day';
      break;
    case 'W':
      $unit = ($trial_length > 1) ? 'weeks' : 'week';
      break;
    case 'M':
      $unit = ($trial_length > 1) ? 'months' : 'month';
      break;
    case 'Y':
      $unit = ($trial_length > 1) ? 'years' : 'year';
      break;
    default:
      $unit = $trial_unit;
      break;
  }
  return "+$trial_length $unit";
}

/**
 * Helper function to convert a table headers and rows to csv data and stores it in cache
 */
function ms_core_store_csv($headers, $rows, $id) {
  $csv_output = '';
  $csv_row = array();
  foreach ($headers as $index => $row) {
    $csv_row[$index] = '"' . str_replace('"', '""', strip_tags($row['data'])) . '"';
  }
  $csv_output .= implode(',', $csv_row) . "\n\n";
  foreach ($rows as $row) {
    $csv_row = array();
    foreach ($row['data'] as $index => $column) {
      $csv_row[$index] = '"' . str_replace('"', '""', strip_tags($column['data'])) . '"';
    }
    $csv_output .= implode(',', $csv_row) . "\n";
  }
  cache_set('ms_core_csv_' . $id, $csv_output, 'cache', time() + 86400);
}

/**
 * Page callback to download the csv
 */
function ms_core_csv_page($id) {
  if ($csv_data = cache_get('ms_core_csv_' . $id, 'cache')) {
    ob_end_clean();
    $http_headers = array(
      'Pragma' => 'no-cache',
      'Expires' => '0',
      'Cache-Control' => 'no-cache, must-revalidate',
      'Cache-Control' => 'private',
      'Content-Transfer-Encoding' => 'binary',
      'Content-Length' => strlen($csv_data->data),
      'Content-Disposition' => 'attachment; filename="' . $id . '-' . time() . '.csv"',
      'Content-type' => 'text/csv',
    );
    foreach ($http_headers as $key => $value) {
      $value = preg_replace('/\r?\n(?!\t| )/', '', $value);
      drupal_set_header($key .': '. $value);
    }

    print $csv_data->data;
    exit();
  }
  else {
    drupal_set_message(t("The CSV data could not be retreived.
      It's possible the data might have expired.
      Refresh the report page and try to retrieve the CSV file again."), 'error');
    drupal_goto('');
  }
}

/**
 * Get the products that are associated with a cart
 *
 * @param int $cid
 *    The cart id of the cart to get the products for
 *
 * @return
 *    An array of products for the cart
 */
function ms_core_get_cart_products($cid) {
  $result = db_query("SELECT * FROM {ms_cart_products} WHERE cart_id = '%s' ORDER BY cart_product_id", $cid);
  $products = array();
  while ($row = db_fetch_object($result)) {
    $product = new MsProduct();
    $product->initialize($row);
    $products[] = $product;
  }
  return $products;
}



/**
 * Get the products that are associated with an order
 *
 * @param int $oid
 *    The order id of the order to get the products for
 *
 * @return
 *    An array of products for the order
 */
function ms_core_get_order_products($oid) {
  $result = db_query("SELECT * FROM {ms_order_products} WHERE oid = '%s' ORDER BY order_product_id", $oid);
  $products = array();
  while ($row = db_fetch_object($result)) {
    $product = new MsProduct();
    if ($product->load($row->order_product_id)) {
      $products[] = $product;
    }
  }
  return $products;
}

/**
 * Get the adjustments that are associated with an order
 *
 * @param int $oid
 *    The order id of the order to get the adjustments for
 *
 * @return
 *    An array of adjustments for the order
 */
function ms_core_get_order_adjustments($oid) {
  $result = db_query("SELECT * FROM {ms_order_adjustments} WHERE oid = %d ORDER BY weight", $oid);
  $adjustments = array();
  while ($row = db_fetch_object($result)) {
    $adjustment = new MsAdjustment($row);
    $adjustments[] = $adjustment;
  }
  return $adjustments;
}

/**
 * Get the history items that are associated with an order
 *
 * @param int $oid
 *    The order id of the order to get the history for
 *
 * @return
 *    An array of history items for the order
 */
function ms_core_get_order_history($oid) {
  $items = array();
  if (db_table_exists('ms_core_order_history')) {
    $result = db_query("SELECT * FROM {ms_core_order_history} WHERE oid = %d ORDER BY created ASC", $oid);

    while ($item = db_fetch_object($result)) {
      $items[] = $item;
    }
  }

  return $items;
}

/**
 * Get the payments that are associated with an order
 *
 * @param int $oid
 *    The order id of the order to get the payments for
 *
 * @return
 *    An array of payments for the order
 */
function ms_core_get_order_payments($oid) {
  $payments = array();

  $result = db_query("SELECT * FROM {ms_payments} WHERE oid = %d ORDER BY created ASC", $oid);

  while ($row = db_fetch_object($result)) {
    $payment = new MsPayment();
    if ($payment->load($row->pid)) {
      $payments[] = $payment;
    }
  }

  return $payments;
}

/**
 * Loads a payment
 *
 * @param $pid
 *   The payment id
 * @return MsPayment
 */
function ms_core_load_payment($pid) {
  $payment = new MsPayment();

  if ($payment->load($pid)) {
    return $payment;
  }
  return FALSE;
}

/**
 * Loads a payment by transaction id
 *
 * @param $id
 *   The transaction id
 * @return MsPayment
 */
function ms_core_load_payment_by_transaction_id($id) {
  $result = db_query("SELECT pid FROM {ms_payments} WHERE transaction = '%s'", $id);

  while ($row = db_fetch_object($result)) {
    return ms_core_load_payment($row->pid);
  }

  return FALSE;
}

/**
 * Generates a unique transaction id
 *
 * @return
 *   The unique 10 digit transaction id
 */
function ms_core_generate_transaction_id($length = 10) {
  $id = ms_core_get_random_key($length);

  while (ms_core_load_payment_by_transaction_id($id)) {
    $id = ms_core_get_random_key($length);
  }

  return $id;
}

/**
 * Generates a unique recurring id
 *
 * @return
 *   The unique 10 digit recurring id
 */
function ms_core_generate_recurring_id($length = 10) {
  $id = ms_core_get_random_key($length);

  while (ms_core_order_load_by_rec_id($id)) {
    $id = ms_core_get_random_key($length);
  }

  return $id;
}

/**
 * Loads a product object
 *
 * @param $id
 *   The id of the product to load
 * @return MsProduct
 *   If successful, an MsProduct object is returned, otherwise FALSE.
 */
function ms_core_load_order_product($order_product_id) {
  $product = new MsProduct();

  if ($product->load($id)) {
    return $product;
  }

  return FALSE;
}

/**
 * Create a new order and return the order object
 *
 * @param string $type
 *    Can either be 'recurring' or 'cart'
 * @param int $uid
 *    The User ID associated with this order, 0 for anonymous user
 *
 * @return
 *    Return the modified order object
 */
function ms_core_order_new($type = 'cart', $uid = 0, $oid = NULL) {
  $order = new MsOrder();

  if ($uid > 0) {
    $account = user_load(array('uid' => $uid));
  }

  // Set the Order Variables
  $order->uid = $uid;
  $order->oid = $oid;
  $order->order_type = $type;

  $order->save();

  // Invoke ms_order_new to let other modules do things with the order when it is saved
  module_invoke_all('ms_order_new', $order);

  return $order;
}

/**
 * Load an order from the session
 *
 * @return
 *    Return the order object
 */
function ms_core_load_session_order() {
  if ($_SESSION['ms_oid']) {
    $order = ms_core_order_load($_SESSION['ms_oid']);
    return $order;
  }
  else {
    return FALSE;
  }
}

/**
 * Load an order from the recurring_id
 *
 * @return
 *    Return the order object
 */
function ms_core_order_load_by_rec_id($rid) {
  if ($rid) {
    $oid = db_result(db_query("SELECT oid FROM {ms_payments} WHERE recurring_id='%s'", $rid));
    return ms_core_order_load($oid);
  }
  return FALSE;
}

/**
 * Load an order from the unique_key key
 *
 * @return
 *    Return the order object
 */
function ms_core_order_load_unique($unique) {
  if ($unique) {
    $oid = db_result(db_query("SELECT oid FROM {ms_orders} WHERE unique_key='%s'", $unique));
    return ms_core_order_load($oid);
  }
  return FALSE;
}

/**
 * Alias to load an order by the key from the url
 */
function ms_core_order_key_load($key) {
  return ms_core_order_load_by_key($key);
}

/**
 * Returns the correct order number display
 *
 * @param $order
 *   The MsOrder object
 * @return
 *   The order id to show the user
 */
function ms_core_order_number($order) {
  if (variable_get('ms_core_order_number_mode', 'sequential') == 'sequential') {
    return $order->oid;
  }
  else {
    return $order->order_key;
  }
}

/**
 * Generates a unique random key
 *
 * @return
 *   The unique 6 digit order key
 */
function ms_core_generate_order_key() {
  $order_key = ms_core_get_random_key(6);

  while (ms_core_order_load_by_key($order_key)) {
    $order_key = ms_core_get_random_key(6);
  }

  return $order_key;
}

/**
 * Generates a random alphanumeric string
 *
 * @param $length
 *   The length of the string
 * @return
 *   Random alphanumeric string
 */
function ms_core_get_random_key($length) {
  $random= "";
  srand((double)microtime()*1000000);
  $letters = "ABCDEFGHJKLMNPQRSTUVWXYZ";
  $numbers = "123456789";

  for($i = 0; $i < $length; $i++) {
    if ($i%2) {
      $random .= substr($numbers, (rand()%(strlen($numbers))), 1);
    }
    else {
      $random .= substr($letters, (rand()%(strlen($letters))), 1);
    }
  }
  return $random;
}

/**
 * Loads an order by the key
 *
 * @param $order_key
 *   The key
 * @return
 *   MsOrder object or False
 */
function ms_core_order_load_by_key($order_key) {
  if ($order_key) {
    $oid = db_result(db_query("SELECT oid FROM {ms_orders} WHERE order_key='%s'", $order_key));
    return ms_core_order_load($oid);
  }
  return FALSE;
}

/**
 * Get the recurring_id for an order
 *
 * @return
 *    Return the recurring_id
 */
function ms_core_get_order_rec_id($oid) {
  return db_result(db_query("SELECT recurring_id FROM {ms_payments} WHERE oid=%d AND recurring_id != '' ORDER BY created DESC", $oid));
}

/**
 * Loads a lightweight version of an order object that just contains the order id and the data array
 */
function ms_core_order_load_data($oid) {
  $result = db_query("SELECT oid, data FROM {ms_orders} WHERE oid = %d", $oid);
  while ($order = db_fetch_object($result)) {
    $order->data = unserialize($order->data);
    return $order;
  }
}

/**
 * Load an order from the database
 *
 * @param int $oid
 *    The order id or blank to load the session's order
 *
 * @return
 *    Return the MsOrder object
 */
function ms_core_order_load($oid) {
  if (is_null($oid) || $oid < 1) {
    return FALSE;
  }

  $order = new MsOrder();

  if ($order->load($oid)) {
    // Invoke ms_order_save to let other modules do things with the order when it is loaded
    module_invoke_all('ms_order_load', $order);
    return $order;
  }
  else {
    ms_core_log_error('ms_core', 'Error loading an order: !oid', array('!oid' => $oid));
    return FALSE;
  }
}

/**
 * Delete Order Function
 */
function ms_core_order_delete($oid) {
  db_query("DELETE FROM {ms_orders} WHERE oid = %d", $oid);
  db_query("DELETE FROM {ms_payments} WHERE oid = %d", $oid);
  db_query("DELETE FROM {ms_core_payment_profiles} WHERE oid = %d", $oid);
}

/**
 * Save the order object
 *
 * @param object $order
 *    The order object to save
 *
 * @return
 *    Return the DB Result (boolean true) or FALSE
 */
function ms_core_order_save($order) {
  // Set the order amount
  $order->amount = ms_core_get_final_price($order);

  // Invoke ms_order_save to let other modules do things with the order before it is saved
  foreach (module_implements('ms_order_save') as $module) {
    $function = $module . '_ms_order_save';
    $order = call_user_func($function, $order);
  }

  // Load the old order object and see if the status has changed. If so, call hook_ms_order_status_change
  if ($old_order = ms_core_order_load($order->oid) AND $old_order->status != $order->status) {
    foreach (module_implements('ms_order_status_change') as $module) {
      $function = $module . '_ms_order_status_change';
      $order = call_user_func($function, $old_order->status, $order->status, $order);
    }
  }

  if (!is_a($order, 'MsOrder')) {
    ms_core_log_error('ms_core', 'Order is not an MsOrder object! Backtrace: !backtrace',
      array('!backtrace' => ms_core_print_r(debug_backtrace())));
  }

  return $order->save();
}

/**
 * Return the last payment
 *
 * @param object $order
 *    The order object to get the last payment for
 *
 * @return
 *    The last payment or FALSE if no payments
 */
function ms_core_get_last_payment($order, $non_zero = TRUE) {
  if (isset($order->payments) AND is_array($order->payments)) {
    $thepayment = $order->payments[0];
    foreach ($order->payments as $payment) {
      if (!$non_zero OR ($non_zero AND $payment->amount > 0)) {
        $thepayment = $payment;
      }
    }
    return $thepayment;
  }
  else {
    return FALSE;
  }
}

/**
 * Enter a payment for an order, then call the hook so that modules can act on the payment
 *
 * @param object $payment
 *    The payment object to add to the order
 *
 */
function ms_core_enter_payment($payment, $check = TRUE, $notify = TRUE, $insert = TRUE) {
  // Set some defaults
  $payment->created = ($payment->created) ? $payment->created : time();
  $payment->modified = ($payment->modified) ? $payment->modified : time();

  if ($insert) {
    // Save the Payment
    $payment->save();
  }

  // Load the order
  $order = ms_core_order_load($payment->oid);

  if ($payment->shipping_address['street']) {
    $order->shipping_address = $payment->shipping_address;
  }
  if ($payment->billing_address['street']) {
    $order->billing_address = $payment->billing_address;
  }

  if ($payment->first_name) {
    $order->first_name = $payment->first_name;
  }
  if ($payment->last_name) {
    $order->last_name = $payment->last_name;
  }

  // Set the gateway for the order
  $order->gateway = $payment->gateway;

  $order->currency = $payment->currency;

  ms_core_log('ms_core', 'A payment has been entered for an order. Here are the details: Order: !order Payment: !payment',
      array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($payment)));

  // Save the order
  ms_core_order_save($order);

  // Reload the order
  $order = ms_core_order_load($order->oid);

  // Make sure the payment is for the correct amount
  if ($check AND $order->secured) {
    $type = ms_core_valid_payment($order, $payment);
  }
  else {
    $type = $payment->type;
  }

  if ($type) {
    ms_core_set_order_status_from_payment($order, $payment);

    // Reload the order
    $order = ms_core_order_load($order->oid);

    switch ($type) {
      case 'cart':
        if ($payment->amount) {
          ms_core_add_history_item($order, 0, t('Payment logged: @amount',
            array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
        }
        break;

      case 'rec_signup':
        ms_core_create_recurring_schedule($order->oid, $order->gateway, ms_core_get_order_module($order), $order->recurring_schedule);
        if ($payment->amount) {
          ms_core_add_history_item($order, 0, t('Payment logged: @amount',
            array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
        }
      break;

      case 'rec_payment':
        ms_core_increment_recurring_schedule($order->oid);
        if ($payment->amount) {
          ms_core_add_history_item($order, 0, t('Payment logged: @amount',
            array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
        }
      break;

      case 'rec_cancel':
        // Mark the recurring schedule as cancelled, and adjust the next payment and expiration
        ms_core_cancel_recurring_schedule($order->oid);
      break;

      case 'failed':
        // Mark the recurring_schedule next_payment date in 3 days
        $recurring_schedule = ms_core_load_recurring_schedule($order->oid);
        db_query("UPDATE {ms_recurring_schedules} SET next_payment = %d, failed_payment = %d WHERE id = %d",
          array(strtotime('+3 days', $recurring_schedule->next_payment), $recurring_schedule->failed_payments + 1,
          $recurring_schedule->id));
        break;

      case 'rec_modify':
        $new_product = $order->data['new_product'];

        // See if this $new_product is an MsProduct object or not
        if (get_class($new_product) != 'MsProduct') {
          ms_core_log_error('ms_core', 'Expected an MsProduct object.');
          return FALSE;
        }

        // Replace the Old Product with the New Product
        $order = ms_core_add_order_product($order, $new_product, TRUE);
        $order = ms_core_set_recurring_schedule($order, $new_product->recurring_schedule);

        // Create a recurring schedule if one doesn't exist
        ms_core_create_recurring_schedule($order->oid, $order->gateway, ms_core_get_order_module($order), $order->recurring_schedule);

        // Change the recurring schedule
        $recurring_schedule_object = ms_core_load_recurring_schedule($order->oid);

        // Merge in the new terms
        $recurring_schedule = (object) array_merge((array) $recurring_schedule_object, $order->recurring_schedule);

        $last_payment = time();
        $recurring_schedule->status = 'active';
        $recurring_schedule->next_payment = ms_core_calculate_next_payment_date($order, $last_payment);
        $recurring_schedule->expiration = ms_core_calculate_expiration_date($order->recurring_schedule);
        $recurring_schedule->modified = time();

        ms_core_update_recurring_schedule($recurring_schedule);

        if ($payment->amount) {
          ms_core_add_history_item($order, 0, t('Payment logged: @amount',
            array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
        }
      break;

      case 'rec_eot':
        // Change the recurring schedule
        ms_core_change_recurring_schedule_status($order->oid, 'expiring');
      break;
    }

    // Reload the order
    $order = ms_core_order_load($order->oid);

    if ($notify) {
      // Assign a user to this order
      if (!$order->uid) {
        module_invoke_all('ms_order_assign_user', $type, $order->products[0], $order, $payment);
        $order = ms_core_order_load($order->oid);
      }

      // Invoke all ms_order_payment_total Hooks
      module_invoke_all('ms_order_payment_total', $type, $order, $payment);

      // Call the hook for each product
      foreach ($order->products as $product) {
        // Invoke all ms_order_payment Hooks
        module_invoke_all('ms_order_payment', $type, $product, $order, $payment);
      }
    }
  }
  else {
    ms_core_add_history_item($order, 0, t('Error logging payment: @amount',
      array('@amount' => ms_core_format_money($payment->amount, $order->currency))), TRUE);
    ms_core_log_error('ms_core', 'The payment could not be acted upon: !payment.',
      array('!payment' => ms_core_print_r($payment)));
  }
}

/**
 * Implements hook_ms_order_payment_total().
 */
function ms_core_ms_order_payment_total($type, $order, $payment) {
  // Trigger the rule
  if (module_exists('rules')) {
    $account = user_load($order->uid);
    rules_invoke_event('ms_core_event_order_payment_received', $account, $order, $payment);
  }
}

function ms_core_set_order_status_from_payment($order, $payment) {
  switch ($payment->type) {
    case 'rec_payment':
    case 'rec_signup':
    case 'rec_modify':
      ms_core_set_order_status($order, 'active');
    break;

    case 'rec_eot':
    case 'express_checkout':
    case 'cart':
      ms_core_set_order_status($order, 'completed');
    break;

    case 'rec_cancel':
      ms_core_set_order_status($order, 'cancelled');
    break;

    default:
      ms_core_set_order_status($order, 'pending');
    break;
  }
}

/**
 * Set an order's status
 */
function ms_core_set_order_status($order, $status) {
  $old_status = $order->status;
  $order->status = $status;

  $result = db_query("UPDATE {ms_orders} SET status = '%s' WHERE oid = %d", $status, $order->oid);

  // Call hook_ms_order_status_change
  if ($old_status != $status) {
    ms_core_add_history_item($order, 0, t('Status Changed to: @status',
      array('@status' => ms_core_get_order_status($status))), TRUE);
    foreach (module_implements('ms_order_status_change') as $module) {
      $function = $module . '_ms_order_status_change';
      $order = call_user_func($function, $old_status, $status, $order);
    }
  }
  return $result;
}

/**
 * Get an order's status for translation
 */
function ms_core_get_order_status($status) {
  switch ($status) {
    case 'completed':
      return t('Completed');
    case 'active':
      return t('Active');
    case 'cancelled':
      return t('Cancelled');
    case 'pending':
      return t('Pending Payment');
    case 'invoiced':
      return t('Invoiced');
    case 'checkout':
      return t('In Checkout');

    default:
      return $status;
  }
}

/**
 * Get an order's status for translation
 */
function ms_core_get_order_statuses() {
  return array(
    'completed' => t('Completed'),
    'active' => t('Active'),
    'cancelled' => t('Cancelled'),
    'pending' => t('Pending Payment'),
    'invoiced' => t('Invoiced'),
    'checkout' => t('In Checkout'),
    );
}

/**
 * Get an order's type for translation
 */
function ms_core_get_order_type($order) {
  switch ($order->order_type) {
    case 'recurring':
      return t('Recurring');
    break;

    case 'cart':
      return t('Cart');
    break;

    default:
      return $order->order_type;
    break;
  }
}

/**
 * Get an payment type string
 */
function ms_core_get_payment_type($type) {
  switch ($type) {
    case 'rec_payment': return t('Payment');
    case 'rec_signup': return t('Signup');
    case 'rec_cancel': return t('Cancellation');
    case 'rec_modify': return t('Modification');
    case 'refund': return t('Refund');
    case 'reversal': return t('Reversal');
    case 'rec_eot': return t('Completed');
    case 'cart': return t('Payment');
    case 'pending': return t('Pending');
    case 'failed': return t('Failed');
    default:
      return $type;
    break;
  }
}

/**
 * Get an payment type string
 */
function ms_core_get_payment_types($type = 'all') {
  switch ($type) {
    case 'recurring':
      return array(
        'rec_payment' => t('Recurring Payment'),
        'rec_signup' => t('Recurring Signup'),
        'rec_cancel' => t('Recurring Cancellation'),
        'rec_modify' => t('Recurring Modification'),
        'refund' => t('Recurring Refund'),
        'reversal' => t('Reversal'),
        'rec_eot' => t('Recurring End of Term'),
        'failed' => t('Failed'),
      );
    case 'cart':
      return array(
        'refund' => t('Refund'),
        'reversal' => t('Reversal'),
        'cart' => t('Cart Payment'),
        'pending' => t('Pending'),
        'failed' => t('Recurring Payment Failed'),
      );
  }
  return array(
    'rec_payment' => t('Recurring Payment'),
    'rec_signup' => t('Recurring Signup'),
    'rec_cancel' => t('Recurring Cancellation'),
    'rec_modify' => t('Recurring Modification'),
    'refund' => t('Refund'),
    'reversal' => t('Reversal'),
    'rec_eot' => t('Recurring End of Term'),
    'cart' => t('Cart Payment'),
    'pending' => t('Pending'),
    'failed' => t('Failed'),
  );
}

/**
 * Ensure that the payment was for the right amount
 */
function ms_core_valid_payment($order, $payment) {
  switch ($payment->type) {
    case 'rec_payment':
      if (ms_core_recurring_schedule_match($payment->recurring_schedule, $order->recurring_schedule)) {
        return 'rec_payment';
      }
      else {
        ms_core_log_error('ms_core', 'Error: Payment received for incorrect amount. Here are the defails: Order: !order Payment Details: !payment',
          array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($payment)));
        return FALSE;
      }
    break;

    case 'rec_signup':
      // Check if this is a modify from a non-recurring item
      if (isset($order->data['new_product']) AND $new_product = $order->data['new_product'] AND $new_product->id) {
        if (ms_core_recurring_schedule_match($payment->recurring_schedule, $new_product->recurring_schedule, FALSE)) {
          return 'rec_modify';
        }
        else {
          ms_core_log_error('ms_core', 'Error: Invalid Modification Attempt. Here are the defails: New Product: !order Payment Details: !payment',
            array('!order' => ms_core_print_r($new_product), '!payment' => ms_core_print_r($payment)));
          return FALSE;
        }
      }
      else {
        if (ms_core_recurring_schedule_match($payment->recurring_schedule, $order->recurring_schedule)) {
          return 'rec_signup';
        }
        else {
          ms_core_log_error('ms_core', 'Error: Payment received for incorrect amount. Here are the defails: Order: !order Payment Details: !payment',
            array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($payment)));
          return FALSE;
        }
      }
    break;

    case 'rec_eot':
      return 'rec_eot';
    break;

    case 'rec_cancel':
      return 'rec_cancel';
    break;

    case 'express_checkout':
      if ($payment->amount >= $order->amount) {
        return 'cart';
      }
      else {
        ms_core_log_error('ms_core', 'Error: Payment received for incorrect amount. Here are the defails: Order: !order Payment Details: !payment',
          array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($payment)));
        return FALSE;
      }
    break;

    case 'cart':
      if ($payment->amount >= $order->amount) {
        return 'cart';
      }
      else {
        ms_core_log_error('ms_core', 'Error: Payment received for incorrect amount. Here are the defails: Order: !order Payment Details: !payment',
          array('!order' => ms_core_print_r($order), '!payment' => ms_core_print_r($payment)));
        return FALSE;
      }
    break;

    case 'refund':
      return 'refund';
    break;

    case 'reversal':
      return 'reversal';
    break;

    case 'failed':
      return 'failed';
    break;

    case 'rec_modify':
      $new_product = $order->data['new_product'];
      if (ms_core_recurring_schedule_match($payment->recurring_schedule, $new_product->recurring_schedule, FALSE)) {
        return 'rec_modify';
      }
      else {
        ms_core_log_error('ms_core', 'Error: Invalid Modification Attempt. Here are the defails: New Product: !order Payment Details: !payment',
          array('!order' => ms_core_print_r($new_product), '!payment' => ms_core_print_r($payment)));
        return FALSE;
      }
    break;
  }
}

/**
 * Helper function to see if two recurring schedules match
 */
function ms_core_recurring_schedule_match($rs1, $rs2, $match_trial = TRUE) {
  if ((string) $rs1['main_amount'] != (string) $rs2['main_amount']) {
    return FALSE;
  }
  if ($rs1['main_unit'] != $rs2['main_unit']) {
    return FALSE;
  }
  if ($rs1['main_length'] != $rs2['main_length']) {
    return FALSE;
  }
  if ($match_trial) {
    if ($rs1['trial_length']) {
      if ((string) $rs1['trial_amount'] != (string) $rs2['trial_amount']) {
        return FALSE;
      }
      if ($rs1['trial_unit'] != $rs2['trial_unit']) {
        return FALSE;
      }
      if ($rs1['trial_length'] != $rs2['trial_length']) {
        return FALSE;
      }
    }
  }

  return TRUE;
}


/**
 * Gets the proper variable if it is overridden in the object.
 *
 * @param $name
 *   Name of the variable, as used in variable_get.
 * @param $default
 *   Default value if not set, as used in variable get.
 * @param $object
 *   (optional) An order or product object, which has a 'data' array property
 *   containing the override settings.
 *
 * @return
 *   The default variable if it isn't overridden, or the overridden variable if
 *   it is.
 */
function ms_core_variable_get($name, $default, $object = NULL) {
  if (isset($object->data['override_settings'][$name])) {
    return $object->data['override_settings'][$name];
  }

  return variable_get($name, $default);
}

/**
 * Returns the settings which are different than the default settings
 *
 * @param $form_state
 *   The $form_state containing $form_state['values']['override_settings']
 *
 * @return
 *   An associative array containing only the settings which were actually different from their defaults
 */
function ms_core_get_overridden_settings($override_settings) {
  $overrides = array();
  global $conf;

  if (!empty($override_settings) AND is_array($override_settings)) {
    foreach ($override_settings as $module => $settings) {
      foreach ($settings as $key => $value) {
        if (isset($conf[$key]) AND $value != variable_get($key, $conf[$key])) {
          $overrides[$key] = $value;
        }
      }
    }
  }

  return $overrides;
}

/**
 * Recursively extracts the override settings from a form
 *
 * @param $parent
 *   The form parent
 * @param &$overrides
 *   The override settings which have been found so far
 */
function ms_core_extract_override_settings($parent, &$overrides) {
  foreach (element_children($parent) as $child_name) {
    if (isset($parent[$child_name]['#ms_override']) AND $parent[$child_name]['#ms_override']
      AND ms_core_variable_isset($child_name)) {
      $overrides[$child_name] = $parent[$child_name];
    }
    ms_core_extract_override_settings($parent[$child_name], $overrides);
  }
}

/**
 * Checks if a variable has been set yet
 */
function ms_core_variable_isset($name) {
  $result = db_query("SELECT * FROM {variable} WHERE name = '%s'", array($name));

  while ($variable = db_fetch_object($result)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Get the form for the Product Override Settings to be used for per-product overrides
 *
 * @param $object
 *   The order or product object that contains the property data array of overriden settings
 *
 * @return
 *   The elements that should be displayed on the form to allow for overriding
 */
function ms_core_get_override_settings_form_elements(&$form, $object = NULL) {
  $override_settings = module_invoke_all('ms_core_overrides');
  $form['override_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Override Settings'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  if (is_array($override_settings) AND !empty($override_settings)) {
    foreach ($override_settings as $module => $info) {
      $override = FALSE;
      $t_form_state = array();
      $module_form = drupal_retrieve_form($info['form'], $t_form_state);

      $overrides = array();
      ms_core_extract_override_settings($module_form, $overrides);
      if (!empty($overrides)) {
        // Add a fieldset for the module
        $form['override_settings'][$module] = array(
          '#type' => 'fieldset',
          '#title' => t('!module Settings', array('!module' => $info['title'])),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );

        foreach ($overrides as $key => $element) {
          $form['override_settings'][$module][$key] = $element;

          // Check if this value is overridden or not
          if (isset($object->data['override_settings'][$key])) {
            $form['override_settings']['#collapsed'] = FALSE;
            $form['override_settings'][$module]['#collapsed'] = FALSE;
            $form['override_settings'][$module][$key]['#default_value'] = $object->data['override_settings'][$key];
            $form['override_settings'][$module][$key]['#required'] = FALSE; // Make all override settings not be required
            $form['override_settings'][$module][$key]['#prefix'] = "<div style='margin:2px;padding: 2px;border: 2px solid #ffaa66;'>
              <div style='color: #ff6666; font-weight: bold;'>" . t('- OVERRIDDEN - (Default: %default)', array(
                '%default' => $form['override_settings'][$module][$key]['#default_value'])) . "</div>";
            $form['override_settings'][$module][$key]['#suffix'] = "</div>";
          }
        }
      }
    }
  }
}

/**
 * Helper Function to return the currencies
 *
 * @return
 *    An associative array of currencies
 */
function ms_core_get_currencies() {
  return array(
    'USD' => t('US Dollar'),
    'AUD' => t('Australian Dollar'),
    'CAD' => t('Canadian Dollar'),
    'CHF' => t('Swiss Franc'),
    'CZK' => t('Czech Koruna'),
    'DKK' => t('Danish Krone'),
    'EUR' => t('Euro'),
    'GBP' => t('Pound Sterling'),
    'HKD' => t('Hong Kong Dollar'),
    'HUF' => t('Hungarian Forint'),
    'ILS' => t('Israeli New Shekel'),
    'INR' => t('Indian Rupee'),
    'JPY' => t('Japanese Yen'),
    'MXN' => t('Mexican Peso'),
    'NOK' => t('Norwegian Krone'),
    'NZD' => t('New Zealand Dollar'),
    'PLN' => t('Polish Zloty'),
    'SEK' => t('Swedish Krona'),
    'SGD' => t('Singapore Dollar'),
    'BRL' => t('Brazilian Real'),
    'MYR' => t('Malaysian Ringgits'),
    'PHP' => t('Philippine Pesos'),
    'TWD' => t('Taiwan New Dollars'),
    'THB' => t('Thai Baht'),
    'ZAR' => t('South African rand'),
  );
}

/**
 * Formats a money string based on currency and amount
 *
 * @param float $amount
 *    The amount to format
 * @param string $currency_code
 *    The currency to use for the formatting
 *
 * @return
 *    The formatted string for the money
 */
function ms_core_format_money($amount = 0, $currency_code = NULL, $context = 'HTML') {
  $pos_sign = '';
  if (!$currency_code) {
    $currency_code = variable_get('ms_core_default_currency', 'USD');
  }
  if ($amount < 0) {
    $pos_sign = '- ';
    $amount = abs($amount);
  }
  $f_amount = number_format(floatval($amount), 2);

  $amount_string = explode('.', $f_amount);

  $whole = $amount_string[0];
  $decimal = $amount_string[1];

  switch ($currency_code) {
    case 'USD': $sign = '$'; break;
    case 'AUD': $sign = '$'; break;
    case 'CAD': $sign = '$'; break;
    case 'CHF': $sign = 'francs'; break;
    case 'CZK': $sign = 'Kc'; break;
    case 'DKK': $sign = 'kr'; break;
    case 'EUR': $sign = ($context == 'HTML') ? '€' : htmlentities('€', ENT_COMPAT, 'ISO8859-15'); break;
    case 'GBP': $sign = ($context == 'HTML') ? '£' : htmlentities('£', null, 'utf-8'); break;
    case 'HKD': $sign = '$'; break;
    case 'HUF': $sign = 'forint'; break;
    case 'ILS': $sign = 'new shekalim'; break;
    case 'INR': $sign = 'INR'; break;
    case 'JPY': $sign = '¥'; break;
    case 'MXN': $sign = '$'; break;
    case 'NOK': $sign = 'kr'; break;
    case 'NZD': $sign = '$'; break;
    case 'PLN': $sign = 'zl'; break;
    case 'SEK': $sign = 'kr'; break;
    case 'SGD': $sign = '$'; break;
    case 'BRL': $sign = 'R$'; break;
    case 'MYR': $sign = 'RM'; break;
    case 'PHP': $sign = 'piso'; break;
    case 'TWD': $sign = '$'; break;
    case 'THB': $sign = '?'; break;
    case 'ZAR': $sign = 'R '; break;
    default: $sign = $currency_code; break;
  }

  $format = $pos_sign . variable_get('ms_core_format_money_template', '[sign][number].[decimal]');
  $search = array('[sign]', '[number]', '[decimal]');
  $replace = array($sign, $whole, $decimal);

  return str_replace($search, $replace, $format);
}

/**
 * Format the Recurring String
 *
 * @param object $recurring_schedule
 *    The recurring schedule to get the string for
 * @param bool $recurring
 *    Whether the schedule is recurring or not
 *
 * @return
 *    The formatted string for recurring schedule
 */
function ms_core_get_recurring_string($schedule, $recurring = FALSE) {
  $schedule = (object) $schedule;
  $currency = ms_core_variable_get('ms_core_default_currency', 'USD', $schedule);
  if ($recurring) {
    if ($schedule->has_trial) {
      if (($schedule->total_occurrences > 1)) {
        return t('@trial_amount for the first @trial_period, then @main_amount @every_period for @time_length',
          array(
            '@trial_amount' => ($schedule->trial_amount > 0) ? ms_core_format_money($schedule->trial_amount, $currency) : t('Free'),
            '@trial_period' => ms_core_format_unit($schedule->trial_unit, $schedule->trial_length),
            '@main_amount' => ($schedule->main_amount > 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
            '@every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
            '@time_length' => ms_core_format_unit($schedule->main_unit, $schedule->total_occurrences),
          ));
      }
      else {
        return t('@trial_amount for the first @trial_period, then @main_amount @every_period',
          array(
            '@trial_amount' => ($schedule->trial_amount > 0) ? ms_core_format_money($schedule->trial_amount, $currency) : t('Free'),
            '@trial_period' => ms_core_format_unit($schedule->trial_unit, $schedule->trial_length),
            '@main_amount' => ($schedule->main_amount > 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
            '@every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
          ));
      }
    }
    else {
      if (($schedule->total_occurrences > 1)) {
        return t('@main_amount @every_period for @time_length',
          array(
            '@main_amount' => ($schedule->main_amount > 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
            '@every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
            '@time_length' => ms_core_format_unit($schedule->main_unit, $schedule->total_occurrences),
          ));
      }
      else {
        return t('@main_amount @every_period',
          array(
            '@main_amount' => ($schedule->main_amount > 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
            '@every_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length, TRUE),
          ));
      }
    }
  }
  else {
    if (!empty($schedule->main_length)) {
      return t('@main_amount for @main_period',
        array(
          '@main_amount' => ($schedule->main_amount > 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free'),
          '@main_period' => ms_core_format_unit($schedule->main_unit, $schedule->main_length),
        ));
    }
    else {
      return ($schedule->main_amount > 0) ? ms_core_format_money($schedule->main_amount, $currency) : t('Free');
    }
  }
}

/**
 * Helper Function to switch the units
 */
function ms_core_format_unit($unit, $occurrences = 1, $every = FALSE) {
  switch ($unit) {
    case 'D':
      return ($every) ? format_plural($occurrences, t('every Day'), t('every @count Days')) :
        format_plural($occurrences, t('1 Day'), t('@count Days'));
    case 'W':
      return ($every) ? format_plural($occurrences, t('every Week'), t('every @count Weeks')) :
        format_plural($occurrences, t('1 Week'), t('@count Weeks'));
    case 'M':
      return ($every) ? format_plural($occurrences, t('every Month'), t('every @count Months')) :
        format_plural($occurrences, t('1 Month'), t('@count Months'));
    case 'Y':
      return ($every) ? format_plural($occurrences, t('every Year'), t('every @count Years')) :
        format_plural($occurrences, t('1 Year'), t('@count Years'));
    default:
      return ($every) ? format_plural($occurrences, t('every Period'), t('every @count Periods')) :
        format_plural($occurrences, t('1 Period'), t('@count Periods'));
  }
}

/**
 * Helper Function to return a list of countries.
 *

 *
 * @return
 *    The Associative Array of Countries keyed by the $key
 */
function ms_core_get_countries($key) {
  $result = db_query("SELECT * FROM {ms_core_countries}");
  $countries = array();
  while ($country = db_fetch_object($result)) {
    $countries[$country->$key] = $country->printable_name;
  }
  return $countries;
}

/**
 * Helper function to get the years
 *
 * @param int $future
 *    How many years in the future to get
 *
 * @return
 *    An Associative Array of the next X amount of years
 */
function ms_core_get_years($future = 25) {
  $current_year = date('Y');
  $years = array();

  foreach (range($current_year, $current_year + $future) as $year) {
    $years[$year] = $year;
  }

  return $years;
}

/**
 * Helper Function to get the Months of the year
 *
 * @return
 *    An Associative Array of Months
 */
function ms_core_get_months() {
  $show_number = variable_get('ms_core_billing_show_month_numbers', FALSE);
  return array(
    '01' => ($show_number) ? '01' : 'January',
    '02' => ($show_number) ? '02' : 'February',
    '03' => ($show_number) ? '03' : 'March',
    '04' => ($show_number) ? '04' : 'April',
    '05' => ($show_number) ? '05' : 'May',
    '06' => ($show_number) ? '06' : 'June',
    '07' => ($show_number) ? '07' : 'July',
    '08' => ($show_number) ? '08' : 'August',
    '09' => ($show_number) ? '09' : 'September',
    '10' => ($show_number) ? '10' : 'October',
    '11' => ($show_number) ? '11' : 'November',
    '12' => ($show_number) ? '12' : 'December',
  );
}

/**
 * Helper Function to Mask a Credit Card Number for Storage
 *
 * @param string $num
 *    The credit card number
 * @param int $break
 *    Break into how many in each chunk?
 * @param int $pad
 *    Pad to what length?
 * @param char $mask
 *    What character to use for the masking
 * @param int $leave
 *    How many numbers to leave showing
 *
 * @return
 *    The Masked String for the Credit Card
 */
function ms_core_mask_cc($num, $break = 4, $pad = 16, $mask = 'X', $leave = 4) {
  return implode('-', str_split(substr_replace(str_pad(trim($num), $pad, '0', STR_PAD_LEFT), str_repeat($mask, $pad-$leave), 0, $leave * -1), $break));
}

function ms_core_get_form_field_default($key, $values = FALSE) {
  if ($key AND is_array($values)) {
    return $values[$key];
  }
  else {
    return '';
  }
}

/**
 * Helper Function to Show the Credit Card Billing Form
 *
 * @param array $form
 *    The form to add the values for
 */
function ms_core_get_billing_form(&$form, $order, $billing = TRUE) {
  // Load the account from the order
  $account = user_load($order->uid);
  if ($account->uid) {
    $vars = (array) $account;
  }
  elseif ($order->data['register_form']['email1']) {
    // Get the address and email from the registration form
    $vars = $order->data['register_form'];
  }
  elseif (!empty($order->data['form']['mail'])) {
    $vars = $order->data['form'];
  }
  elseif (!empty($order->data['form']['values']['mail'])) {
    $vars = $order->data['form']['values'];
  }
  else {
    $vars = FALSE;
  }
  $billing_email = $order->email_address;

  $form['billing'] = array(
    '#type' => 'fieldset',
    '#title' => ($billing) ? t('Billing Info') : t('Address'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $fields = ms_core_get_checkout_form_fields('billing');

  // Billing Info
  foreach ($fields as $field => $data) {
    if (variable_get('ms_checkout_form_'. $field .'_enabled', TRUE)) {
      $form['billing'][$field] = array(
        '#type' => $data['type'],
        '#title' => variable_get('ms_checkout_form_'. $field .'_title', $data['name']),
        '#description' => variable_get('ms_checkout_form_'. $field .'_description', $data['description']),
        '#size' => $data['size'],
        '#required' => variable_get('ms_checkout_form_'. $field .'_required', $data['required']),
        '#default_value' => ms_core_get_form_field_default(variable_get('ms_core_profile_'. $field, $data['profile']), $vars),
      );
      if ($field == 'billing_country') {
        $form['billing'][$field]['#options'] = ms_core_get_countries('iso');
        $form['billing'][$field]['#default_value'] = ms_core_get_form_field_default(variable_get('ms_core_profile_'. $field, $data['profile']), $vars) ? ms_core_get_form_field_default(variable_get('ms_core_profile_'. $field, $data['profile']), $vars) : variable_get('ms_core_default_country', 'US');
      }
      if ($field == 'billing_email') {
        $form['billing'][$field]['#default_value'] = $billing_email;
      }
    }
    else {
      $form['billing'][$field] = array(
        '#type' => 'value',
        '#value' => ms_core_get_form_field_default(variable_get('ms_core_profile_'. $field, $data['profile']), $vars),
      );
    }
  }
}

/**
 * Helper Function to Show the Credit Card Form
 *
 * @param array $form
 *    The form to add the values for
 */
function ms_core_get_cc_form(&$form, $order, $cards = array(), $use_card = TRUE) {
  // Load the account from the order
  $account = user_load($order->uid);
  $vars = FALSE;
  if ($account->uid) {
    $vars = (array) $account;
  }
  elseif ($order->data['register_form']['email1']) {
    // Get the address and email from the registration form
    $vars = $order->data['register_form'];
  }
  elseif (!empty($order->data['form']['mail'])) {
    $vars = $order->data['form'];
  }
  elseif (!empty($order->data['form']['values']['mail'])) {
    $vars = $order->data['form']['values'];
  }

  $form['cc'] = array(
    '#type' => 'fieldset',
    '#title' => ($use_card) ? t('Credit Card') : t('Name'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  // Credit Card Info
  $fields = ms_core_get_checkout_form_fields('cc');

  foreach ($fields as $field => $data) {
    if (variable_get('ms_checkout_form_'. $field .'_enabled', TRUE)) {
      $form['cc'][$field] = array(
        '#type' => $data['type'],
        '#title' => variable_get('ms_checkout_form_'. $field .'_title', $data['name']),
        '#description' => variable_get('ms_checkout_form_'. $field .'_description', $data['description']),
        '#size' => $data['size'],
        '#required' => variable_get('ms_checkout_form_'. $field .'_required', $data['required']),
        '#default_value' => ms_core_get_form_field_default(variable_get('ms_core_profile_'. $field, $data['profile']), $vars),
      );
    }
    else {
      $form['cc'][$field] = array(
        '#type' => 'value',
        '#value' => ms_core_get_form_field_default(variable_get('ms_core_profile_'. $field, $data['profile']), $vars),
      );
    }
  }

  if ($use_card) {
    $form['cc']['cc_type'] = array(
      '#type' => 'select',
      '#title' => t('Card Type'),
      '#options' => $cards,
      '#description' => t("Select the Card Type."),
      '#required' => TRUE,
    );
    $form['cc']['cc_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Credit Card Number'),
      '#size' => 40,
      '#maxlength' => 20,
      '#description' => t("Enter the Credit Card Number."),
      '#required' => TRUE,
    );
    $form['cc']['cc_cvv'] = array(
      '#type' => 'textfield',
      '#title' => t('Credit Card Verification Code'),
      '#size' => 5,
      '#maxlength' => 5,
      '#description' => t("Enter the Credit Card Verification Code."),
      '#required' => TRUE,
    );
    $form['cc']['cc_exp_month'] = array(
      '#type' => 'select',
      '#title' => t('Month'),
      '#options' => ms_core_get_months(),
      '#description' => t("What month does this credit card expire?"),
      '#required' => TRUE,
    );
    $form['cc']['cc_exp_year'] = array(
      '#type' => 'select',
      '#title' => t('Year'),
      '#options' => ms_core_get_years(),
      '#description' => t("What year does this credit card expire?"),
      '#required' => TRUE,
    );
  }
}

function ms_core_cc_form_validate($form, &$form_state) {
  // Clean the card number
  $form_state['values']['cc_number'] = ms_core_clean_cc_number($form_state['values']['cc_number']);

  $v = $form_state['values'];
  // Validate Expiration Date
  if ($v['cc_exp_year'] < date('Y')) {
    form_set_error('cc_exp_year', t('The card you entered is expired.'));
  }
  if ($v['cc_exp_year'] == date('Y') AND $v['cc_exp_month'] < date('n')) {
    form_set_error('cc_exp_month', t('The card you entered is expired.'));
  }
}

function ms_core_clean_cc_number($num) {
  return str_replace(array('-', ' '), array('', ''), $num);
}

// ======================================
// MAIL
// ======================================

/**
 * Handle Mail functions
 */
function ms_core_mail($key, &$message, $vars) {
  // Load the vars
  $order = $vars['order'];
  $account = user_load($order->uid);

  switch ($key) {
    case 'upcoming_payment':
      $message['subject'] = variable_get('ms_core_upcoming_payment_mail_subject', '');
      $message['body'] = variable_get('ms_core_upcoming_payment_mail_body', '');
    break;
  }

  // Replace the Order Tokens
  $message['subject'] = token_replace($message['subject'], 'ms_core_order', $order);
  $message['body'] = token_replace($message['body'], 'ms_core_order', $order);

  // Replace the User Tokens
  $message['subject'] = token_replace($message['subject'], 'user', $account);
  $message['body'] = token_replace($message['body'], 'user', $account);
}

// ======================================
// TOKEN
// ======================================

/**
 * Implementation of hook_token_list
 */
function ms_core_token_list($type = 'all') {
  $tokens = array();
  if ($type == 'ms_core_order' || $type == 'ms_order' || $type == 'all') {
    $tokens['MS Order']['orderId'] = t("The id number of the order");
    $tokens['MS Order']['orderStatus'] = t("The status of the order");
    $tokens['MS Order']['orderType'] = t("The type of the order");
    $tokens['MS Order']['orderCreated'] = t("When the order was created");
    $tokens['MS Order']['orderModified'] = t("When the order was modified");
    $tokens['MS Order']['nextPaymentDate'] = t("The date of the next scheduled payment");
    $tokens['MS Order']['nextPaymentAmount'] = t("The amount of the next scheduled payment");
    $tokens['MS Order']['orderAmount'] = t("The total amount of the order");
    $tokens['MS Order']['orderNet'] = t("The net amount of the order before adjustments");
    $tokens['MS Order']['orderProducts'] = t("A listing of the products in the order");
    $tokens['MS Order']['orderPayments'] = t("A listing of the payments made for the order");
    $tokens['MS Order']['orderSummaryHTML'] = t("A summary of the products, adjustments, and total of the order. In HTML rather than plain text.");
    $tokens['MS Order']['orderSummary'] = t("A summary of the products, adjustments, and total of the order");
    $tokens['MS Order']['customerName'] = t("The customer's full name");
    $tokens['MS Order']['customerEmail'] = t("The customer's email");
    $tokens['MS Order']['billingStreet'] = t("The customer's billing address street");
    $tokens['MS Order']['billingCity'] = t("The customer's billing address city");
    $tokens['MS Order']['billingState'] = t("The customer's billing address state");
    $tokens['MS Order']['billingZip'] = t("The customer's billing address zip");
    $tokens['MS Order']['billingCountry'] = t("The customer's billing address country");
    $tokens['MS Order']['shippingStreet'] = t("The customer's shipping address street");
    $tokens['MS Order']['shippingCity'] = t("The customer's shipping address city");
    $tokens['MS Order']['shippingState'] = t("The customer's shipping address state");
    $tokens['MS Order']['shippingZip'] = t("The customer's shipping address zip");
    $tokens['MS Order']['shippingCountry'] = t("The customer's shipping address country");
  }
  if ($type == 'ms_core_product' || $type == 'ms_product' || $type == 'all') {
    $tokens['MS Product']['productType'] = t("The Product Type (recurring/cart).");
    $tokens['MS Product']['productId'] = t("The item ID in the respective module.");
    $tokens['MS Product']['productName'] = t("The name of the product.");
    $tokens['MS Product']['productPrice'] = t("The price set for the product");
    $tokens['MS Product']['productQty'] = t("The number of this product. Usually 1.");
    $tokens['MS Product']['productModule'] = t("The module associated with the product.");
  }
  if ($type == 'ms_core_payment' || $type == 'ms_payment' || $type == 'all') {
    $tokens['MS Payment']['paymentAmount'] = t("The amount that was paid");
    $tokens['MS Payment']['paymentAmountPlain'] = t("The amount that was paid. For use in Plain Text, such as emails.");
    $tokens['MS Payment']['paymentType'] = t("The type of payment");
    $tokens['MS Payment']['gatewayName'] = t("The payment gateway that was used");
    $tokens['MS Payment']['paymentDate'] = t("The date the payment was made");
  }
  return $tokens;
}

/**
 * Implementation of hook_token_values
 */
function ms_core_token_values($type, $object = NULL, $options = array()) {
  $tokens = array();
  if ($type == 'ms_core_order' || $type == 'ms_order') {
    $tokens['orderId'] = $object->order_number;
    $tokens['orderStatus'] = ms_core_get_order_status($object->status);
    $tokens['orderType'] = ms_core_get_order_type($object);
    $tokens['orderCreated'] = format_date($object->created, 'small');
    $tokens['orderModified'] = format_date($object->modified, 'small');
    $tokens['nextPaymentDate'] = ms_core_get_next_payment_date($object);
    $tokens['nextPaymentAmount'] = ms_core_get_next_payment_amount($object);
    $tokens['orderAmount'] = ms_core_format_money($object->amount, $object->currency, 'Plain');
    $tokens['orderNet'] = ms_core_format_money(ms_core_get_order_products_total($object), $object->currency, 'Plain');
    $tokens['orderProducts'] = ms_core_list_products($object);
    $tokens['orderPayments'] = ms_core_list_payments($object);
    $tokens['orderSummary'] = ms_core_get_order_summary($object);
    $tokens['orderSummaryHTML'] = ms_core_get_order_details_table($object);
    $tokens['customerName'] = $object->first_name .' '. $object->last_name;
    if ($object->first_name) {
      $tokens['customerName'] = $object->first_name . ' ' . $object->last_name;
    }
    else {
      if ($account = user_load($object->uid)) {
        $tokens['customerName'] = $account->name;
      }
      else {
        $tokens['customerName'] = t('N/A');
      }
    }
    if ($object->email_address) {
      $tokens['customerEmail'] = $object->email_address;
    }
    else {
      if ($account = user_load($object->uid)) {
        $tokens['customerEmail'] = $account->mail;
      }
      else {
        $tokens['customerEmail'] = t('N/A');
      }
    }
    $tokens['billingStreet'] = $object->billing_address['street'];
    $tokens['billingCity'] = $object->billing_address['city'];
    $tokens['billingState'] = $object->billing_address['state'];
    $tokens['billingZip'] = $object->billing_address['zip'];
    $tokens['billingCountry'] = $object->billing_address['country'];
    $tokens['shippingStreet'] = $object->shipping_address['street'];
    $tokens['shippingCity'] = $object->shipping_address['city'];
    $tokens['shippingState'] = $object->shipping_address['state'];
    $tokens['shippingZip'] = $object->shipping_address['zip'];
    $tokens['shippingCountry'] = $object->shipping_address['country'];
  }
  if ($type == 'ms_core_product' || $type == 'ms_product') {
    $tokens['productType'] = $object->type;
    $tokens['productId'] = $object->id;
    $tokens['productName'] = $object->name;
    $tokens['productPrice'] = ms_core_format_money($object->amount);
    $tokens['productQty'] = $object->qty;
    $tokens['productModule'] = $object->module;
  }
  if ($type == 'ms_core_payment' || $type == 'ms_payment') {
    $tokens['paymentAmount'] = ms_core_format_money($object->amount, $object->currency);
    $tokens['paymentAmountPlain'] = ms_core_format_money($object->amount, $object->currency, 'Plain');
    $tokens['paymentType'] = $object->type;
    $tokens['gatewayName'] = ms_core_get_gateway_name($object->gateway);
    $tokens['paymentDate'] = format_date($object->created, 'small');
  }
  return $tokens;
}

/**
 * Return a string listing of the products for an order
 */
function ms_core_list_products($order) {
  $products = array();
  if (is_array($order->products)) {
    foreach ($order->products as $product) {
      $products[] = $product->name;
    }
    return implode($products, ', ');
  }
  else {
    return '';
  }
}

/**
 * Return a string listing of the payments for an order
 */
function ms_core_list_payments($order) {
  $payments = array();
  if (is_array($order->payments)) {
    foreach ($order->payments as $payment) {
      $payments[] = format_date($payment->created, 'small') .' - '. ms_core_format_money($payment->amount, $payment->currency);
    }
    return implode($payments, ', ');
  }
  else {
    return '';
  }
}

/**
 * Return a string summary of the order products, adjustments, and total
 */
function ms_core_get_order_summary($order) {
  $products = ms_core_list_products($order);
  $payments = ms_core_list_payments($order);

  return t('Order Summary') .':
'
    . t('Products') .':'. $products .'
'
    . t('Payments') .': '. $payments;
}

// ======================================
// CART
// ======================================

/**
 * Show the Shopping Cart Page
 */
function ms_core_cart_page() {
  // Add the CSS
  drupal_add_css(drupal_get_path('module', 'ms_core') .'/ms_core.css');

  // Stop the caching
  $GLOBALS['conf']['cache'] = FALSE;

  if ($cart = ms_core_get_cart()) {
    $html = ms_core_get_order_details_table($cart, TRUE);
    $fields = ms_core_get_cart_fields($cart);

    foreach ($fields as $field) {
      $html .= "<div class='ms_cart_field_div'>". $field['html'] ."</div>";
    }

    $redirect = variable_get('ms_core_continue_shopping_path', '');

    if ($_GET['ref']) {
      $redirect = $_GET['ref'];
    }

    $html .= "<div class='ms_cart_field_div'>";
    $html .= "<div class='ms_cart_left'>". drupal_get_form('ms_core_get_continue_shopping_button', $redirect) ."</div>";

    if (count($cart->products)) {
      $html .= "<div class='ms_cart_right'>". drupal_get_form('ms_core_get_checkout_button') ."</div>";
    }
    $html .= "<div style='clear:both;'></div>";
    $html .= "</div>";
  }
  else {
    $html = t('There are currently no products in your shopping cart.');
  }
  return $html;
}

function ms_core_get_checkout_button($form_state) {
  $form = array();

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Checkout'),
    );
  $form['#redirect'] = 'ms/checkout';

  return $form;
}

function ms_core_get_continue_shopping_button($form_state, $redirect) {
  $form = array();

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Continue Shopping'),
    );
  $form['#redirect'] = $redirect;

  return $form;
}

/**
 * Return the HTMl to use for the Subtotal Field
 *
 * @param object $order
 *    The order object to get the HTML for the items of
 *
 * @return
 *    An HTML string listing the items for the order
 */
function ms_core_get_order_subtotal_html($order) {
  if ($order->order_type == 'recurring') {
    $subtotal = ms_core_get_order_products_total($order);

    foreach ($order->products as $product) {
      if ($product->recurring_schedule['has_trial']) {
        $product->recurring_schedule['trial_amount'] = $subtotal;
      }
      else {
        $product->recurring_schedule['main_amount'] = $subtotal;
      }

      return ms_core_get_recurring_string($product->recurring_schedule, TRUE);
    }
    $subtotal = ms_core_get_order_products_total($order);
    return ms_core_format_money($subtotal, $order->currency);
  }
  else {
    $subtotal = ms_core_get_order_products_total($order);
    return ms_core_format_money($subtotal, $order->currency);
  }
}

/**
 * Return the HTMl to use for the Subtotal Field
 *
 * @param object $order
 *    The order object to get the HTML for the items of
 *
 * @return
 *    An HTML string listing the items for the order
 */
function ms_core_get_order_total_html($order) {
  if ($order->order_type == 'recurring') {
    // Add in the data for overrides
    $order->recurring_schedule['data'] = $order->data;
    return ms_core_get_recurring_string($order->recurring_schedule, TRUE);
  }
  else {
    $total = ms_core_get_final_price($order);
    return ms_core_format_money($total, $order->currency);
  }
}

/**
 * Gets a translated string for the adjustment scope
 *
 * @param $scope
 *   The scope to get the name for
 * @return
 *   A translated string for the scope name
 */
function ms_core_get_scope_name($scope) {
  switch ($scope) {
    case 'initial':
      return t('Initial');
    case 'recurring':
      return t('Persistent');
    default:
      return $scope;
  }
}

/**
 * Gets an array of scopes, used for forms
 * @return
 *   An array of scopes
 */
function ms_core_get_scopes() {
  return array(
   'initial' => t('Initial'),
   'recurring' => t('Persistent'),
  );
}

/**
 * Returns an array of adjustment types
 *
 * @return
 *   An array of adjustment types
 */
function ms_core_get_adjustment_types() {
  return array(
    'percentage' => t('Percentage'),
    'fixed' => t('Fixed')
  );
}

/**
 * Converts a cart product to a regular product
 *
 * @param $c_product
 *   The cart product to convert
 * @return MsProduct
 *   The new MsProduct object
 */
function ms_core_cart_product_to_ms_product($c_product) {
  $product = new MsProduct();

  $product->type = $c_product->type;
  $product->id = $c_product->id;
  $product->name = $c_product->name;
  $product->module = $c_product->module;
  $product->qty = $c_product->qty;
  $product->amount = $c_product->amount;
  $product->recurring_schedule = $c_product->recurring_schedule;
  $product->data = $c_product->data;

  return $product;
}

function ms_core_cart_remove_page($pid) {
  $cart = ms_core_get_cart();

  $product = $cart->products[$pid];

  if ($product->cart_product_id) {
    ms_core_remove_cart_product($product, $cart);
    // Redirect to the page it came from
    $redirect = ($_GET['destination']) ? $_GET['destination'] : 'ms/cart';

    drupal_goto($redirect);
  }
  else {
    drupal_not_found();
  }
}

/**
 * Helper Function to shorten a name
 */
function ms_core_shorten_name($name, $length = 25, $char = '...') {
  if (strlen($name) > $length) {
    return substr($name, 0, $length) . $char;
  }
  return $name;
}

/**
 * Return the Cart Block HTML
 */
function ms_core_get_cart_block_html($hide_if_empty, $help_text) {
  $html = '';
  $cart = ms_core_get_cart();
  if ($cart AND count($cart->products)) {
    // Add the CSS
    drupal_add_css(drupal_get_path('module', 'ms_core') .'/ms_core.css');

    $html .= "<div id='ms_cart_block_cart_contents'>";

    foreach ($cart->products as $prod_num => $product) {
      $item = "<div class='ms_cart_block_contents_item'>";
      $item .= "<span class='ms_cart_block_contents_item_name ms_cart_left'>". ms_core_shorten_name($product->name, 15) ."</span>";
      $item .= "<span class='ms_cart_block_contents_item_remove ms_cart_right'>"
        ."<a href='". url('ms/cart/remove/'. $prod_num, array('query' => drupal_get_destination())) ."'><img src='". base_path() . drupal_get_path('module', 'ms_core') .'/images/trash_can.png' ."' /></a>"
        ."</span>";
      $item .= "<span class='ms_cart_block_contents_item_price ms_cart_right'>". ms_core_format_money($product->amount) ."</span>";
      $item .= "</div>";
      $html .= $item;

      // Add the product specific adjustments here
      $product_total = ms_core_get_product_display_price($product);
      foreach ($cart->adjustments as $adjustment) {
        if (!empty($adjustment->product_id) AND $adjustment->product_id == $product->cart_product_id) {
          $value = ms_core_get_adjusted_price($adjustment, $product_total);
          $product_total += $value;

          $adjustment_value = ms_core_get_adjustment_text($cart, $adjustment, $value);
          $item = "<div class='ms_cart_block_contents_item'>";
          $item .= "<span class='ms_cart_block_contents_adjustment_name ms_cart_left'>" . ms_core_shorten_name($adjustment->display, 15) . "</span>";
          $item .= "<span class='ms_cart_block_contents_adjustment_value ms_cart_right'>" . ms_core_format_money($value) . "</span>";
          $item .= "</div>";
          $html .= $item;
        }
      }
    }

    $price = ms_core_get_order_products_total($cart);
    foreach ($cart->adjustments as $adjustment_num => $adjustment) {
      // Only show the adjustments that don't have product associations
      if (empty($adjustment->product_id)) {
        $value = ms_core_get_adjusted_price($adjustment, $price);
        $price += $value;
        $item = "<div class='ms_cart_block_contents_item'>";
        $item .= "<span class='ms_cart_block_contents_adjustment_name ms_cart_left'>". ms_core_shorten_name($adjustment->display, 15) ."</span>";
        $item .= "<span class='ms_cart_block_contents_adjustment_value ms_cart_right'>". ms_core_format_money($value) ."</span>";
        $item .= "</div>";
        $html .= $item;
      }
    }

    $html .= "<div class='ms_cart_cleardiv'></div>";
    $html .= "</div>";

    // Total
    $html .= "<div id='ms_cart_block_total'>";
    $html .= "<span class='ms_cart_block_total_label ms_cart_left'>". t('Total') ."</span>";
    $html .= "<span class='ms_cart_block_total_price ms_cart_right'>". ms_core_format_money($cart->amount) ."</span>";
    $html .= "<div class='ms_cart_cleardiv'></div>";
    $html .= "</div>";

    // Buttons
    $html .= "<div id='ms_cart_block_buttons'>";
    $html .= "<span class='ms_cart_block_cart_button ms_cart_button'>". l(t('View Cart'), 'ms/cart') ."</span>";
    $html .= "<span class='ms_cart_block_checkout_button ms_cart_button'>". l(t('Check out'), 'ms/checkout') ."</span>";
    $html .= "<div class='ms_cart_cleardiv'></div>";
    $html .= "</div>";

    if ($help_text) {
      $html .= "<div id='ms_cart_block_help_text'>". $help_text ."</div>";
    }
  }
  elseif (!$hide_if_empty) {
    $html .= "<div id='ms_cart_block_cart_contents'>". t('!cartLink your shopping cart.', array('!cartLink' => l(t('View'), 'ms/cart'))) ."</div>";
    if ($help_text) {
      $html .= "<div id='ms_cart_block_help_text'>". $help_text ."</div>";
    }
  }
  return $html;
}

function ms_core_cart_to_order($data = NULL) {
  global $user;
  $cart = ms_core_get_cart();

  // Create a new order
  $order = ms_core_order_new($cart->order_type, $user->uid);

  $product_ids_map = array();

  // Add the products to the order
  foreach ($cart->products as $c_product) {
    // Create a new MsProduct object and load the values from the cart object
    $product = ms_core_cart_product_to_ms_product($c_product);
    $order = ms_core_add_order_product($order, $product);
    if ($cart->order_type == 'recurring') {
      $order = ms_core_set_recurring_schedule($order, $product->recurring_schedule);
    }

    $product_ids_map[$c_product->cart_product_id] = $product->order_product_id;
  }

  // Add the adjustments to the order
  foreach ($cart->adjustments as $adjustment) {
    // Change the product_id if it is set, since the product id has changed
    if (!empty($adjustment->product_id)) {
      $adjustment->product_id = $product_ids_map[$adjustment->product_id];
    }
    $order = ms_core_add_order_adjustment($order, $adjustment);
  }

  $order = ms_core_order_load($order->oid);

  // Add the data
  if ($data) {
    $order = ms_core_add_data($order, $data);
  }

  // Set the currency if it is overridden
  $order->currency = ms_core_variable_get('ms_core_default_currency', 'USD', $order);

  // Set the email address for the order
  $order->email_address = '';

  if ($user->uid) {
    $order->email_address = $user->mail;
  }
  elseif (isset($order->data['form']['mail'])) {
    $order->email_address = $order->data['form']['mail'];
  }
  elseif (isset($data['register_form']['email1'])) {
    $order->email_address = $data['register_form']['email1'];
  }
  elseif (isset($order->data['form']['values']['mail'])) {
    $order->email_address = $order->data['form']['values']['mail'];
  }

  // Save the order
  ms_core_order_save($order);

  // Empty the cart
  ms_core_empty_cart($cart->cart_id);

  // Reload the order object
  $order = ms_core_order_load($order->oid);

  $_SESSION['ms_oid'] = $order->oid;

  return $order;
}

/**
 * Remove an Adjustment from a cart
 *
 * @param object $adjustment
 *    The adjustment object
 *
 */
function ms_core_remove_cart_adjustment($adjustment, $cart = NULL) {
  if (!$cart) {
    $cart = ms_core_get_cart();
  }
  $result = db_query("DELETE FROM {ms_cart_adjustments} WHERE cart_id='%s' AND id=%d", $cart->cart_id, $adjustment->id);
}

/**
 * Remove an Adjustment Pattern from a cart
 *
 * @param string $code
 *    The pattern to use for removing an adjustment
 *
 */
function ms_core_remove_cart_adjustment_match($code) {
  $cart = ms_core_get_cart();
  $result = db_query("DELETE FROM {ms_cart_adjustments} WHERE cart_id='%s' AND id LIKE '%s' LIMIT %d",
    $cart->cart_id, $code .'%', 1);
}

/**
 * Remove a product from a cart
 *
 * @param object $product
 *    The product object
 */
function ms_core_remove_cart_product($product, $cart = NULL) {
  if (!$cart) {
    $cart = ms_core_get_cart();
  }

  db_query("DELETE FROM {ms_cart_products} WHERE cart_id='%s' AND cart_product_id=%d", $cart->cart_id, $product->cart_product_id);

  // Remove any adjustments that were dependant on this product
  db_query("DELETE FROM {ms_cart_adjustments} WHERE cart_id='%s' AND product_id=%d", $cart->cart_id, $product->cart_product_id);
}

/**
 * Helper Function to Clear the Order from the Session
 */
function ms_core_clear_order_session() {
  if (isset($_SESSION['ms_oid'])) {
    $_SESSION['ms_oid'] = NULL;
    unset($_SESSION['ms_oid']);
  }
}

/**
 * Empty a Shopping Cart
 */
function ms_core_empty_cart($cart_id = NULL) {
  $cart = ms_core_get_cart($cart_id);
  $result = db_query("DELETE FROM {ms_cart_products} WHERE cart_id='%s'", $cart->cart_id);
  $result = db_query("DELETE FROM {ms_cart_adjustments} WHERE cart_id='%s'", $cart->cart_id);
}

/**
 * Grab the items in a shopping cart for a user.
 *
 * If $cid is not passed in, this function uses the uid of the person currently
 * accessing this function.
 */
function ms_cart_get_contents($cid = NULL, $action = NULL) {
  static $items = array();
  $cid = $cid ? $cid : ms_cart_get_id();

  if ($action == 'rebuild') {
    unset($items[$cid]);
  }

  if (!isset($items[$cid])) {
    $items[$cid] = array();
    $result = db_query("SELECT * FROM {ms_cart_products} WHERE cart_id = '%s'", $cid);

    while ($item = db_fetch_object($result)) {
      for ($i = 0; $i < count($items[$cid]); $i++) {
        if ($items[$cid][$i]->nid == $item->nid && $items[$cid][$i]->data == $item->data) {
          $items[$cid][$i]->qty += $item->qty;
          continue 2;
        }
      }
      $product = node_load($item->nid);
      $item->cost = $product->cost;
      $item->price = $product->sell_price;
      $item->weight = $product->weight;
      $item->data = unserialize($item->data);
      $item->module = $item->data['module'];
      $item->model = $product->model;

      $items[$cid][] = $item;
    }

  }

  return $items[$cid];
}

/**
 * Get the adjustments that are associated with a cart
 *
 * @param int $cid
 *    The cart id of the cart to get the adjustments for
 *
 * @return
 *    An array of adjustments for the cart
 */
function ms_core_get_cart_adjustments($cid) {
  $result = db_query("SELECT * FROM {ms_cart_adjustments} WHERE cart_id = '%s' ORDER BY weight", $cid);
  $adjustments = array();
  while ($row = db_fetch_object($result)) {
    $adjustment = new MsAdjustment($row);
    $adjustments[] = $adjustment;nt;
  }
  return $adjustments;
}

/**
 * Return the Cart object of the current session
 */
function ms_core_get_cart($cid = NULL) {
  $cid = $cid ? $cid : ms_cart_get_id();

  // Update the products so they don't expire
  db_query("UPDATE {ms_cart_products} SET changed = %d WHERE cart_id = '%s'", time(), $cid);

  // Select all of the products
  $result = db_query("SELECT * FROM {ms_cart_products} WHERE cart_id = '%s'", $cid);

  $cart = new MsOrder();

  $cart->cart_id = $cid;

  $cart->currency = variable_get('ms_core_default_currency', 'USD');

  // Get the Products for the Order
  $cart->products = ms_core_get_cart_products($cid);

  // Get the Adjustments for the Order
  $cart->adjustments = ms_core_get_cart_adjustments($cid);

  $cart->order_type = 'cart';

  $cart->gateway = isset($_SESSION['ms_gateway']) ? $_SESSION['ms_gateway'] : '';

  $data = array();

  // Make sure that recurring orders only have the one recurring item
  foreach ($cart->products as $product) {
    $data = array_merge($data, $product->data);
    if ($product->type == 'recurring') {
      $cart->products = array();
      $cart->products[] = $product;
      $cart->order_type = 'recurring';
      break;
    }
  }

  $cart->data = $data;

  // Set the currency if it is overridden
  $cart->currency = ms_core_variable_get('ms_core_default_currency', 'USD', $cart);

  $cart->calculate_total();

  return $cart;
}

/**
 * Return the unique cart_id of the user.
 */
function ms_cart_get_id() {
  global $user;

  if ($user->uid) {
    return $user->uid;
  }
  elseif (!isset($_SESSION['ms_cart_id'])) {
    $_SESSION['ms_cart_id'] = md5(uniqid(rand(), TRUE));
  }

  return $_SESSION['ms_cart_id'];
}

// ======================================
// Payments
// ======================================

/**
 * View Payments Page
 */
function ms_core_view_payments_page() {
  $content = "<div class='ms_payments_header'>". l(t('Export CSV'), 'admin/moneyscripts/ms_core/export_csv/ms_payments') ."</div>";

  $headers = array(
    array('data' => t('Date'), 'field' => 'p.created', 'class' => 'ms_payments_created_header', 'sort' => 'desc'),
    array('data' => t('User'), 'field' => 'u.name', 'class' => 'ms_payments_user_header'),
    array('data' => t('Order #'), 'field' => 'o.oid', 'class' => 'ms_payments_oid_header'),
    array('data' => t('Title'), 'class' => 'ms_payments_order_title_header'),
    array('data' => t('Gateway'), 'field' => 'p.gateway', 'class' => 'ms_payments_gateway_header'),
    array('data' => t('Transaction #'), 'field' => 'p.transaction', 'class' => 'ms_payments_transaction_header'),
    array('data' => t('Type'), 'field' => 'p.type', 'class' => 'ms_payments_type_header'),
    array('data' => t('Amount'), 'field' => 'p.amount', 'class' => 'ms_payments_amount_header'),
  );

  $sql = "SELECT p.pid, p.oid, p.type, p.transaction, p.recurring_id, p.gateway,
    p.amount, p.currency, p.created, o.uid, o.status, o.order_type, o.order_key, u.name
    FROM {ms_payments} as p
    LEFT JOIN {ms_orders} as o ON o.oid = p.oid
    LEFT JOIN {users} as u ON o.uid = u.uid
    WHERE o.oid != 0";

  // Act on the filters
  $args = array();
  $name = '';
  if (isset($_GET['name']) AND $_GET['name']) {
    $name = $_GET['name'];
    $sql .= " AND u.name LIKE '%s'";
    $args[] = '%'. $name .'%';
  }
  $oid_key = '';
  if (isset($_GET['oid_key']) AND $_GET['oid_key']) {
    $oid_key = $_GET['oid_key'];
    $sql .= " AND (o.oid = '%s' OR o.order_key = '%s')";
    $args[] = $oid_key;
    $args[] = $oid_key;
  }

  $sql .= tablesort_sql($headers);

  // Add the pager if requested
  $pager_amount = 20;
  if (!isset($_GET['pager_amount']) OR $pager_amount = $_GET['pager_amount']) {
    $result = pager_query($sql, $pager_amount, 0, NULL, $args);
  }

  $rows = array();
  $attr = array('id' => 'ms-core-payments-table');
  while ($row = db_fetch_object($result)) {
    $order = ms_core_order_load($row->oid);
    $rows[] = array('data' => array(
      array('data' => format_date($row->created, 'small'), 'class' => 'ms_payments_created'),
      array('data' => l($row->name, 'user/' . $order->uid), 'class' => 'ms_payments_user'),
      array('data' => l($order->order_number, 'admin/moneyscripts/orders/view/'. $order->order_key), 'class' => 'ms_payments_oid'),
      array('data' => ms_core_get_order_title($order), 'class' => 'ms_payments_order_title'),
      array('data' => ms_core_get_gateway_name($order->gateway), 'class' => 'ms_payments_gateway'),
      array('data' => $row->transaction, 'class' => 'ms_payments_transaction'),
      array('data' => ms_core_get_payment_type($row->type), 'class' => 'ms_payments_type'),
      array('data' => ms_core_format_money($row->amount, $row->currency), 'class' => 'ms_payments_amount'),
    ));
  }

  // Add the filters form
  $filters = array(
    'name' => $name,
    'oid_key' => $oid_key,
    'pager_amount' => $pager_amount,
  );
  $content .= drupal_get_form('ms_core_get_filter_form', $filters);

  // Store the data for csv export
  ms_core_store_csv($headers, $rows, 'ms_payments');

  $content .= theme('table', $headers, $rows, $attr);
  $content .= theme('pager', NULL, $pager_amount, 0);
  return $content;
}

// ======================================
// ORDERS
// ======================================

/**
 * View Orders Page
 */
function ms_core_view_orders_page() {
  $headers = array(
    array('data' => t('#'), 'field' => 'o.oid', 'class' => 'ms_orders_oid_header'),
    array('data' => t('User'), 'field' => 'u.name', 'class' => 'ms_orders_user_header'),
    array('data' => t('Gateway'), 'field' => 'o.gateway', 'class' => 'ms_orders_gateway_header'),
    array('data' => t('Status'), 'field' => 'o.status', 'class' => 'ms_orders_status_header'),
    array('data' => t('Products'), 'class' => 'ms_orders_products_header'),
    array('data' => t('Total'), 'field' => 'o.amount', 'class' => 'ms_orders_total_header'),
    array('data' => t('Created'), 'field' => 'o.created', 'sort' => 'desc', 'class' => 'ms_orders_created_header'),
    array('data' => t('Actions'), 'class' => 'ms_orders_actions_header'),
  );

  $sql = "SELECT o.oid, o.gateway, o.uid, o.status, o.order_type, o.amount, o.amount,
    o.created, o.currency, o.created, u.name
    FROM {ms_orders} as o
    LEFT JOIN {users} as u ON o.uid = u.uid
    WHERE o.oid != 0";

  // Act on the filters
  $args = array();
  $name = '';
  if (isset($_GET['name']) AND $_GET['name']) {
    $name = $_GET['name'];
    $sql .= " AND u.name LIKE '%s'";
    $args[] = '%'. $name .'%';
  }
  $order_status = 'All';
  if (isset($_GET['order_status']) AND $_GET['order_status'] != 'All') {
    $order_status = $_GET['order_status'];
    $sql .= " AND o.status = '%s'";
    $args[] = $order_status;
  }
  $oid_key = '';
  if (isset($_GET['oid_key']) AND $_GET['oid_key']) {
    $oid_key = $_GET['oid_key'];
    $sql .= " AND (o.oid = '%s' OR o.order_key = '%s')";
    $args[] = $oid_key;
    $args[] = $oid_key;
  }

  $sql .= tablesort_sql($headers);
  // Add the pager if requested
  $pager_amount = 20;
  if (!isset($_GET['pager_amount']) OR $pager_amount = $_GET['pager_amount']) {
    $result = pager_query($sql, $pager_amount, 0, NULL, $args);
  }
  $rows = array();
  $attr = array('id' => 'ms-core-orders-table');
  while ($row = db_fetch_object($result)) {
    $order = ms_core_order_load($row->oid);
    $order->products = ms_core_get_order_products($order->oid);
    $actions = array();
    $actions[] = l('View', 'admin/moneyscripts/orders/view/'. $order->order_key);
    $actions[] = l('Edit', 'admin/moneyscripts/orders/edit/'. $order->order_key);
    $actions[] = l('Delete', 'admin/moneyscripts/orders/delete/'. $order->order_key);
    $rows[] = array('data' => array(
      array('data' => $order->order_number, 'class' => 'ms_orders_oid'),
      array('data' => l($row->name, 'user/'. $order->uid), 'class' => 'ms_orders_user'),
      array('data' => ms_core_get_gateway_name($order->gateway), 'class' => 'ms_orders_gateway'),
      array('data' => ms_core_get_order_status($order->status), 'class' => 'ms_orders_status'),
      array('data' => ms_core_list_products($order), 'class' => 'ms_orders_products'),
      array('data' => ms_core_format_money($order->total, $order->currency), 'class' => 'ms_orders_total'),
      array('data' => format_date($order->created, 'small'), 'class' => 'ms_orders_created'),
      array('data' => implode($actions, ' | '), 'class' => 'ms_orders_actions'),
    ));
  }

  $output = '';

  // Add Export CSV link to output
  $output = "<div class='ms_payments_header'>". l(t('Export CSV'), 'admin/moneyscripts/ms_core/export_csv/ms_orders') ."</div>";

  // Store the data for csv export
  ms_core_store_csv($headers, $rows, 'ms_orders');

  $filters = array(
    'order_status' => $order_status,
    'name' => $name,
    'oid_key' => $oid_key,
  );

  // Add the filters form
  $output .= drupal_get_form('ms_core_get_filter_form', $filters);
  $output .= theme('table', $headers, $rows, $attr);
  $output .= theme('pager', NULL, $pager_amount, 0);

  return $output;
}

/**
 * Order Form
 */
function ms_core_order_form($form_state, $action = 'add', $order_key = NULL) {
  // fixme - add ability to edit recurring_schedules - collapsible fieldset
  $is_edit = FALSE;
  $form['order'] = array(
    '#type' => 'fieldset',
    '#title' => t('Order'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  if ($action == 'edit') {
    $is_edit = TRUE;
    $order = ms_core_order_load_by_key($order_key);
    $account = user_load($order->uid);

    // Show the products for the order
    $form['products'] = array(
      '#type' => 'fieldset',
      '#title' => t('Products'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );

    // Show an add product link
    $form['products']['add_product_link'] = array(
      '#value' => l(t('Add Product'), 'admin/moneyscripts/products/add/'. $order->order_key, array('attributes' => array('class' => 'ms_core_edit_order_add_product_link'))),
    );

    foreach ($order->products as $prod_num => $product) {
      $form['products']['product_'. $prod_num .'_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => $product->name,
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      // Show the Actions available for this payment
      $product_actions = array();
      $product_actions[] = l(t('Remove'), 'admin/moneyscripts/products/remove/'. $product->order_product_id);

      // Display details about the payment
      $headers = array(array('data' => t('Product Details'), 'colspan' => 2));
      $rows = array();
      $rows[] = array(t('Actions'), implode(' | ', $product_actions));
      $rows[] = array(t('Module'), $product->module);
      $rows[] = array(t('Amount'), ms_core_get_recurring_string($product->recurring_schedule, ($product->type == 'recurring')));
      $rows[] = array(t('Type'), $product->type);

      $form['products']['product_'. $prod_num .'_fieldset']['product_'. $prod_num .'_details'] = array(
        '#value' => theme_table($headers, $rows),
      );
    }

    // Show the payments for the order
    $form['payments'] = array(
      '#type' => 'fieldset',
      '#title' => t('Payments'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );

    // Show an add payment link
    $form['payments']['add_payment_link'] = array(
      '#value' => l(t('Add Payment'), 'admin/moneyscripts/payments/add/'. $order->order_key, array('attributes' => array('class' => 'ms_core_edit_order_add_payment_link'))),
    );

    foreach ($order->payments as $pid => $payment) {
      $form['payments']['payment_'. $pid .'_fieldset'] = array(
        '#type' => 'fieldset',
        '#title' => ms_core_get_payment_type($payment->type) .' - '. format_date($payment->created),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      // Show the Actions available for this payment
      $payment_actions = array();
      $payment_actions[] = l(t('Edit'), 'admin/moneyscripts/payments/edit/'. $payment->pid);
      $payment_actions[] = l(t('Delete'), 'admin/moneyscripts/payments/delete/'. $payment->pid);
      $payment_actions[] = l(t('Resubmit'), 'admin/moneyscripts/payments/resubmit/'. $payment->pid);

      // Display details about the payment
      $headers = array(array('data' => t('Payment Details'), 'colspan' => 2));
      $rows = array();
      $rows[] = array(t('Actions'), implode(' | ', $payment_actions));
      $rows[] = array(t('Amount'), ms_core_format_money($payment->amount, $payment->currency));
      $rows[] = array(t('Type'), ms_core_get_payment_type($payment->type));
      $rows[] = array(t('Date'), format_date($payment->created));
      $rows[] = array(t('Gateway'), ms_core_get_gateway_name($payment->gateway));
      if ($payment->transaction) {
        $rows[] = array(t('Transaction ID'), $payment->transaction);
      }
      if ($payment->recurring_id) {
        $rows[] = array(t('Recurring ID'), $payment->recurring_id);
      }

      $form['payments']['payment_'. $pid .'_fieldset']['payment_'. $pid .'_details'] = array(
        '#value' => theme_table($headers, $rows),
      );
    }

    $form['order']['oid'] = array(
      '#type' => 'value',
      '#value' => $order->oid,
    );
    $form['order']['orderid'] = array(
      '#type' => 'textfield',
      '#title' => t('Order ID'),
      '#size' => 32,
      '#maxlength' => 64,
      '#disabled' => TRUE,
      '#description' => t("The ID of this Order"),
      '#value' => $order->order_number,
    );
  }

  $today = time();
  $form['order']['created'] = array(
    '#type' => 'textfield',
    '#title' => t('Date Created'),
    '#default_value' => $order->created ? date('m/d/Y H:i', $order->created) : 0,
    '#description' => t("Enter any date in the MM/DD/YYYY Hour:Minute format (or any other format supported by strtotime())."),
  );
  $form['order']['username'] = array(
    '#type' => 'textfield',
    '#title' => t('User'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The User for this Order"),
    '#autocomplete_path' => 'admin/build/ms_core/autocomplete',
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $account->name : '',
  );
  $form['order']['order_type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array('recurring' => t('Recurring'), 'cart' => t('Cart')),
    '#description' => t("The type of order"),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $order->order_type : 'cart',
  );
  $form['order']['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => ms_core_get_order_statuses(),
    '#description' => t("The status of this order"),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $order->status : '',
  );
  $form['order']['gateway'] = array(
    '#type' => 'select',
    '#title' => t('Gateway'),
    '#options' => ms_core_get_payment_gateways_list(),
    '#description' => t("The gateway for this order"),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $order->gateway : '',
  );
  $form['order']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The first name of the Customer"),
    '#default_value' => ($is_edit) ? $order->first_name : '',
  );
  $form['order']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The last name of the Customer"),
    '#default_value' => ($is_edit) ? $order->last_name : '',
  );
  $form['order']['email_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#size' => 64,
    '#maxlength' => 255,
    '#default_value' => ($is_edit) ? $order->email_address : '',
  );
  $form['order']['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => ms_core_get_currencies(),
    '#description' => t("The currency for this order"),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $order->currency : '',
  );

  // Billing Address
  $form['order']['billing_address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Billing Address'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['order']['billing_address']['billing_street'] = array(
    '#type' => 'textfield',
    '#title' => t('Street'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => ($is_edit) ? $order->billing_address['street'] : '',
  );
  $form['order']['billing_address']['billing_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => ($is_edit) ? $order->billing_address['city'] : '',
  );
  $form['order']['billing_address']['billing_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#size' => 32,
    '#maxlength' => 15,
    '#default_value' => ($is_edit) ? $order->billing_address['state'] : '',
  );
  $form['order']['billing_address']['billing_zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 32,
    '#maxlength' => 15,
    '#default_value' => ($is_edit) ? $order->billing_address['zip'] : '',
  );
  $form['order']['billing_address']['billing_country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => ms_core_get_countries('iso'),
    '#default_value' => ($is_edit) ? $order->billing_address['country'] : '',
  );
  $form['order']['billing_address']['billing_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Number'),
    '#size' => 32,
    '#maxlength' => 32,
    '#default_value' => ($is_edit) ? $order->billing_address['phone'] : '',
  );

  // Shipping Address
  $form['order']['shipping_address'] = array(
    '#type' => 'fieldset',
    '#title' => t('Shipping Address'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['order']['shipping_address']['shipping_street'] = array(
    '#type' => 'textfield',
    '#title' => t('Street'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => ($is_edit) ? $order->shipping_address['street'] : '',
  );
  $form['order']['shipping_address']['shipping_city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 32,
    '#maxlength' => 64,
    '#default_value' => ($is_edit) ? $order->shipping_address['city'] : '',
  );
  $form['order']['shipping_address']['shipping_state'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#size' => 32,
    '#maxlength' => 15,
    '#default_value' => ($is_edit) ? $order->shipping_address['state'] : '',
  );
  $form['order']['shipping_address']['shipping_zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#size' => 32,
    '#maxlength' => 15,
    '#default_value' => ($is_edit) ? $order->shipping_address['zip'] : '',
  );
  $form['order']['shipping_address']['shipping_country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => ms_core_get_countries('iso'),
    '#default_value' => ($is_edit) ? $order->shipping_address['country'] : '',
  );
  $form['order']['shipping_address']['shipping_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Number'),
    '#size' => 32,
    '#maxlength' => 32,
    '#default_value' => ($is_edit) ? $order->shipping_address['phone'] : '',
  );

  // Show the recurring schedule edit fprm if applicable
  $gateway = ms_core_get_gateway($order->gateway);
  if ($order->order_type == 'recurring' AND !empty($gateway['recurring_schedule_support']) AND $recurring_schedule = ms_core_load_recurring_schedule($order->oid)) {
    $form['order']['recurring_schedule'] = array(
      '#tree' => TRUE,
      '#type' => 'fieldset',
      '#title' => t('Recurring Schedule'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t("Here you can view and edit the recurring schedule for
        this order. Changing these values will change when the user is billed
        next, and for how much and how long. Be very careful about changing these
        values!")
    );
    $form['order']['recurring_schedule']['change_recurring_schedule'] = array(
      '#type' => 'checkbox',
      '#title' => t("Change the Recurring Schedule?"),
      '#description' => t("Click this in order to change the recurring schedule
        values below. Note that there is generally no reason to change the values
        in the recurring schedule."),
    );
    $form['order']['recurring_schedule']['status'] = array(
      '#type' => 'select',
      '#title' => t('Status'),
      '#options' => array(
        'active' => t('Active'),
        'cancelled' => t('Cancelled'),
        'expiring' => t('Expiring'),
      ),
      '#default_value' => $recurring_schedule->status,
    );
    $form['order']['recurring_schedule']['main_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Main Amount'),
      '#default_value' => $recurring_schedule->main_amount,
    );
    $form['order']['recurring_schedule']['main_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Main Length'),
      '#default_value' => $recurring_schedule->main_length,
    );
    $form['order']['recurring_schedule']['main_unit'] = array(
      '#type' => 'select',
      '#title' => t('Main Unit'),
      '#options' => array(
        'H' => t('Hours'),
        'D' => t('Days'),
        'W' => t('Weeks'),
        'M' => t('Months'),
        'Y' => t('Years'),
      ),
      '#default_value' => $recurring_schedule->main_unit,
    );
    $form['order']['recurring_schedule']['trial_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Trial Amount'),
      '#default_value' => $recurring_schedule->trial_amount,
    );
    $form['order']['recurring_schedule']['trial_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Trial Length'),
      '#default_value' => $recurring_schedule->trial_length,
    );
    $form['order']['recurring_schedule']['trial_unit'] = array(
      '#type' => 'select',
      '#title' => t('Trial Unit'),
      '#options' => array(
        'H' => t('Hours'),
        'D' => t('Days'),
        'W' => t('Weeks'),
        'M' => t('Months'),
        'Y' => t('Years'),
      ),
      '#default_value' => $recurring_schedule->trial_unit,
    );
    $form['order']['recurring_schedule']['total_occurrences'] = array(
      '#type' => 'textfield',
      '#title' => t('Total Occurrences'),
      '#default_value' => $recurring_schedule->total_occurrences,
    );
    $form['order']['recurring_schedule']['next_payment'] = array(
      '#type' => 'textfield',
      '#title' => t('Next Payment'),
      '#default_value' => date('m/d/Y H:i', $recurring_schedule->next_payment),
      '#description' => t("Enter any date in the MM/DD/YYYY Hour:Minute format (or any other format supported by strtotime())."),
      '#attributes' => array('class' => array('pickadate')),
    );
    $form['order']['recurring_schedule']['current_payments'] = array(
      '#type' => 'textfield',
      '#title' => t('Current Payments'),
      '#default_value' => $recurring_schedule->current_payments,
    );
    $form['order']['recurring_schedule']['created'] = array(
      '#type' => 'textfield',
      '#title' => t('Created'),
      '#default_value' => date('m/d/Y H:i', $recurring_schedule->created),
      '#description' => t("Enter any date in the MM/DD/YYYY Hour:Minute format (or any other format supported by strtotime())."),
      '#attributes' => array('class' => array('pickadate')),
    );
    $form['order']['recurring_schedule']['expiration'] = array(
      '#type' => 'textfield',
      '#title' => t('Expiration'),
      '#default_value' => $recurring_schedule->expiration ? date('m/d/Y H:i', $recurring_schedule->expiration) : 0,
      '#description' => t("Enter any date in the MM/DD/YYYY Hour:Minute format (or any other format supported by strtotime())."),
      '#attributes' => array('class' => array('pickadate')),
    );
    $form['order']['recurring_schedule']['failed_payments'] = array(
      '#type' => 'textfield',
      '#title' => t('Failed Payments'),
      '#default_value' => $recurring_schedule->failed_payments,
    );
    $form['order']['recurring_schedule']['notified'] = array(
      '#type' => 'checkbox',
      '#title' => t('Notified'),
      '#default_value' => $recurring_schedule->notified,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['#redirect'] = 'admin/moneyscripts/orders';
  return $form;
}

/**
 * Validate Function for the Order Form
 */
function ms_core_order_form_validate($form, &$form_state) {
  $v = $form_state['values'];
  $account = user_load(array('name' => $v['username']));
  if (!$account->uid) {
    form_set_error('username', t('You must enter a valid user'));
  }
}

/**
 * Submit Function for the Order Form
 */
function ms_core_order_form_submit($form, &$form_state) {
  // Handle the Updating or Inserting of an order
  $v = $form_state['values'];

  if (isset($v['oid']) AND $order = ms_core_order_load($v['oid'])) {
    $account = user_load(array('name' => $v['username']));

    // Update the values
    $order->created = strtotime($v['created']);
    $order->gateway = $v['gateway'];
    $order->order_type = $v['order_type'];
    $order->status = $v['status'];
    $order->currency = $v['currency'];
    $order->first_name = $v['first_name'];
    $order->last_name = $v['last_name'];
    $order->email_address = $v['email_address'];
    $order->uid = $account->uid;
    $order->billing_address = array(
      'street' => trim($v['billing_street']),
      'city' => trim($v['billing_city']),
      'state' => trim($v['billing_state']),
      'zip' => trim($v['billing_zip']),
      'country' => trim($v['billing_country']),
      'phone' => trim($v['billing_phone']),
    );
    $order->shipping_address = array(
      'street' => trim($v['shipping_street']),
      'city' => trim($v['shipping_city']),
      'state' => trim($v['shipping_state']),
      'zip' => trim($v['shipping_zip']),
      'country' => trim($v['shipping_country']),
      'phone' => trim($v['shipping_phone']),
    );

    // Save the recurring schedule
    if (!empty($v['recurring_schedule']['change_recurring_schedule']) AND $recurring_schedule = ms_core_load_recurring_schedule($order->oid)) {
      // Merge in the values
      $recurring_schedule = (object) array_merge((array) $recurring_schedule, $v['recurring_schedule']);
      $recurring_schedule->next_payment = strtotime($recurring_schedule->next_payment);
      $recurring_schedule->created = strtotime($recurring_schedule->created);
      $recurring_schedule->expiration = strtotime($recurring_schedule->expiration);
      ms_core_update_recurring_schedule($recurring_schedule);
    }

    // Save the order
    $order = ms_core_order_save($order);

    // Display a message
    drupal_set_message(t('Order !num saved.', array('!num' => $order->order_number)));
  }
  else {
    // Create a new order
    $account = user_load(array('name' => $v['username']));
    $order = ms_core_order_new($v['order_type'], $account->uid);

    // Set the values
    $order->created = strtotime($v['created']);
    $order->gateway = $v['gateway'];
    $order->order_type = $v['order_type'];
    $order->status = $v['status'];
    $order->currency = $v['currency'];
    $order->first_name = $v['first_name'];
    $order->last_name = $v['last_name'];
    $order->email_address = $v['email_address'];
    $order->uid = $account->uid;
    $order->billing_address = array(
      'street' => trim($v['billing_street']),
      'city' => trim($v['billing_city']),
      'state' => trim($v['billing_state']),
      'zip' => trim($v['billing_zip']),
      'country' => trim($v['billing_country']),
      'phone' => trim($v['billing_phone']),
      );
    $order->shipping_address = array(
      'street' => trim($v['shipping_street']),
      'city' => trim($v['shipping_city']),
      'state' => trim($v['shipping_state']),
      'zip' => trim($v['shipping_zip']),
      'country' => trim($v['shipping_country']),
      'phone' => trim($v['shipping_phone']),
      );

    // Save the order
    $order = ms_core_order_save($order);

    // Display a message
    drupal_set_message(t('Order !num saved.', array('!num' => $order->order_number)));
  }

  $form_state['redirect'] = 'admin/moneyscripts/orders';
}

/**
 * Delete Checkout Order Page
 */
function ms_core_delete_checkout_order_confirm(&$form_state, $order_key) {
  $order = ms_core_order_load_by_key($order_key);
  $form['#ms_core_oid'] = $order->oid;
  return confirm_form($form, t('Are you sure you want to delete this order?'), 'user', t('This action cannot be undone.'), t('Delete'));
}

function ms_core_delete_checkout_order_confirm_submit($form, &$form_state) {
  $order = ms_core_order_load($form['#ms_core_oid']);

  ms_core_order_delete($order->oid);

  drupal_set_message(t('Order %number has been deleted.', array('%number' => $order->order_number)));
  $form_state['redirect'] = 'user';
}

/**
 * Delete Order Page
 */
function ms_core_delete_order_confirm(&$form_state, $order_key) {
  $order = ms_core_order_load_by_key($order_key);
  $form['#ms_core_oid'] = $order->oid;
  return confirm_form($form, t('Are you sure you want to delete this order?'), 'admin/moneyscripts/orders', t('This action cannot be undone. Deleting this order will remove all records of payments received for this order as well.'), t('Delete'));
}

function ms_core_delete_order_confirm_submit($form, &$form_state) {
  $order = ms_core_order_load($form['#ms_core_oid']);

  ms_core_order_delete($order->oid);

  drupal_set_message(t('Order %number has been deleted.', array('%number' => $order->order_number)));
  $form_state['redirect'] = 'admin/moneyscripts/orders';
}

/**
 * Delete Payment Page
 */
function ms_core_delete_payment_confirm(&$form_state, $pid) {
  $payment = ms_core_load_payment($pid);
  $form['#ms_core_pid'] = $payment->pid;
  return confirm_form($form, t('Are you sure you want to delete this payment?'), 'admin/moneyscripts/orders', t('This action cannot be undone. Deleting this payment will remove all records of it from the database.'), t('Delete'));
}

function ms_core_delete_payment_confirm_submit($form, &$form_state) {
  $payment = ms_core_load_payment($form['#ms_core_pid']);

  db_query("DELETE FROM {ms_payments} WHERE pid = %d", $payment->pid);

  drupal_set_message(t('Payment %number has been deleted.', array('%number' => $payment->pid)));
  $form_state['redirect'] = 'admin/moneyscripts/orders';
}

/**
 * Remove Product Page
 */
function ms_core_remove_product_confirm(&$form_state, $order_product_id) {
  $product = ms_core_load_order_product($order_product_id);
  $form['#ms_core_order_product_id'] = $product->order_product_id;
  return confirm_form($form, t('Are you sure you want to remove this product?'), 'admin/moneyscripts/orders', t('This action cannot be undone.'), t('Remove'));
}

function ms_core_remove_product_confirm_submit($form, &$form_state) {
  $product = ms_core_load_order_product($form['#ms_core_order_product_id']);

  db_query("DELETE FROM {ms_order_products} WHERE order_product_id = %d", $product->order_product_id);

  drupal_set_message(t('Product %name has been removed.', array('%name' => $product->name)));
  $form_state['redirect'] = 'admin/moneyscripts/orders';
}

/**
 * Resubmit Payment Page
 */
function ms_core_resubmit_payment_confirm(&$form_state, $pid) {
  $payment = ms_core_load_payment($pid);
  $form['#ms_core_pid'] = $payment->pid;
  return confirm_form($form, t('Are you sure you want to resubmit this payment?'), 'admin/moneyscripts/orders', t('This action cannot be undone. Resubmitting a payment will cause other modules to act on the payment as if it were a real payment.'), t('Resubmit'));
}

function ms_core_resubmit_payment_confirm_submit($form, &$form_state) {
  $payment = ms_core_load_payment($form['#ms_core_pid']);

  // Enter the payment, without inserting a new record or validating it
  ms_core_enter_payment($payment, FALSE, TRUE, FALSE);

  drupal_set_message(t('Payment %number has been resubmitted.', array('%number' => $payment->pid)));
  $form_state['redirect'] = 'admin/moneyscripts/orders';
}

function ms_core_add_timeentry_js($element) {
  $path = drupal_get_path('module', 'ms_core');
  drupal_add_js($path .'/js/timeentry/jquery.timeentry.min.js');
  drupal_add_css($path .'/js/timeentry/jquery.timeentry.css');
  $js = "
  $(document).ready(function() {
    $('#". $element ."').timeEntry({spinnerImage: '/$path/js/timeentry/spinnerUpDown.png',
    spinnerSize: [15, 16, 0], spinnerBigSize: [30, 32, 0],
    spinnerIncDecOnly: true, show24Hours: true, showSeconds: true});
  });
  ";
  drupal_add_js($js, 'inline');
}

/**
 * Build the add payment form
 */
function ms_core_edit_payment_form(&$form_state, $action = 'add', $id = 0) {
  ms_core_add_timeentry_js('edit-created-time');
  $form['payment'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  if ($action == 'edit') {
    $is_edit = TRUE;
    $payment = ms_core_load_payment($id);
    $order = ms_core_order_load($payment->oid);
    $form['payment']['pid'] = array(
      '#type' => 'value',
      '#value' => $payment->pid,
    );
    $form['payment']['paymentid'] = array(
      '#type' => 'textfield',
      '#title' => t('Payment ID'),
      '#size' => 32,
      '#maxlength' => 64,
      '#disabled' => TRUE,
      '#description' => t("The ID of this Payment"),
      '#value' => $payment->pid,
    );
    $form['payment']['oid'] = array(
      '#type' => 'value',
      '#value' => ($order) ? $order->oid : 0,
    );
    $form['payment']['orderid'] = array(
      '#type' => 'textfield',
      '#title' => t('Order ID'),
      '#size' => 32,
      '#maxlength' => 64,
      '#disabled' => TRUE,
      '#description' => t("The ID of the Order"),
      '#default_value' => ($order) ? $order->order_number : '',
    );
  }
  else if (arg(3) == 'add' AND $oid = arg(4)) {
    $is_edit = FALSE;
    $order = ms_core_order_load_by_key($oid);
    $form['payment']['oid'] = array(
      '#type' => 'value',
      '#value' => ($order) ? $order->oid : 0,
    );
    $form['payment']['orderid'] = array(
      '#type' => 'textfield',
      '#title' => t('Order ID'),
      '#size' => 32,
      '#maxlength' => 64,
      '#disabled' => TRUE,
      '#description' => t("The ID of the Order"),
      '#default_value' => ($order) ? $order->order_number : '',
    );
  }
  else {
    $is_edit = FALSE;
    $order = ms_core_order_load_by_key($id);
    $form['payment']['oid'] = array(
      '#type' => 'textfield',
      '#title' => t('Order ID'),
      '#size' => 32,
      '#required' => TRUE,
    );
  }

  $today = time();
  $form['payment']['created'] = array(
    '#type' => 'date',
    '#title' => t('Date'),
    '#description' => t("Date the order was created"),
    '#default_value' => array(
      'year' => ($is_edit) ? date('Y', $payment->created) : date('Y', $today),
      'month' => ($is_edit) ? date('n', $payment->created) : date('n', $today),
      'day' => ($is_edit) ? date('j', $payment->created) : date('j', $today),
      ),
  );
  $form['payment']['created_time'] = array(
    '#type' => 'textfield',
    '#title' => t('Time'),
    '#size' => 12,
    '#description' => t("Time the payment was created"),
    '#default_value' => ($is_edit) ? date('H:i:s', $payment->created) : date('H:i:s', $today),
  );
  $form['payment']['type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => ms_core_get_payment_types($order->order_type),
    '#description' => t("The type of payment"),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $payment->type : 'cart',
  );
  $form['payment']['gateway'] = array(
    '#type' => 'select',
    '#title' => t('Gateway'),
    '#options' => ms_core_get_payment_gateways_list(),
    '#description' => t("The gateway for this payment"),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $payment->gateway : '',
  );
  $form['payment']['transaction'] = array(
    '#type' => 'textfield',
    '#title' => t('Transaction ID'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The transaction id"),
    '#default_value' => ($is_edit) ? $payment->transaction : '',
  );
  $form['payment']['recurring_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Recurring ID'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The recurring id"),
    '#default_value' => ($is_edit) ? $payment->recurring_id : '',
  );
  $form['payment']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#size' => 32,
    '#maxlength' => 64,
    '#description' => t("The amount for this payment"),
    '#default_value' => ($is_edit) ? $payment->amount : '',
  );
  $form['payment']['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => ms_core_get_currencies(),
    '#description' => t("The currency for this payment"),
    '#required' => TRUE,
    '#default_value' => ($is_edit) ? $payment->currency : $order->currency,
  );
  $form['payment']['notify'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process the Payment?'),
    '#description' => t("Check this to have modules act on the payment as if it were live."),
    '#default_value' => ($is_edit) ? 0 : 1,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  $form['#redirect'] = 'admin/moneyscripts/orders';
  return $form;
}

/**
 * Submit Function for the edit payment form
 */
function ms_core_edit_payment_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $order = ms_core_order_load($v['oid']);

  if ($payment = ms_core_load_payment($v['pid'])) {
    $payment->oid = $v['oid'];
    $payment->type = $v['type'];
    $payment->created = strtotime($v['created']['year'] .'-'. $v['created']['month'] .'-'. $v['created']['day'] .' '. $v['created_time']);
    $payment->gateway = $v['gateway'];
    $payment->transaction = $v['transaction'];
    $payment->amount = $v['amount'];
    $payment->currency = $v['currency'];
    $payment->recurring_id = $v['recurring_id'];

    $payment->save();
    drupal_set_message(t('Payment %number has been saved.', array('%number' => $payment->pid)));

    if ($v['notify']) {
      ms_core_enter_payment($payment, FALSE, TRUE, FALSE);
    }
  }
  else {
    // Create a new payment
    $payment = ms_core_new_payment($order->oid, $v['gateway'], $v['type']);
    $payment->created = strtotime($v['created']['year'] .'-'. $v['created']['month'] .'-'. $v['created']['day'] .' '. $v['created_time']);
    $payment->transaction = $v['transaction'];
    $payment->amount = $v['amount'];
    $payment->currency = $v['currency'];
    $payment->data = array('manual' => TRUE);
    $payment->recurring_id = $v['recurring_id'];
    $payment->billing_address = $order->billing_address;
    $payment->shipping_address = $order->shipping_address;

    // Add the Payment to the Order
    ms_core_enter_payment($payment, FALSE, $v['notify']);

    drupal_set_message(t('Added a new payment for Order %number.', array('%number' => $order->order_number)));
  }
}

/**
 * Build a list of available products from modules
 */
function ms_core_get_module_products_list() {
  $products = module_invoke_all('ms_products');
  $products_list = array();

  foreach ($products as $product) {
    $products_list[$product->module .'-'. $product->id] = $product->module_title .' :: '. $product->name;
  }

  return $products_list;
}

/**
 * Build a list of available products from modules
 */
function ms_core_get_module_products() {
  $products = module_invoke_all('ms_products');
  $products_list = array();

  foreach ($products as $product) {
    $products_list[$product->module .'-'. $product->id] = $product;
  }

  return $products_list;
}

/**
 * Get a module product
 */
function ms_core_get_module_product($id) {
  $products = ms_core_get_module_products();
  return $products[$id];
}

/**
 * Build the add product form
 */
function ms_core_add_product_form(&$form_state, $order_key) {
  $order = ms_core_order_load_by_key($order_key);

  $form['oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );
  $form['orderid'] = array(
    '#type' => 'textfield',
    '#title' => t('Order ID'),
    '#size' => 32,
    '#maxlength' => 64,
    '#disabled' => TRUE,
    '#description' => t("The ID of the Order"),
    '#value' => $order->order_number,
  );
  $form['productid'] = array(
    '#type' => 'select',
    '#title' => t('Select Product'),
    '#options' => ms_core_get_module_products_list(),
    '#description' => t("Select a product from this list"),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Product'),
  );
  $form['#redirect'] = 'admin/moneyscripts/orders';

  return $form;
}

/**
 * Submit Function for the Add Product form
 */
function ms_core_add_product_form_submit($form, &$form_state) {
  $v = $form_state['values'];
  $order = ms_core_order_load($v['oid']);
  $product = ms_core_get_module_product($v['productid']);

  if ($product->id) {
    // Add the product to the order
    ms_core_add_order_product($order, $product);

    drupal_set_message(t('Added product %product to Order %number.',
      array('%product' => $product->name, '%number' => $order->order_number)));
  }
}

/**
 * Generates a filter form
 *
 * @param $variables
 *   An array of variables
 */
function ms_core_get_filter_form(&$form_state, $variables) {
  extract($variables);

  $collapsed = TRUE;
  foreach ($variables as $element => $value) {
    if ((!is_array($value) AND $value)) {
      $collapsed = FALSE;
    }
    if (is_array($value) AND ($value['#default_value'] OR $value['#required'])) {
      $collapsed = FALSE;
    }
  }

  $form = array();
  $form['#method'] = 'get';
  $form['#action'] = request_uri();
  $form['search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search'),
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
  );

  if (isset($variables['name'])) {
    $form['search']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('User Name'),
      '#size' => 32,
      '#maxlength' => 64,
      '#description' => t("All or part of the username."),
      '#default_value' => isset($name) ? $name : '',
      '#required' => FALSE,
      '#weight' => 1,
    );
    unset($variables['name']);
  }

  if (isset($variables['oid_key'])) {
    $form['search']['oid_key'] = array(
      '#type' => 'textfield',
      '#title' => t('Order ID / Key'),
      '#size' => 16,
      '#maxlength' => 16,
      '#description' => t("Enter the Order ID or Key"),
      '#default_value' => isset($oid_key) ? $oid_key : '',
      '#required' => FALSE,
      '#weight' => 2,
    );
    unset($variables['oid_key']);
  }

  if (isset($variables['order_status'])) {
    $statuses = ms_core_get_order_statuses();
    $statuses['All'] = t('All');

    $form['search']['order_status'] = array(
      '#type' => 'select',
      '#title' => t('Order Status'),
      '#description' => t("Select which order status to filter by."),
      '#default_value' => isset($order_status) ? $order_status : 'All',
      '#options' => $statuses,
      '#required' => FALSE,
      '#weight' => 3,
    );
    unset($variables['order_status']);
  }

  if (isset($variables['pager_amount'])) {
    $form['search']['pager_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Records per page'),
      '#size' => 16,
      '#maxlength' => 16,
      '#description' => t("How many records should be shown per page? Enter 0 to show all records."),
      '#default_value' => isset($pager_amount) ? $pager_amount : 20,
      '#required' => FALSE,
      '#weight' => 3,
    );
    unset($variables['pager_amount']);
  }

  // Add any other variables
  foreach ($variables as $name => $element) {
    $form['search'][$name] = array(
      '#type' => isset($element['#type']) ? $element['#type'] : 'textfield',
      '#title' => isset($element['#title']) ? $element['#title'] : '',
      '#description' => isset($element['#description']) ? $element['#description'] : '',
      '#default_value' => isset($element['#default_value']) ? $element['#default_value'] : '',
      '#required' => isset($element['#required']) ? $element['#required'] : FALSE,
      '#weight' => isset($element['weight']) ? $element['weight'] : 4,
    );

    // Merge in any other settings
    if (is_array($element)) {
      $form['search'][$name] = array_merge($form['search'][$name], $element);
    }
  }

  $form['search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#weight' => 99,
  );

  return $form;
}

/**
 * Autocomplete a User Name
 */
function ms_core_autocomplete_user($name = '') {
  $matches = array();
  if ($name) {
    $result = db_query("SELECT name FROM {users}");
    while ($account = db_fetch_object($result)) {
      $possible_values[] = $account->name;
    }
    foreach ($possible_values as $value) {
      if (preg_match("/$name/i", $value)) {
        $matches[$value] = $value;
      }
    }
  }
  drupal_json($matches);
}

/**
 * Autocomplete a Node
 */
function ms_core_autocomplete_node($title = '') {
  $matches = array();
  if ($title) {
    $result = db_query("SELECT title, nid FROM {node} WHERE LOWER(title) LIKE LOWER('%s')", array('%' . $title . '%'));
    while ($node = db_fetch_object($result)) {
      $matches[ms_core_create_autocomplete_key($node->nid)] = $node->title;
    }
  }
  drupal_json($matches);
}

/**
 * Autocomplete a Product Name
 */
function ms_core_autocomplete_product($name = '') {
  $matches = array();
  if ($name) {
    $products = ms_core_get_module_products();
    foreach ($products as $key => $product) {
      if (preg_match("/$name/i", $product->module_title .' - '. $product->name)) {
        $matches[$key] = $product->module_title .' - '. $product->name;
      }
    }
  }
  drupal_json($matches);
}

/*
 * Helper Function to get the Cards
 */
function ms_core_get_cards($cards, $allowed_cards, $filter = TRUE) {
  if ($filter) {
    $allowed_cards = array_filter($allowed_cards);
  }
  if (is_array($allowed_cards) AND !empty($allowed_cards)) {
    $filtered_cards = array_intersect_key($cards, $allowed_cards);
    return $filtered_cards;
  }
  else {
    return $cards;
  }
}

function ms_core_time_ago($date, $granularity = 2) {
  $difference = abs(time() - $date);
  $periods = array(
    'decade' => 315360000,
    'year' => 31536000,
    'month' => 2628000,
    'week' => 604800,
    'day' => 86400,
    'hour' => 3600,
    'minute' => 60,
    'second' => 1
  );

  foreach ($periods as $key => $value) {
    if ($difference >= $value) {
      $time = floor($difference/$value);
      $difference %= $value;
      $retval .= ($retval ? ' ' : '').$time.' ';
      $retval .= (($time > 1) ? $key.'s' : $key);
      $granularity--;
    }
    if ($granularity == '0') { break; }
  }
  return $retval;
}

/**
 * Insert a history item
 */
function ms_core_add_history_item($order, $uid, $message, $hidden = FALSE) {
  return db_query("INSERT INTO {ms_core_order_history} (oid, uid, message, status, hidden, created) VALUES (%d, %d, '%s', '%s', %d, %d)",
    $order->oid, $uid, $message, $order->status, $hidden ? 1 : 0, time());
}

// ======================================
// VIEWS
// ======================================

/**
 * Implementation of hook_views_api().
 */
function ms_core_views_api() {
  return array(
    'api' => '2.0',
    'path' => drupal_get_path('module', 'ms_core') .'/views',
  );
}

/**
 * Implementation of hook_views_handlers().
 */
function ms_core_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('module', 'ms_core') .'/views',
    ),
    'handlers' => array(
      'ms_core_order_status_handler' => array(
        'parent' => 'views_handler_field',
        ),
    ),
  );
}

/**
 * Implementation of hook_date_api_fields().
 */
function ms_core_date_api_fields($field) {
  $values = array(
    // The type of date: DATE_UNIX, DATE_ISO, DATE_DATETIME.
    'sql_type' => DATE_UNIX,
    // Timezone handling options: 'none', 'site', 'date', 'utc'.
    'tz_handling' => 'site',
    // Needed only for dates that use 'date' tz_handling.
    'timezone_field' => '',
    // Needed only for dates that use 'date' tz_handling.
    'offset_field' => '',
    // Array of "table.field" values for related fields that should be
    // loaded automatically in the Views SQL.
    'related_fields' => array(),
    // Granularity of this date field's db data.
    'granularity' => array('year', 'month', 'day', 'hour', 'minute', 'second'),
  );
  return $values;
}

// ======================================
// Credit Cards
// ======================================

function ms_core_get_cc_images($cards_raw = array()) {
  $string = "";
  $path = base_path() . drupal_get_path('module', 'ms_core');
  $cards = $cards_raw;
  if (array_values($cards) !== $cards) {
    $cards = array_keys(array_filter($cards_raw));
  }
  foreach ($cards as $type) {
    if ($type) {
      $string .= ' <img src="'. $path .'/images/'. $type .'.gif" style="position: relative; top: 5px;" />';
    }
  }
  return $string;
}

// ======================================
// i18n Integration
// ======================================
/**
 * Helper function that translates strings via i18n
 */
function ms_core_translate($name, $string, $textgroup = 'ms_core', $langcode = NULL) {
  return function_exists('i18nstrings') ? i18nstrings($textgroup . ':' . $name, $string, $langcode) : $string;
}

// ======================================
// RULES - EVENTS
// ======================================

/**
* Event: Trigger the order change status event
* Implements hook_ms_order_status_change()
*/
function ms_core_ms_order_status_change($old_status, $new_status, $order) {
  if (module_exists('rules')) {
    $account = user_load($order->uid);
    rules_invoke_event('ms_core_event_order_status_changed', $account, $order, $old_status, $new_status);
  }

  return $order;
}

/**
 * Generates the invoice header html with token support
 */
function ms_core_get_invoice_header($order) {
  $account = user_load($order->uid);
  $template = variable_get('ms_core_invoice_header', variable_get('ms_core_invoice_header', "<h2>[site-name]</h2><h4>[site-slogan]</h4>"));
  $template = token_replace($template, 'ms_core_order', $order);
  $template = token_replace($template, 'user', $account);
  return $template;
}

/**
 * Displays the invoice for an order
 */
function ms_core_view_order_invoice($order_key) {
  if ($order = ms_core_order_load_by_key($order_key)) {
    return theme('ms_core_invoice', $order, 'view', ms_core_get_invoice_header($order));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Displays the print invoice for an order
 */
function ms_core_view_order_print($order_key) {
  if ($order = ms_core_order_load_by_key($order_key)) {
    $op = 'print';
    if (ip_address() == '69.164.218.62') {
      $op = 'pdf';
    }
    print theme('ms_core_invoice', $order, $op, ms_core_get_invoice_header($order));
    exit;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Implements hook_theme().
 */
function ms_core_theme($existing, $type, $theme, $path) {
  return array(
    'ms_core_invoice' => array(
      'template' => 'ms-core-invoice',
      'path' => $path . '/templates',
      'arguments' => array(
        'order' => NULL,
        'op' => 'view',
        'invoice_header' => NULL,
      ),
    ),
  );
}

/**
 * Creates an autocomplete key from a node
 */
function ms_core_create_autocomplete_key($nid) {
  if ($node = node_load($nid)) {
    return $key = '[' . $node->nid . '] ' . $node->title;
  }
  return '';
}

/**
 * Extracts an nid from an autocomplete key
 */
function ms_core_extract_nid_from_autocomplete_key($name) {
  if (preg_match('/^\[(\d+)\]/', $name, $matches) > 0) {
    return (int) $matches[1];
  }
  return NULL;
}

/**
 * Confirms the rebuild orders action
 */
function ms_core_rebuild_orders_confirm(&$form_state) {
  return confirm_form($form, t('Are you sure you want to rebuild the orders?'), 'admin/moneyscripts/orders',
    t('This will refresh the order data object to use the latest override settings from the product(s) in the order. This action cannot be undone.'),
    t('Rebuild Orders'));
}

/**
 * Rebuilds the orders
 */
function ms_core_rebuild_orders_confirm_submit($form, &$form_state) {
  // Load all of the orders from the database
  $result = db_query("SELECT * FROM {ms_orders}");
  while ($row = db_fetch_object($result)) {
    // For each order, load the products and get the override settings and data into the order object
    $order = ms_core_order_load($row->oid);
    $data = $order->data;
    foreach ($order->products as $item) {
      $product = ms_core_load_module_product($item->module, $item->id);
      $data = array_merge($data, $product->data);
    }

    ms_core_add_data($order, $data);
  }

  drupal_set_message(t('Successfully rebuilt the orders.'));
  $form_state['redirect'] = 'admin/moneyscripts/orders';
}

/**
 * Implements hook_ms_order_payment().
 */
function ms_core_ms_order_payment($type, $product, $order, $payment) {
  if (variable_get('ms_core_profile_sync_back', FALSE)) {
    // Load the user
    $account = user_load($order->uid);

    $fields = ms_core_get_checkout_form_fields();

    // Billing Info
    foreach ($fields as $field => $data) {
      if (empty($obj[$profile_field]) AND variable_get('ms_checkout_form_' . $field . '_enabled', TRUE)
        AND $profile_field = variable_get('ms_core_profile_' . $field, $data['profile'])) {
        // Map the payment information field to the profile field
        // Save the profile fields if they are empty and the option is set
        switch ($field) {
          case 'cc_first_name':
            $account[$profile_field] = $payment->first_name;
            break;
          case 'cc_last_name':
            $account[$profile_field] = $payment->last_name;
            break;
          case 'billing_address1':
            $account[$profile_field] = $payment->billing_address['street'];
            break;
          case 'billing_city':
            $account[$profile_field] = $payment->billing_address['city'];
            break;
          case 'billing_state':
            $account[$profile_field] = $payment->billing_address['state'];
            break;
          case 'billing_zip':
            $account[$profile_field] = $payment->billing_address['zip'];
            break;
          case 'billing_country':
            $account[$profile_field] = $payment->billing_address['country'];
            break;
          case 'billing_phone':
            $account[$profile_field] = $payment->billing_address['phone'];
            break;
          case 'shipping_address1':
            $account[$profile_field] = $payment->shipping_address['street'];
            break;
          case 'shipping_city':
            $account[$profile_field] = $payment->shipping_address['city'];
            break;
          case 'shipping_state':
            $account[$profile_field] = $payment->shipping_address['state'];
            break;
          case 'shipping_zip':
            $account[$profile_field] = $payment->shipping_address['zip'];
            break;
          case 'shipping_country':
            $account[$profile_field] = $payment->shipping_address['country'];
            break;
          case 'shipping_phone':
            $account[$profile_field] = $payment->shipping_address['phone'];
            break;
        }
      }
    }

    user_save($account);
  }
}
