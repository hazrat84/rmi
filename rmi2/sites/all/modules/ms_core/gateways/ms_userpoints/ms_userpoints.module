<?php
// $Id$
/**
* @file
* Userpoints Payment Gateway for MS Core
*/

/**
* Display help and module information
*/
function ms_userpoints_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/moneyscripts/gateways/ms_userpoints":
    case "admin/help#ms_userpoints":
      $output = '<p>' .  t("UserPoints Payment Gateway Module for MoneyScripts. This allows your users to pay
      for orders using their UserPoints balance. This gateway supports both Recurring and Non-Recurring Orders.
      Users are also able to purchase UserPoints using a different payment method, such as PayPal.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function ms_userpoints_perm() {
  return array('purchase userpoints');
}

/**
 * Implementation of hook_menu
 */
function ms_userpoints_menu() {
  $items = array();
  $items['ms/checkout/ms_userpoints'] = array(
    'title' => 'Checkout',
    'page callback' => 'ms_userpoints_checkout',
    'access callback' => 'ms_userpoints_access_test',
    'type' => MENU_CALLBACK,
  );
  $items['admin/moneyscripts/gateways/ms_userpoints'] = array(
    'title' => 'UserPoints Payments',
    'description' => 'Set the various Userpoints Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ms_userpoints_admin'),
    'access arguments' => array('administer moneyscripts settings'),
    'type' => MENU_NORMAL_ITEM,
   );
   $items['ms_userpoints/cancel/%'] = array(
    'title' => 'Cancel Payments',
    'page callback' => 'ms_userpoints_cancel_page',
    'page arguments' => array(2),
    'access callback' => 'ms_userpoints_cancel_test',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['ms_userpoints/purchase'] = array(
    'title' => 'Buy Points',
    'page callback' => 'ms_userpoints_purchase_page',
    'access callback' => 'ms_userpoints_purchase_test',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function ms_userpoints_cancel_test($oid) {
  global $user;
  $order = ms_core_order_load($oid);
  if ($user->uid == $order->uid OR user_access('administer moneyscripts orders')) {
    return TRUE;
  }
  return FALSE;
}

function ms_userpoints_purchase_test() {
  return user_access('purchase userpoints');
}

function ms_userpoints_access_test() {
  return TRUE;
}

function ms_userpoints_cron() {
  // Process payments that need to be processed for UserPoints
  $result = db_query("SELECT * FROM {ms_recurring_schedules} WHERE gateway = '%s' AND status = '%s' AND next_payment != 0 AND next_payment < %d",
    'ms_userpoints', 'active', time());

  while ($recurring_schedule = db_fetch_object($result)) {
    // Load some variables
    $order = ms_core_order_load($recurring_schedule->oid);

    // Process the next payment
    $response = ms_userpoints_charge_recurring($order, $order->recurring_schedule, FALSE);

    if ($response['approved']) {
      // Log this
      ms_core_log('ms_userpoints', 'Processed Recurring Charge for Order #!num. Here are the details: @message',
          array('!num' => $order->oid, '@message' => ms_core_print_r($recurring_schedule)));

      // Insert the rec_payment Payment to the database
      $payment = ms_core_new_payment($order->oid, 'ms_userpoints', 'rec_payment');
      $payment->transaction = $response['data']['transaction'];
      $payment->amount = $response['data']['amount'];
      $payment->currency = $order->currency;
      $payment->data = $response['data'];
      $payment->recurring_schedule = $order->recurring_schedule;

      // Add the Payment to the Order
      ms_core_enter_payment($payment, FALSE);

      // Check if the recurring_schedule is done, send rec_eot
      if ($recurring_schedule->total_occurrences != 0 AND $recurring_schedule->total_occurrences <= ($recurring_schedule->current_payments + 1)) {
        $payment->type = 'rec_eot';
        $payment->amount = 0;
        ms_core_enter_payment($payment, FALSE);
      }
    }
    else {
      // Log the error
      ms_core_log_error('ms_userpoints', 'Error Processing Recurring Charge: @message',
        array('@message' => $response['message']));

      // Insert the rec_cancel Payment to the database
      $payment = ms_core_new_payment($order->oid, 'ms_userpoints', 'rec_cancel');
      $payment->transaction = drupal_get_token(serialize($order));
      $payment->currency = $order->currency;
      $payment->data = $response['data'];
      $payment->recurring_schedule = $order->recurring_schedule;

      // Add the Payment to the Order
      ms_core_enter_payment($payment, FALSE);
    }
  }
}

// ======================================
// Functions:
// ======================================

/**
 * Helper function to convert the amount to points
 */
function ms_userpoints_get_points_needed($amount) {
  $rate = variable_get('ms_userpoints_point_value', 100);

  // Round up for points
  $points = ceil(($amount * $rate));

  // Don't let it be negative
  return ($points > 0) ? $points : 0;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Implements hook_ms_core_overrides().
 */
function ms_userpoints_ms_core_overrides() {
  return array(
    'ms_userpoints' => array(
      'title' => t('MS UserPoints'),
      'form' => 'ms_userpoints_admin',
    ),
  );
}

/**
 * Admin Settings Form
 */
function ms_userpoints_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
  );
  $form['main']['ms_userpoints_show_gateway'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Gateway Option on Checkout Page?'),
    '#default_value' => variable_get('ms_userpoints_show_gateway', TRUE),
    '#ms_override' => TRUE,
  );
  $form['main']['ms_userpoints_point_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Userpoint Value'),
    '#default_value' => variable_get('ms_userpoints_point_value', 100),
    '#description' => t('How many userpoints are equal to 1 unit of currency? (Dollar, Euro, etc as defined in MS Core Currency setting). You can use decimals if you need to.'),
  );

  $cats = userpoints_get_categories();
  $options = array();
  $options['all'] = t('All');
  foreach ($cats as $key => $value) {
    $options[$key] = $value;
  }
  $form['main']['ms_userpoints_point_category'] = array(
    '#type' => 'select',
    '#title' => t('Userpoints Category'),
    '#default_value' => variable_get('ms_userpoints_point_category', array('all')),
    '#options' => $options,
    '#required' => TRUE,
  );

  $form['sell'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sell UserPoints Settings'),
    '#description' => t("Users who have permission to will be able to purchase points from this page: !link.",
      array('!link' => l(t('Purchase Points'), 'ms_userpoints/purchase'))),
  );
  $form['sell']['ms_userpoints_packages'] = array(
    '#type' => 'textarea',
    '#title' => t('Userpoint Packages'),
    '#default_value' => variable_get('ms_userpoints_packages', "100|9.95"),
    '#description' => t('Add as many packages as you want to offer, one per line, in the format [points]|[price]'),
  );

  return system_settings_form($form);
}

/**
 * Module Override Settings Form
 * This form will be used in the Product Override Settings area of the individual products, allowing individual products to override gateway default settings
 * We are exposing the login id and transaction key so that they can be overridden on a per-product basis
 */
function ms_userpoints_custom_settings_form($form_state, $defaults, $override = FALSE) {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
  );
  $form['main']['ms_userpoints_point_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Userpoint Value'),
    '#default_value' => ($override) ? $defaults['main']['ms_userpoints_point_value'] : variable_get('ms_userpoints_point_value', 100),
    '#description' => t('How many userpoints are equal to 1 unit of currency? (Dollar, Euro, etc as defined in MS Core Currency setting). You can use decimals if you need to.'),
  );

  $cats = userpoints_get_categories();
  $options = array();
  $options['all'] = t('All');
  foreach ($cats as $key => $value) {
    $options[$key] = $value;
  }
  $form['main']['ms_userpoints_point_category'] = array(
    '#type' => 'select',
    '#title' => t('Userpoints Category'),
    '#default_value' => ($override) ? $defaults['main']['ms_userpoints_point_category'] : variable_get('ms_userpoints_point_category', array('all')),
    '#options' => $options,
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implementation of hook_ms_payment_gateway
 *
 * This is the function you will use to register your gateway with MS Core
 * You will need to give a name and a description and a module for the gateway
 * You will also need to give a path for the checkout page (where the checkout form will be shown)
 * If your gateway supports cancelling recurring memberships, you can provide a function to generate the cancel link for the users
 * If the gateway support recurring payments, then mark it as TRUE, otherwise set it as FALSE
 * Same thing goes for cart payments
 *
 * If you want to provide a way for users to modify recurring payments, use the modify_url to define a path to handle the modification. See ms_paypal_wpp.module for an example of how to do this
 *
 * If you want to be able to let users change their billing information, provide a path to do so with the billing_url. See ms_paypal_wpp.module for an example of how to do this
 */
function ms_userpoints_ms_payment_gateway($cart) {
  $gateways[] = array(
    'name' => 'UserPoints Payments',
    'description' => t('Pay with your !point balance.', array('!point' => variable_get(USERPOINTS_TRANS_LCPOINT, 'point'))),
    'module' => 'ms_userpoints',
    'path' => 'ms/checkout/ms_userpoints',
    'cancel_url' => 'ms_userpoints_get_cancel_url',
    'modify_url' => '',
    'billing_url' => '',
    'recurring' => TRUE,
    'cart' => TRUE,
    'active' => ms_core_variable_get('ms_userpoints_show_gateway', TRUE, $cart),
  );

  return $gateways;
}

/**
 * Get the Cancellation URL for a recurring order
 */
function ms_userpoints_get_cancel_url($order) {
  return 'ms_userpoints/cancel/'. $order->oid;
}

/**
 * Initiate a cancellation
 */
function ms_userpoints_cancel_page($oid) {
  return drupal_get_form('ms_userpoints_cancel_page_confirm', $oid);
}

/**
 * Initiate a cancellation
 */
function ms_userpoints_cancel_page_confirm(&$form_state, $oid) {
  $order = ms_core_order_load($oid);
  $form['#ms_core_oid'] = $order->oid;
  $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
  return confirm_form($form, t('Are you sure you want to cancel your order?'), $redirect, t('This action cannot be undone.'), t('Confirm'));
}

function ms_userpoints_cancel_page_confirm_submit($form, &$form_state) {
  $order = ms_core_order_load($form['#ms_core_oid']);

  // Get the subscription_id from the order
  $subscription_id = ms_core_get_order_rec_id($order->oid);

  // Enter the rec_cancel payment
  $payment = ms_core_new_payment($order->oid, 'ms_userpoints', 'rec_cancel');
  // Generate a Unique Transaction ID
  $payment->transaction = drupal_get_token(serialize($order) . time());
  $payment->currency = $order->currency;
  $payment->recurring_schedule = $order->recurring_schedule;
  $payment->recurring_id = $subscription_id;
  $payment->billing_address = $order->billing_address;
  $payment->shipping_address = $order->shipping_address;

  ms_core_enter_payment($payment, FALSE);

  $redirect = ($_GET['destination']) ? $_GET['destination'] : '';
  $form_state['redirect'] = $redirect;
}

/********************************************************************
 * Checkout Form
 *******************************************************************/

/*
 * Make a form to show on the checkout page
 */
function ms_userpoints_checkout() {
  global $user;

  // Make sure the user is logged in, because only authenticated users can have User Points
  if (!$account = user_load($user->uid)) {
    return t('You are not logged in to an account. Please !login before you continue.',
      array('!login', l(t('log in'), 'user', array('query' => drupal_get_destination()))));
  }

  // Get the Form
  return drupal_get_form('ms_userpoints_checkout_form', $account);
}

/*
 * Build the Checkout Form
 */
function ms_userpoints_checkout_form($form_state, $account) {
  $form = array();

  // Get the $order from the session
  if (!$order = ms_core_load_session_order()) {
    // Error
    return t('The order could not be loaded from the session.');
  }

  // Here we need to get the balance of the user's points and see if it is enough or not to make the purchase
  $balance = userpoints_get_current_points($account->uid, variable_get('ms_userpoints_point_category', array('all')));

  // We also need to show the user's balance
  $form['balance'] = array(
    '#type' => 'item',
    '#title' => t('!points Balance', array('!points' => variable_get(USERPOINTS_TRANS_UCPOINTS, 'Points'))),
    '#value' => $balance,
  );

  // We also need to show how many points would be needed to make the purchase
  $points_needed = ms_userpoints_get_points_needed($order->amount);
  $form['points_needed'] = array(
    '#type' => 'item',
    '#title' => t('!points Needed', array('!points' => variable_get(USERPOINTS_TRANS_UCPOINTS, 'Points'))),
    '#value' => $points_needed,
  );

  // Store the order id for later
  $form['ms_oid'] = array(
    '#type' => 'value',
    '#value' => $order->oid,
  );

  // Add the submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Pay Now'),
  );
  return $form;
}

/*
 * Validate the Checkout Form
 */
function ms_userpoints_checkout_form_validate($form, &$form_state) {
  $form_values = $form_state['values'];

  // Load the order and account
  $order = ms_core_order_load($form_values['ms_oid']);
  $account = user_load($order->uid);

  // Do some checking to make sure the user has enough points
  $balance = userpoints_get_current_points($account->uid, variable_get('ms_userpoints_point_category', array('all')));
  $points_needed = ms_userpoints_get_points_needed($order->amount);

  // If the user doesn't have enough points, show an error and return
  if ($balance < $points_needed) {
    form_set_error('balance', t('Error') .': '. t('Your balance is too low for this purchase'));
    return;
  }

  // Otherwise let's charge the order
  switch ($order->order_type) {
    case 'recurring':
      $response = ms_userpoints_charge_recurring($order, $order->recurring_schedule);

      if ($response['approved'] == TRUE) {
        // The credit card was approved, reset the order id and that the order was charged successfully
        $form_state['values']['ms_oid'] = $order->oid;
        $form_state['values']['ms_order_charged'] = TRUE;

        // Insert the Payment to the database
        $payment = ms_core_new_payment($order->oid, 'ms_userpoints', 'rec_signup');
        $payment->transaction = $response['data']['transaction'];
        $payment->recurring_id = $response['data']['recurring_id'];
        $payment->amount = $response['data']['amount'];
        $payment->currency = $response['data']['currency'];
        $payment->data = $response['data'];
        $payment->recurring_schedule = $order->recurring_schedule;

        // Add the Payment to the Order
        ms_core_enter_payment($payment, FALSE);
      }
      else { // The Charge was not approved, show an error
        form_set_error('balance', t('Error') .': '. $response['message']);
      }
    break;

    case 'cart':
      $response = ms_userpoints_charge_single($order);

      if ($response['approved'] == TRUE) {
        // The charge was approved
        $form_state['values']['ms_oid'] = $order->oid;
        $form_state['values']['ms_order_charged'] = TRUE;

        // Insert the Payment to the database
        $payment = ms_core_new_payment($order->oid, 'ms_userpoints', 'cart');
        $payment->transaction = $response['data']['transaction'];
        $payment->recurring_id = $response['data']['recurring_id'];
        $payment->amount = $response['data']['amount'];
        $payment->currency = $order->currency;
        $payment->data = $response['data'];

        // Add the Payment to the Order
        ms_core_enter_payment($payment);
      }
      else { // The Credit Card was not approved, set an error on the form
        form_set_error('balance', t('Error') .': '. $response['message']);
      }
    break;
  }
}

/*
 * The card has been charged, mark the order as completed
 */
function ms_userpoints_checkout_form_submit($form, &$form_state) {
  $v = $form_state['values'];

  // If the Order was charged, complete it
  if ($v['ms_order_charged']) {
    $order = ms_core_order_load($v['ms_oid']);
    $order->status = 'Completed';
    $order = ms_core_order_save($order);
    drupal_goto('ms/thankyou');
  }
  else {
    // There was an error...
  }
}

/**
 * Process a single charge with our gateway's class
 */
function ms_userpoints_charge_single($order) {
  $return = array();

  $account = user_load($order->uid);

  // Deduct the correct amount from the user's points, and return
  $points_needed = ms_userpoints_get_points_needed($order->amount);
  drupal_set_message('Points: '. $points_needed);
  $points_txn = userpoints_userpointsapi(array('uid' => $account->uid, 'points' => -$points_needed));

  if ($points_txn['status']) {
    $return['approved'] = TRUE;
    // Get a unique transaction id using drupal_get_token
    $return['data']['transaction'] = drupal_get_token(serialize($order) . time());
    $return['data']['recurring_id'] = '';
    $return['data']['amount'] = $order->amount;
  }
  else {
    // Fail the charge with the reason text in the decline message.
    $return['approved'] = FALSE;
    $return['message'] = t('There was a problem deducting !points: @error',
      array('!points' => variable_get(USERPOINTS_TRANS_LCPOINTS, 'points'), '@error' => $points_txn['reason']));
  }

  return $return;
}

/**
 * Process a recurring charge with our gateway's class
 */
function ms_userpoints_charge_recurring($order, $recurring_schedule, $first = TRUE) {
  $return = array();

  $account = user_load($order->uid);

  $amount = round($recurring_schedule['main_amount'], 2);

  if ($first) {
    // If there is a trial set, use it instead
    if ($recurring_schedule['has_trial']) {
      $amount = round($recurring_schedule['trial_amount'], 2);
    }
  }

  // Deduct the correct amount from the user's points, and return
  $points_needed = ms_userpoints_get_points_needed($amount);
  $points_txn = userpoints_userpointsapi(array('uid' => $account->uid, 'points' => -$points_needed));

  if ($points_txn['status']) {
    $return['approved'] = TRUE;
    // Get a unique transaction id and recurring_id using drupal_get_token
    $return['data']['transaction'] = drupal_get_token(serialize($order) . time());
    $return['data']['recurring_id'] = drupal_get_token(serialize($order) . time() .'recurring_id');
    $return['data']['amount'] = $amount;
  }
  else {
    // Fail the charge with the reason text in the decline message.
    $return['approved'] = FALSE;
    $return['message'] = t('There was a problem deducting !points: @error',
      array('!points' => variable_get(USERPOINTS_TRANS_LCPOINTS, 'points'), '@error' => $points_txn['reason']));
  }

  return $return;
}

/**
 * Get a list of packages for forms
 */
function ms_userpoints_get_packages_list() {
  $packages = ms_userpoints_get_packages();
  $list = array();

  foreach ($packages as $package) {
    $list[$package['points']] = t('@points !pointsname for @amount',
      array('@points' => $package['points'], '!pointsname' => variable_get(USERPOINTS_TRANS_LCPOINTS, 'points'),
        '@amount' => ms_core_format_money($package['amount'])));
  }

  return $list;
}

/**
 * Returns an array of packages keyed by points
 */
function ms_userpoints_get_packages() {
  $packages = array();

  $lines = preg_split('/[\n\r]+/', (variable_get('ms_userpoints_packages', "")));

  foreach ($lines as $line) {
    $package = explode('|', $line);
    $packages[$package[0]] = array(
      'points' => $package[0],
      'amount' => $package[1],
    );
  }

  return $packages;
}

/**
 * Get a single package by id
 */
function ms_userpoints_get_package($id) {
  $packages = ms_userpoints_get_packages();
  return (isset($packages[$id])) ? $packages[$id] : FALSE;
}

/**
 * Shows a list of points packages to let users purchase points
 */
function ms_userpoints_purchase_page() {
  return drupal_get_form('ms_userpoints_purchase_form');
}

/**
 * Purchase Points form
 */
function ms_userpoints_purchase_form($form_state) {
  $packages = ms_userpoints_get_packages_list();

  $form = array();
  if (!empty($packages)) {
    $form['ms_userpoints'] = array(
      '#type' => 'fieldset',
      '#title' => t('Points Packages'),
    );
    $form['ms_userpoints']['package'] = array(
      '#type' => 'radios',
      '#title' => t('Choose your package'),
      '#options' => $packages,
      '#required' => TRUE,
    );
    $form['ms_userpoints']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  }

  return $form;
}

/**
 * Submit function for purchase points form
 */
function ms_userpoints_purchase_form_submit($form, &$form_state) {
  if ($package = ms_userpoints_get_package($form_state['values']['package'])) {
    $product = ms_core_new_product(t('@points !pointsname',
      array('@points' => $package['points'], '!pointsname' => variable_get(USERPOINTS_TRANS_LCPOINTS, 'points'))),
      'ms_userpoints', 1, $package['amount'], 'cart');

    // Store the custom data
    $product->data['ms_userpoints_package_points'] = $package['points'];
    $product->data['blocked_gateways'] = array('ms_userpoints');

    // Empty the cart first
    ms_core_empty_cart();

    ms_core_add_cart_product($product, TRUE);

    ms_core_checkout();
    exit;
  }
}

/**
 * Implementation of hook_ms_order_payment
 */
function ms_userpoints_ms_order_payment($type, $product, $order, $payment) {
  if ($product->module == 'ms_userpoints') {
    $account = user_load($order->uid);

    //Get Points
    $points = $product->data['ms_userpoints_package_points'];

    // Handle Refunds
    if ($type == 'refund' OR $type == 'reversal') {
      // Remove the points from the user's account
      userpoints_userpointsapi(array(
        'uid' => $account->uid,
        'points' => -$points,
        'description' => t('Removed because of Refund'),
        'display' => TRUE,
      ));

      ms_core_log('ms_userpoints', 'Removed @points points from @user because of refund.',
        array('@points' => $points, '@user' => $account->name));
    }
    else {
      // Add the points to the user's account
      // Remove the points from the user's account
      userpoints_userpointsapi(array(
        'uid' => $account->uid,
        'points' => $points,
        'description' => t('Package Purchased'),
        'display' => TRUE,
      ));

      drupal_set_message(t('@points !pointsname have been added to your account.',
        array('@points' => $points, '!pointsname' => variable_get(USERPOINTS_TRANS_LCPOINTS, 'points'))));
    }
  }
}
