<?php
// $Id$
/**
 * @file
 * Shows charts of MoneyScripts Modules stats
 *
 */

// ======================================
// Main Functions:
// ======================================
/**
 * Display help and module information
 */
function ms_reports_2_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#ms_reports_2":
      $output .= '<p>' .  t("MS Reports 2 uses Google Charts to display stats for your sales.") . '</p>';
      break;
    case "admin/moneyscripts/reports/sales":
      $output .= '<p>' .  t("View charts of your revenue from MoneyScripts orders.") . '</p>';
      break;
    case "admin/moneyscripts/reports/products":
      $output .= '<p>' .  t("View a pie chart showing which products are selling the most.") . '</p>';
      break;
    case "admin/moneyscripts/reports/recurring":
      $output .= '<p>' .  t("View Recurring Payments charts.") . '</p>';
      break;
    case "admin/moneyscripts/reports/affiliates":
      $output .= '<p>' .  t("View which affiliates have referred the most users to your site.") . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_perm().
 */
function ms_reports_2_perm() {
  return array('view moneyscripts charts');
}

/**
 * Implements hook_menu().
 */
function ms_reports_2_menu() {
  $items = array();
  $items['admin/moneyscripts/reports/sales'] = array(
    'title' => 'Sales Charts',
    'description' => 'View charts of Weekly, Monthly and Yearly sales',
    'page callback' => 'ms_reports_2_view_sales',
    'access arguments' => array('view moneyscripts charts'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/moneyscripts/reports/products'] = array(
    'title' => 'Product Statistics',
    'description' => 'View a pie chart of which products are selling best',
    'page callback' => 'ms_reports_2_view_products',
    'access arguments' => array('view moneyscripts charts'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1,
  );
  if (module_exists('ms_affiliates')) {
    $items['admin/moneyscripts/reports/affiliates'] = array(
      'title' => 'Affiliates Statistics',
      'description' => 'View various charts for MoneyScripts Membership',
      'page callback' => 'ms_reports_2_view_affiliates',
      'access arguments' => array('view moneyscripts charts'),
      'type' => MENU_NORMAL_ITEM,
      'weight' => 1,
    );
  }
  $items['admin/moneyscripts/reports/recurring'] = array(
    'title' => 'Recurring Payments Statistics',
    'description' => 'View various charts for MoneyScripts Membership',
    'page callback' => 'ms_reports_2_view_recurring',
    'access arguments' => array('view moneyscripts charts'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 3,
  );

  return $items;
}

// ======================================
// Functions:
// ======================================

/**
 * Helper Function to Create a Date given an Offset
 */
function ms_reports_2_make_date($day = 0, $mon = 0, $yr = 0) {
  $dt = localtime(time(), TRUE);
  $unixnewtime = mktime(
      0, 0, 0, $dt['tm_mon'] + 1 + $mon, $dt['tm_mday'] + $day, $dt['tm_year'] + 1900 + $yr);
  return $unixnewtime;
}

/**
 * Add the Javascript and Format the HTML required to make the charts work
 */
function ms_reports_2_get_chart_html($chart_id, $chart_type, $chart_title, $columns, $rows, $width = "100%", $height = "400") {
  $columns_js = '';
  foreach ($columns as $column) {
    $title = $column['title'];
    $type = $column['type'];
    $columns_js .= "data.addColumn('$type', '$title');";
  }

  $num_rows = count($rows);
  $rows_js = "data.addRows($num_rows);";
  $i = 0;
  foreach ($rows as $row) {
    $j = 0;
    foreach ($row as $sub_row) {
      $value = $sub_row['value'];
      switch ($sub_row['type']) {
        case 'string':
          $rows_js .= "data.setValue($i, $j, '$value');";
          break;
        case 'number':
          $rows_js .= "data.setValue($i, $j, $value);";
          break;
      }
      $j += 1;
    }
    $i += 1;
  }

  $options = array(
    'width: "'. $width .'"',
    'height: "'. $height .'"',
    'title: "'. $chart_title .'"',
  );

  $options_js = implode(',', $options);

  // Prepare the JS
  $js = <<<EOF
  // Load the Visualization API and the piechart package.
  google.load('visualization', '1', {'packages':['table', 'corechart']});

  // Set a callback to run when the Google Visualization API is loaded.
  google.setOnLoadCallback(drawChart_$chart_id);

  // Callback that creates and populates a data table,
  // instantiates the pie chart, passes in the data and
  // draws it.
  function drawChart_$chart_id() {
    // Create our data table.
    var data = new google.visualization.DataTable();
    $columns_js
    $rows_js

    // Instantiate and draw our chart, passing in some options.
    var chart = new google.visualization.$chart_type(document.getElementById('$chart_id'));
    chart.draw(data, { $options_js });
  }
EOF;

  // Add Required JS
  $external_js = 'https://www.google.com/jsapi';
  drupal_add_js('document.write(unescape("%3Cscript src=\''.
    $external_js . '\' type=\'text/javascript\'%3E%3C/script%3E"));', 'inline');
  drupal_add_js($js, 'inline', 'footer');

  $html = "<div id='$chart_id'></div>";

  return $html;
}

/**
 * Creates a form that will filter based on start and end time
 */
function ms_reports_2_start_end_form($form_state) {
  $form['#method'] = 'get';
  $form['start_time'] = array(
    '#type' => 'date',
    '#title' => t('Start'),
    '#default_value' => !empty($_REQUEST['start_time']) ? $_REQUEST['start_time'] : array('year' => date('Y'), 'month' => date('m'), 'day' => date('d')),
  );
  $form['end_time'] = array(
    '#type' => 'date',
    '#title' => t('End'),
    '#default_value' => !empty($_REQUEST['end_time']) ? $_REQUEST['end_time'] : array('year' => date('Y'), 'month' => date('m'), 'day' => date('d')),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

// ======================================
// Pages:
// ======================================

/**
 * Pie Chart for the Products
 */
function ms_reports_2_view_products() {
  $data = array();
  $output = drupal_get_form('ms_reports_2_start_end_form');

  if (!empty($_REQUEST['end_time'])) {
    $start_time = intval(strtotime($_REQUEST['start_time']['month'] . '/' . $_REQUEST['start_time']['day'] . '/' . $_REQUEST['start_time']['year']));
    $end_time = intval(strtotime($_REQUEST['end_time']['month'] . '/' . $_REQUEST['end_time']['day'] . '/' . $_REQUEST['end_time']['year']));

    $title = t('Product Sales Pie Chart: @start - @end', array('@start' => format_date($start_time, 'short'), '@end' => format_date($end_time, 'short')));

    $result = db_query("SELECT oid FROM {ms_orders} WHERE created >= %d AND created <= %d AND (status = '%s' OR status = '%s')",
      $start_time, $end_time, 'active', 'completed');
  }
  else {
    $title = t('Product Sales Pie Chart: All time');
    $result = db_query("SELECT oid FROM {ms_orders} WHERE (status = '%s' OR status = '%s')",
      'active', 'completed');
  }
  while ($row = db_fetch_object($result)) {
    $order = ms_core_order_load($row->oid);

    if (is_array($order->products)) {
      foreach ($order->products as $order_product) {
        if ($product = ms_core_load_module_product($order_product->module, $order_product->id)) {
          if (!isset($data[$product->module .'-'. $product->id])) {
            $data[$product->module .'-'. $product->id] = array(
              'count' => 0,
              'name' => $product->name,
              'amount' => 0,
            );
          }
          $data[$product->module .'-'. $product->id]['count'] += 1;
          $data[$product->module . '-' . $product->id]['amount'] += $product->amount;
        }
        else {
          if (!isset($data[$order_product->module .'-'. $order_product->id])) {
            $data[$order_product->module .'-'. $order_product->id] = array(
              'count' => 0,
              'name' => $order_product->name,
              'amount' => 0,
            );
          }
          $data[$order_product->module .'-'. $order_product->id]['count'] += 1;
          $data[$order_product->module . '-' . $order_product->id]['amount'] += $order_product->amount;
        }
      }
    }
  }

  $columns = array(
    array(
      'title' => t('Products'),
      'type' => 'string',
    ),
    array(
      'title' => t('Sales'),
      'type' => 'number',
    ),
  );

  $rows = array();
  foreach ($data as $key => $item) {
    $rows[] = array(
      array('type' => 'string', 'value' => $item['name'] . ' - ' . ms_core_format_money($item['amount'])),
      array('type' => 'number', 'value' => $item['count']),
     );
  }
  shuffle($rows);

  $chartHTML = ms_reports_2_get_chart_html('ps_chart', 'PieChart', $title, $columns, $rows, '100%', '400');

  $output .= "<div id='chart'>$chartHTML</div>";
  return $output;
}

/**
 * Pie Chart for the Best Affiliates
 */
function ms_reports_2_view_affiliates() {
  $data = array();

  $result = db_query("SELECT COUNT(aid) AS aidnum, aid FROM {ms_affiliates_genealogy} GROUP BY aid ORDER BY aidnum DESC");
  while ($affiliate = db_fetch_object($result)) {
    $account = user_load($affiliate->aid);
    if ($account->name AND !isset($data[$account->name])) {
      $data[] = array('name' => $account->name, 'count' => intval($affiliate->aidnum));
    }
  }

  $columns = array(
    array(
      'title' => t('Affiliates'),
      'type' => 'string',
    ),
    array(
      'title' => t('Referrals'),
      'type' => 'number',
    ),
  );

  $rows = array();
  foreach ($data as $value) {
    $rows[] = array(
      array('type' => 'string', 'value' => $value['name']),
      array('type' => 'number', 'value' => $value['count']),
     );
  }
  shuffle($rows);

  //$pie->set_tooltip( '#label#<br>Referred #val# Users' );
  $title = t('Best Affiliates Pie Chart');

  $chartHTML = ms_reports_2_get_chart_html('ps_chart', 'PieChart', $title, $columns, $rows, '100%', '400');

  return "<div id='chart'>$chartHTML</div>";
}

/**
 * Weekly, Monthly and Yearly Bar Charts for Recurring Payments
 */
function ms_reports_2_view_recurring() {
  $view_type = arg(4);
  $added = array();
  $cancelled = array();
  $cancelled_oid = array();
  $total_signups = 0;
  $total_cancels = 0;
  $limit_time = 0;

  switch ($view_type) {
    case 'Yearly':
      $result = db_query("SELECT * FROM {ms_payments} ORDER BY created ASC");
      while ($payment = db_fetch_object($result)) {
        if (!$limit_time) {
          $limit_time = $payment->created;
        }

        $date_name = 'Year ' . date('Y', $payment->created);
        if (!isset($added[$date_name])) {
          $labels[] = $date_name;
          $added[$date_name] = 0;
          $cancelled[$date_name] = 0;
        }
        if ($payment->type == 'rec_signup') {
          $added[$date_name] += 1;
          $total_signups += 1;
        }
        if ($payment->type == 'rec_cancel' OR $payment->type == 'rec_eot') {
          if (!in_array($payment->oid, $cancelled_oid)) {
            $cancelled[$date_name] += 1;
            $total_cancels += 1;
            $cancelled_oid[] = $payment->oid;
          }
        }
      }
      $title = t('Recurring Payments Stats: Yearly');
      $column_name = t('Year');
      break;

    case 'Monthly':
      // Make Labels and Initialize Values
      for ($i = -11; $i <= 0; $i++) {
        $date_name = date('M y', ms_reports_2_make_date(0, $i, 0));
        $added[$date_name] = 0;
        $cancelled[$date_name] = 0;
      }

      // Get Transactions and organize them
      $limit_time = ms_reports_2_make_date(0, -12, 0);
      $result = db_query("SELECT * FROM {ms_payments} WHERE created > %d", $limit_time);
      while ($payment = db_fetch_object($result)) {
        $date_name = date('M y', $payment->created);
        if ($payment->type == 'rec_signup') {
          $added[$date_name] += 1;
          $total_signups += 1;
        }
        if ($payment->type == 'rec_cancel' OR $payment->type == 'rec_eot') {
          if (!in_array($payment->oid, $cancelled_oid)) {
            $cancelled[$date_name] += 1;
            $total_cancels += 1;
            $cancelled_oid[] = $payment->oid;
          }
        }
      }
      $title = t('Recurring Payments Stats: Last 12 Months');
      $column_name = t('Month');
      break;

    case 'Weekly':
    default:
      // Make Labels and Initialize Values
      for ($i = -6; $i <= 0; $i++) {
        $date_name = date('M d, Y', ms_reports_2_make_date($i, 0, 0));
        $added[$date_name] = 0;
        $cancelled[$date_name] = 0;
      }

      // Get Transactions and organize them
      $limit_time = ms_reports_2_make_date(-7, 0, 0);
      $result = db_query("SELECT * FROM {ms_payments} WHERE created > %d", $limit_time);
      while ($payment = db_fetch_object($result)) {
        $date_name = date('M d, Y', $payment->created);
        if ($payment->type == 'rec_signup') {
          $added[$date_name] += 1;
          $total_signups += 1;
        }
        if ($payment->type == 'rec_cancel' OR $payment->type == 'rec_eot') {
          if (!in_array($payment->oid, $cancelled_oid)) {
            $cancelled[$date_name] += 1;
            $total_cancels += 1;
            $cancelled_oid[] = $payment->oid;
          }
        }
      }
      $title = t('Recurring Payments Stats: Last 7 Days');
      $column_name = t('Day');
      break;
  }

  $columns = array(
    array(
      'title' => $column_name,
      'type' => 'string',
    ),
    array(
      'title' => t('Added'),
      'type' => 'number',
    ),
    array(
      'title' => t('Cancelled/Expired'),
      'type' => 'number',
    ),
  );

  $rows = array();
  foreach ($added as $key => $value) {
    $rows[] = array(
      array('type' => 'string', 'value' => $key),
      array('type' => 'number', 'value' => $value),
      array('type' => 'number', 'value' => $cancelled[$key]),
     );
  }

  $charts = ms_reports_2_get_chart_html('ms_recurring_chart', 'ColumnChart', $title, $columns, $rows, '100%', '400');
  $charts .= ms_reports_2_get_chart_html('ms_recurring_table', 'Table', $title, $columns, $rows, '100%', '400');

  $links = "<div class='ms_stats_links'>"
    . l('Weekly', 'admin/moneyscripts/reports/recurring/Weekly') . ' | '
    . l('Monthly', 'admin/moneyscripts/reports/recurring/Monthly') . ' | '
    . l('Yearly', 'admin/moneyscripts/reports/recurring/Yearly')
    . "</div>";

  $content = '';

  $content .= $links;
  $content .= '<p>'. t("Total Signups from %start to %end: @total",
    array('%start' => format_date($limit_time, 'small'), '%end' => format_date(time(), 'small'), '@total' => $total_signups)) .'</p>';
  $content .= '<p>'. t("Total Cancellations / Expirations from %start to %end: @total",
    array('%start' => format_date($limit_time, 'small'), '%end' => format_date(time(), 'small'), '@total' => $total_cancels)) .'</p>';
  $content .= $charts;

  return $content;
}

/**
 * Weekly, Monthly and Yearly Bar Charts for Sales and Revenue
 */
function ms_reports_2_view_sales() {
  $view_type = arg(4);
  $revenue = array();
  $adjustment_totals = array();
  $sales = array();
  $data = array();
  $limit_time = 0;
  $filters = array();

  switch ($view_type) {
    case 'YearlyRolling':
      $curr_year = intval(date('y'));
      $curr_month = intval(date('m'));
      // Make Labels and Initialize Values
      for ($i = $curr_month; $i > 0; $i--) {
        $date_name = date('M y', strtotime("$curr_year-$i-1"));
        $revenue[$date_name] = 0;
        $sales[$date_name] = 0;
      }
      if ($curr_month < 12) {
        $curr_year -= 1;
        for ($i = 12; $i > $curr_month; $i--) {
          $date_name = date('M y', strtotime("$curr_year-$i-1"));
          $revenue[$date_name] = 0;
          $sales[$date_name] = 0;
        }
      }

      $sales = array_reverse($sales, TRUE);
      $revenue = array_reverse($revenue, TRUE);

      // Get Transactions and organize them
      $start_time = strtotime("$curr_year-$i-1");
      $end_time = time();
      $result = db_query("SELECT * FROM {ms_payments} WHERE (type = '%s' OR type = '%s') AND created > %d", 'cart', 'rec_payment', $start_time);
      while ($payment = db_fetch_object($result)) {
        $date_name = date('M y',   $payment->created);
        $revenue[$date_name] += (float) $payment->amount;
        $sales[$date_name] += 1;

        // Add up adjustment totals
        $order = ms_core_order_load($payment->oid);
        foreach ($order->adjustments as $adjustment) {
          if (!isset($adjustment_totals[$date_name][$adjustment->id])) {
            $adjustment_totals[$date_name][$adjustment->id] = 0;
          }
          $adjustment_totals[$date_name][$adjustment->id] += (float) ms_core_get_adjusted_price($adjustment, ms_core_get_order_products_total($order));
        }
      }

      $title = t('Sales Stats: Last 12 Months');
      $column_name = t('Months');
      break;

    case 'Yearly':
      $curr_year = isset($_GET['year']) ? $_GET['year'] : intval(date('Y'));
      // Make the filters form
      $filters['year'] = array(
        '#title' => t('Year'),
        '#default_value' => $curr_year,
      );

      // Make Labels and Initialize Values
      for ($i = 1; $i <= 12; $i++) {
        $date_name = date('M y', strtotime("$curr_year-$i-1"));
        $revenue[$date_name] = 0;
        $sales[$date_name] = 0;
      }

      // Get Transactions and organize them
      $start_time = strtotime("$curr_year-01-01");
      $next_year = $curr_year + 1;
      $end_time = strtotime("$next_year-01-01");
      $result = db_query("SELECT * FROM {ms_payments} WHERE (type = '%s' OR type = '%s') AND created >= %d AND created < %d",
        'cart', 'rec_payment', $start_time, $end_time);
      while ($payment = db_fetch_object($result)) {
        $date_name = date('M y',   $payment->created);
        if (!isset($revenue[$date_name])) {
          $revenue[$date_name] = 0;
        }
        if (!isset($sales[$date_name])) {
          $sales[$date_name] = 0;
        }
        $revenue[$date_name] += (float) $payment->amount;
        $sales[$date_name] += 1;

        // Add up adjustment totals
        $order = ms_core_order_load($payment->oid);
        foreach ($order->adjustments as $adjustment) {
          if (!isset($adjustment_totals[$date_name][$adjustment->id])) {
            $adjustment_totals[$date_name][$adjustment->id] = 0;
          }
          $adjustment_totals[$date_name][$adjustment->id] += (float) ms_core_get_adjusted_price($adjustment, ms_core_get_order_products_total($order));
        }
      }
      $title = t('Sales Stats: @year', array('@year' => date('Y', $start_time)));
      $column_name = t('Months');
      break;

    case 'Monthly':
      $curr_year = isset($_GET['year']) ? $_GET['year'] : intval(date('Y'));
      $curr_month = isset($_GET['month']) ? $_GET['month'] : intval(date('m'));
      $curr_day = intval(date('d'));

      $filters['year'] = array(
        '#title' => t('Year'),
        '#default_value' => $curr_year,
      );
      $filters['month'] = array(
        '#title' => t('Month'),
        '#default_value' => $curr_month,
      );

      // Make Labels and Initialize Values
      for ($i = 1; $i <= $curr_day; $i++) {
        $date_name = date('F d, Y', strtotime("$curr_year-$curr_month-$i"));
        $revenue[$date_name] = 0;
        $sales[$date_name] = 0;
      }

      // Get Transactions and organize them
      $start_time = strtotime("$curr_year-$curr_month-1");
      if ($curr_month == 12) {
        $end_month = 1;
        $end_year = $curr_year + 1;
      }
      else {
        $end_year = $curr_year;
        $end_month = $curr_month + 1;
      }
      $end_time = strtotime("$end_year-$end_month-1");
      $result = db_query("SELECT * FROM {ms_payments} WHERE (type = '%s' OR type = '%s') AND created >= %d AND created < %d",
        'cart', 'rec_payment', $start_time, $end_time);
      while ($payment = db_fetch_object($result)) {
        $date_name = date('F d, Y',   $payment->created);
        $revenue[$date_name] += (float) $payment->amount;
        $sales[$date_name] += 1;

        // Add up adjustment totals
        $order = ms_core_order_load($payment->oid);
        foreach ($order->adjustments as $adjustment) {
          if (!isset($adjustment_totals[$date_name][$adjustment->id])) {
            $adjustment_totals[$date_name][$adjustment->id] = 0;
          }
          $adjustment_totals[$date_name][$adjustment->id] += (float) ms_core_get_adjusted_price($adjustment, ms_core_get_order_products_total($order));
        }
      }
      $title = t('Sales Stats: @monthandyear', array('@monthandyear' => date('F, Y', $start_time)));
      $column_name = t('Day');
      break;

    case '30Days':
      // Make Labels and Initialize Values
      for ($i = -30; $i <= 0; $i++) {
        $date_name = date('F d, Y', ms_reports_2_make_date($i, 0, 0));
        $revenue[$date_name] = 0;
        $sales[$date_name] = 0;
      }

      // Get Transactions and organize them
      $start_time = ms_reports_2_make_date(-30, 0, 0);
      $end_time = time();
      $result = db_query("SELECT * FROM {ms_payments} WHERE (type = '%s' OR type = '%s') AND created > %d", 'cart', 'rec_payment', $start_time);
      while ($payment = db_fetch_object($result)) {
        $date_name = date('F d, Y',   $payment->created);
        $revenue[$date_name] += (float) $payment->amount;
        $sales[$date_name] += 1;

        // Add up adjustment totals
        $order = ms_core_order_load($payment->oid);
        foreach ($order->adjustments as $adjustment) {
          if (!isset($adjustment_totals[$date_name][$adjustment->id])) {
            $adjustment_totals[$date_name][$adjustment->id] = 0;
          }
          $adjustment_totals[$date_name][$adjustment->id] += (float) ms_core_get_adjusted_price($adjustment, ms_core_get_order_products_total($order));
        }
      }
      $title = t('Sales Stats: Last 30 Days');
      $column_name = t('Day');
      break;

    case 'Weekly':
    default:
      // Make Labels and Initialize Values
      for ($i = -6; $i <= 0; $i++) {
        $date_name = date('F d, Y', ms_reports_2_make_date($i, 0, 0));
        $revenue[$date_name] = 0;
        $sales[$date_name] = 0;
      }

      // Get Transactions and organize them
      $start_time = ms_reports_2_make_date(-6, 0, 0);
      $end_time = time();
      $result = db_query("SELECT * FROM {ms_payments} WHERE (type = '%s' OR type = '%s') AND created > %d", 'cart', 'rec_payment', $start_time);
      while ($payment = db_fetch_object($result)) {
        $date_name = date('F d, Y', $payment->created);
        $revenue[$date_name] += (float) $payment->amount;
        $sales[$date_name] += 1;

        // Add up adjustment totals
        $order = ms_core_order_load($payment->oid);
        foreach ($order->adjustments as $adjustment) {
          if (!isset($adjustment_totals[$date_name][$adjustment->id])) {
            $adjustment_totals[$date_name][$adjustment->id] = 0;
          }
          $adjustment_totals[$date_name][$adjustment->id] += (float) ms_core_get_adjusted_price($adjustment, ms_core_get_order_products_total($order));
        }
      }
      $title = t('Sales Stats: Last 7 Days');
      $column_name = t('Day');
      break;
  }

  $columns = array(
    array(
      'title' => $column_name,
      'type' => 'string',
    ),
    array(
      'title' => t('Revenue'),
      'type' => 'number',
    ),
    array(
      'title' => t('Sales'),
      'type' => 'number',
    ),
  );

  if (module_exists('ms_tax')) {
    $columns[] = array(
      'title' => t('Tax'),
      'type' => 'number',
    );
  }

  $total_revenue = 0;
  $rows = array();
  foreach ($revenue as $key => $value) {
    $this_row = array(
      array(
        'type' => 'string',
        'value' => $key,
      ),
      array(
        'type' => 'number',
        'value' => $value,
      ),
      array(
        'type' => 'number',
        'value' => $sales[$key],
      ),
    );

    if (module_exists('ms_tax')) {
      $this_row[] = array(
        'type' => 'number',
        'value' => isset($adjustment_totals[$key]['ms_tax_1']) ? $adjustment_totals[$key]['ms_tax_1'] : 0,
      );
    }

    $rows[] = $this_row;
    $total_revenue += $value;
  }

  $charts = ms_reports_2_get_chart_html('ms_sales_chart', 'ColumnChart', $title, $columns, $rows, '100%', '400');
  $charts .= ms_reports_2_get_chart_html('ms_sales_table', 'Table', $title, $columns, $rows, '100%', '400');

  $chart_links = array(
    l(t('Weekly'), 'admin/moneyscripts/reports/sales/Weekly'),
    l(t('Monthly'), 'admin/moneyscripts/reports/sales/Monthly'),
    l(t('Yearly'), 'admin/moneyscripts/reports/sales/Yearly'),
    l(t('30 Days'), 'admin/moneyscripts/reports/sales/30Days'),
    l(t('Yearly Rolling'), 'admin/moneyscripts/reports/sales/YearlyRolling')
  );
  $links = "<div class='ms_stats_links'>" . implode(' | ', $chart_links) . "</div>";

  $content = '';

  $content .= $links;

  if (!empty($filters)) {
    $content .= drupal_get_form('ms_core_get_filter_form', $filters);
  }

  $content .= '<p><b>'. t("Total Revenue from %start to %end: @total",
    array('%start' => format_date($start_time, 'small'), '%end' => format_date($end_time - 1, 'small'), '@total' => ms_core_format_money($total_revenue))) .'</b></p>';
  $content .= $charts;

  return $content;
}
